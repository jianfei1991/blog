{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/mobile.c853ad.js","path":"mobile.c853ad.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/avatar.jpg","path":"avatar.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.68ab53.css","path":"main.68ab53.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.fa3fc2.js","path":"slider.fa3fc2.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.68ab53.js","path":"main.68ab53.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"1ad7ce7daf2719347453d29e470726994bf8cf8d","modified":1579089330850},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1483426103000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1483426103000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1483426103000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1483426103000},{"_id":"themes/yilia/_config.yml","hash":"2c814c1c1efa74bceba50f65520e67bf42a4d61c","modified":1483585163000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1483426103000},{"_id":"themes/yilia/package.json","hash":"bbd736a2e0b68c1838441ee1c3e0f09398aaef59","modified":1483426103000},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1483426103000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1483426103000},{"_id":"themes/yilia/webpack.config.js","hash":"eed8e87c05ed8f72995b507870f364253f826317","modified":1483426103000},{"_id":"source/_drafts/ttest.md","hash":"1a0a9bd130d124748259bef2c0c4f5b5623581b3","modified":1483587203000},{"_id":"source/archive/index.md","hash":"78b237a989c3006f8fec0a94f950199b6bc6ec7c","modified":1536171449000},{"_id":"source/_posts/.DS_Store","hash":"716c9174ffc6a61d9a9593e8eea04a665ac961f5","modified":1534953693000},{"_id":"source/_posts/ASCII、Unicode和UTF-8编码的区别.md","hash":"0cdbdeaa88bb48327307694caf4dbc640cf23465","modified":1536171449000},{"_id":"source/_posts/HTTP-Cache-Control.md","hash":"e845e461567cab486ad41b6dd5dfe3c0ddab0479","modified":1536171449000},{"_id":"source/_posts/Object构造函数的方法.md","hash":"3766228a01e3e561fd0531dd300511e400fbc1e8","modified":1567243962682},{"_id":"source/_posts/Sublime-入门.md","hash":"2a87d16168c551051de5f828a600ee8b01b6e519","modified":1536171449000},{"_id":"source/_posts/cookie.md","hash":"7db735ecd1b87c2e0e7dc1e3a96f9f76a8ebe441","modified":1492226391000},{"_id":"source/_posts/ability.md","hash":"f17f100db9cc370711744a8c508ef3748a2ad02b","modified":1567243862362},{"_id":"source/_posts/chrome-skill.md","hash":"6dca9c3001128a6b36d5f8e5e91a3deb64e1115c","modified":1567243337202},{"_id":"source/_posts/hexo介绍.md","hash":"d7ac400d144e06f739cb10fbd4d1e7b36d3fe541","modified":1483519915000},{"_id":"source/_posts/hello-world.md","hash":"74c5e59f3e48484d052b83c25af26f8c9a7cc8c7","modified":1536251464518},{"_id":"source/_posts/editorConfig.md","hash":"238c5c130831c27a714ac4a6a7f97f2292416413","modified":1562314332916},{"_id":"source/_posts/markdown入门.md","hash":"e1ed1db1fc5446b0f443540c266daab2e12fdbd4","modified":1536171449000},{"_id":"source/_posts/jsArray.md","hash":"7127cbdda64c88efbc310c271823d3f1901aa21c","modified":1605693011744},{"_id":"source/_posts/git相关操作.md","hash":"7d6e6bb9accea0ddb00d2928c98f29369091df70","modified":1567243378026},{"_id":"source/_posts/mysql.md","hash":"c958cc13bcc55960b40dcdf8a8b3aad29e8e2603","modified":1492230810000},{"_id":"source/_posts/linux常用命令.md","hash":"e28c68ad2c9645d9391c1514419d2bdc44120c8d","modified":1557297708977},{"_id":"source/_posts/nginx.md","hash":"6a708b031cf9751644e5500656e7f9425cc9e8f1","modified":1553609571417},{"_id":"source/_posts/react入门.md","hash":"45991cce3f7038bb79f42dae39ad0e399964bee5","modified":1484211549000},{"_id":"source/_posts/package-json.md","hash":"228098ce333e2408e6ec4c479b2a5c8b756b9ca5","modified":1541269959514},{"_id":"source/_posts/nginx技术分享.md","hash":"cb0d43683508c9c73c8be5f230294bb3e79381cc","modified":1553609547773},{"_id":"source/_posts/rem入门.md","hash":"32b4bcf15e006053581693fb36a6b50f7e02404b","modified":1488707684000},{"_id":"source/_posts/record-problem.md","hash":"da24bbd79d4e6037b8abfeb6f10e72b708af6c3d","modified":1536171449000},{"_id":"source/_posts/todo.md","hash":"c47d735131ac956ffee42a61b57190f71e11b81f","modified":1536171449000},{"_id":"source/_posts/transition的坑.md","hash":"44d2887c771a4d1c6b26e58db567082539fe2be0","modified":1489057116000},{"_id":"source/_posts/vue中给svg组件的dom元素绑定点击事件.md","hash":"5dce69aa525325a1c2895234000e30fe0a4bad62","modified":1536171449000},{"_id":"source/_posts/window-onload.md","hash":"4770ab93967d0e07e8d2c79bfcfb6c778111899a","modified":1489038424000},{"_id":"source/_posts/vim常用快捷键.md","hash":"70d6068f7f0525739ffb2c54b4bf875a6f41823a","modified":1536171449000},{"_id":"source/_posts/使用iTerm2快捷连接SSH.md","hash":"a61edf15525cbd31d0deadb2a26e5e1d61fd4f7b","modified":1536171449000},{"_id":"source/_posts/关于跨域.md","hash":"46a0e883625d793cae873df3ced6aac286dc9767","modified":1495679352000},{"_id":"source/_posts/webpack踩坑记.md","hash":"92b11fbc3e846e166d8957d3740e100d66ed7f60","modified":1542681511216},{"_id":"source/_posts/多SSH-key的管理.md","hash":"6ffb65b3b1e2d7b74ade6ef1765aec48544f580f","modified":1495103123000},{"_id":"source/_posts/函数式编程.md","hash":"d0cddfc7003a9f8761390129fc7533903d97522f","modified":1536171449000},{"_id":"source/_posts/解决UC浏览器、微信浏览器试用display-flex的兼容问题.md","hash":"087661621e3177c45cccfc6941997c020126dc99","modified":1483689789000},{"_id":"source/_posts/性能优化.md","hash":"93ef961916f07b8fd2b2dbd9df7f0b1ff0ee6f10","modified":1538741506271},{"_id":"source/_posts/面试题.md","hash":"da54b0ca060b52eb242758e5a49bca0f82af2c9f","modified":1567244044461},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1483426103000},{"_id":"themes/yilia/.git/COMMIT_EDITMSG","hash":"509a05a568605e417091fc0a8dde18362e79744d","modified":1488762431000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1483426103000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1483425523000},{"_id":"themes/yilia/.git/index","hash":"85cecf1fd349e3d9ec2f2b2967ca0c55e3a10cbc","modified":1536249617960},{"_id":"themes/yilia/.git/packed-refs","hash":"40635431b51838dc9e6dd57e2cd54dcf2f60a3dc","modified":1483426103000},{"_id":"source/_posts/javascript执行堆栈.md","hash":"418a1caf03edf4e9d16b9d715432ebae0b0cb294","modified":1579587936504},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1483426103000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1483426103000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1483426103000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1483426103000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1483426103000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1483426103000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1483426103000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1483426103000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1483426103000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1483426103000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1483426103000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1483426103000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1483426103000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1483426103000},{"_id":"themes/yilia/source/mobile.c853ad.js","hash":"527ce9d0d479ed467c24113ed8833b09f2aa2300","modified":1483426103000},{"_id":"themes/yilia/source/avatar.jpg","hash":"fff24ab84780b8681907a653158883a384267d7d","modified":1483428916000},{"_id":"themes/yilia/source/main.68ab53.css","hash":"65081a1c3e2b3b73509ddb85baae3bd9f8ac2f9e","modified":1483426103000},{"_id":"themes/yilia/source/slider.fa3fc2.js","hash":"9b40c8671f165064b6ad461f23ca3d0929ae9190","modified":1483426103000},{"_id":"themes/yilia/source-src/css.ejs","hash":"edc89a945d271abfb24240ab31d5ea0285530b23","modified":1483426103000},{"_id":"themes/yilia/source-src/script.ejs","hash":"946b5e60b24438e8b876fa22b8a9864068e859ae","modified":1483426103000},{"_id":"themes/yilia/source/main.68ab53.js","hash":"79cb6470c3a7e6851121c545a992029293b5b401","modified":1483426103000},{"_id":"source/_posts/record-problem/Mobile-debug.png","hash":"a769ce3611b2aa586916d589f533e779b0ffc09d","modified":1484298823000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1483425523000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1483425523000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1483425523000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1483425523000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1483425523000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1483425523000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1483425523000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1483425523000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1483425523000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1483425523000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"51f0fa3221798188bb7acd842cb9b10f04ac2bff","modified":1488762431000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"ac767232c49faf3e755e7906e2b875dce786355c","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"a551a11f41f9cf09a47d4edcc0e278e112705400","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"b03fff43df9f62f2abc72da8d038371f229f9360","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1483426103000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1483426103000},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"c9fe6615f58fad00277e7c73a03b8470e652c590","modified":1483426103000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1483426103000},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1483426103000},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1483426103000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1483426103000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1483426103000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1483426103000},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1483426103000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1483426103000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1483426103000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1483426103000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"ce24ab7049be634c17a163e2db39f1f0b1f7c119","modified":1483426103000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1483426103000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"7c00f9102c9b102aa1370a346a0730e743351fbb","modified":1483426103000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"a73d37ff38d44c774e3ac081d59416b0e8592ca4","modified":1483426103000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1483426103000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1483426103000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1483426103000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1483426103000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"819774a2979d0d94eb4e3ebf62afc96f803bac67","modified":1483426103000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1483426103000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1483426103000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"12abb65289eed5391d657b963a20f96a473b1cbd","modified":1483426103000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"40c055e8360973a75db7c13f3280a4f465f9e5e3","modified":1483426103000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0ce6345a86c44e3fea5a4aa439614541112538f3","modified":1483426103000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1483426103000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1483426103000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a14f37a57ce7a720a36196f6469d8be955284f8c","modified":1483426103000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1483426103000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1483426103000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"e66347a30ca9ec41997843cba6181207baeff217","modified":1483426103000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1483426103000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"61917c928d09783a3bc8a91503a59ab3a8696e90","modified":1483426103000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1483426103000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1483426103000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1483426103000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"17be4f27eb8951835c29dafd0f6ba1b18e47cc6b","modified":1483426103000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1483426103000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1483426103000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1483426103000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1483426103000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1483426103000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1483426103000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"106b069ef3078762f4e59af4a381dbf655ae06d0","modified":1483426103000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1483426103000},{"_id":"themes/yilia/.git/objects/17/bb32f8c610822f3226e6da7ce79f1e71d8419d","hash":"dcd97b87fea9ace2ca38b9bc0579f4b220ed8430","modified":1488762421000},{"_id":"themes/yilia/.git/objects/d5/6a77911b27b3d011ffc0913e8ec1de04189333","hash":"2928dbb904d09247cc95173ece3afd94025e2473","modified":1488762431000},{"_id":"themes/yilia/.git/objects/2a/96ef4d90726c7a02e86809335a092ea0dbf163","hash":"e3bcef4659b1966a4f6237c1fae726182090e67d","modified":1488762431000},{"_id":"themes/yilia/.git/objects/af/613fdf12ae284f9f50f209efb3b8f287032036","hash":"de7538011d29a20e464e6ee4862673054802cd03","modified":1488762421000},{"_id":"themes/yilia/.git/objects/de/3b44beda017493cc1e15afc35f658c6298033a","hash":"dc96c653662e532c71bbd9792630f5aea9e9caec","modified":1488762431000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4b16c3bc6f5846274408d630b45d437ba98f24ca","modified":1488762431000},{"_id":"themes/yilia/.git/objects/pack/pack-56543cc4238328a926957f4b646e563c2cb6c85e.idx","hash":"8740b36b2195a4848666b024642e6ebaeb6c5bde","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"5ca1f97238235da9074f7ffe88fb68e7e81f8fd4","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"45ce16a1cdc0e31eacdcaa3cd07dc9f9cca59bde","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1483426103000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1483426103000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1483426103000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1483426103000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1483426103000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1483426103000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1483426103000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1483426103000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1483426103000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1483426103000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1483426103000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1483426103000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1483426103000},{"_id":"source/_posts/函数式编程/1.png","hash":"f8d9029e94c4e9522940df5f57fcf29c278862fb","modified":1536171449000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1483426103000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"51f0fa3221798188bb7acd842cb9b10f04ac2bff","modified":1488762431000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1483426103000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"4fbf78fde45be466ae34b5579901ba7962488dd6","modified":1483426103000},{"_id":"themes/yilia/.git/objects/pack/pack-56543cc4238328a926957f4b646e563c2cb6c85e.pack","hash":"33fea6b9a8c69d74385d80e3129ddae6b1114de4","modified":1488762431000}],"Category":[],"Data":[],"Page":[{"title":"随笔","date":"2017-01-03T06:18:50.000Z","_content":"\na\n14:18:50\n2017-01-03","source":"archive/index.md","raw":"---\ntitle: 随笔\ndate: 2017-01-03 14:18:50\n---\n\na\n14:18:50\n2017-01-03","updated":"2018-09-05T18:17:29.000Z","path":"archive/index.html","comments":1,"layout":"page","_id":"cks4nsi7t0001b6e85g0f3rbh","content":"<p>a<br>14:18:50<br>2017-01-03</p>\n","site":{"data":{}},"excerpt":"","more":"<p>a<br>14:18:50<br>2017-01-03</p>\n"}],"Post":[{"title":"ttest","_content":"\n\n\n## 测试文章","source":"_drafts/ttest.md","raw":"---\ntitle: ttest\ntags:\n---\n\n\n\n## 测试文章","slug":"ttest","published":0,"date":"2017-01-05T03:33:23.000Z","updated":"2017-01-05T03:33:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks4nsi7o0000b6e8tv54pw7s","content":"<h2 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"测试文章\"><a href=\"#测试文章\" class=\"headerlink\" title=\"测试文章\"></a>测试文章</h2>"},{"title":"HTTP Cache-Control","comments":1,"date":"2018-08-09T07:49:49.000Z","_content":"\nCache-Control指定了请求和响应遵循的缓存机制。好的缓存机制可以减少对网络带宽的占用，可以提高访问速度，提高用户的体验，还可以减轻服务器的负担。\n\nhttps://www.cnblogs.com/chinajava/p/5705169.html\n\n#### no-cache和no-store的区别\n网上有好多关于no-cache和no-store的区别，但是长篇大论，感觉也没有怎么讲清楚。\n\n最近看了《图解HTTP》这本书，书上讲到了这两者的区别：\n\nno-cache从字面意义上很容易误解为不缓存，但是no-cache代表不缓存过期的资源，缓存会向服务器进行有效处理确认之后处理资源，更确切的说，no-cache应该是\n\n```nginx\ndo-not-serve-from-cache-without-revalidation\n```\n\n而no-store才是真正的不进行缓存。\n\n使用no-cache的目的就是为了防止从缓存中获取过期的资源。\n\n\n\n<!-- more -->\n\nCache-Control主要有以下几种类型：\n\n(1) 请求Request：\n\n[1] no-cache  ---- 不要读取缓存中的文件，要求向WEB服务器重新请求\n\n[2] no-store    ---- 请求和响应都禁止被缓存\n[2] max-age： ---- 表示当访问此网页后的max-age秒内再次访问不会去服务器请求，其功能与Expires类似，只是Expires是根据某个特定日期值做比较。一但缓存者自身的时间不准确.则结果可能就是错误的，而max-age,显然无此问题.。Max-age的优先级也是高于Expires的。\n[3] max-stale  ---- 允许读取过期时间必须小于max-stale 值的缓存对象。 \n[4] min-fresh ---- 接受其max-age生命期大于其当前时间 跟 min-fresh 值之和的缓存对象\n\n[5] only-if-cached ---- 告知缓存者,我希望内容来自缓存，我并不关心被缓存响应,是否是新鲜的.\n\n[6] no-transform   ---- 告知代理,不要更改媒体类型,比如jpg,被你改成png.\n\n\n\n(2) 响应Response：\n\n[1] public    ---- 数据内容皆被储存起来，就连有密码保护的网页也储存，安全性很低\n[2] private    ---- 数据内容只能被储存到私有的cache，仅对某个用户有效，不能共享\n[3] no-cache    ---- 可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端\n\n[4] no-store  ---- 请求和响应都禁止被缓存\n\n[4] max-age：   ----- 本响应包含的对象的过期时间\n[5] Must-revalidate    ---- 如果缓存过期了，会再次和原来的服务器确定是否为最新数据，而不是和中间的proxy\n\n[6] max-stale  ----  允许读取过期时间必须小于max-stale 值的缓存对象。 \n\n[7] proxy-revalidate  ---- 与Must-revalidate类似，区别在于：proxy-revalidate要排除掉用户代理的缓存的。即其规则并不应用于用户代理的本地缓存上。\n\n[8] s-maxage  ---- 与max-age的唯一区别是,s-maxage仅仅应用于共享缓存.而不应用于用户代理的本地缓存等针对单用户的缓存. 另外,s-maxage的优先级要高于max-age.\n\n[9] no-transform   ---- 告知代理,不要更改媒体类型,比如jpg,被你改成png.","source":"_posts/HTTP-Cache-Control.md","raw":"---\ntitle: HTTP Cache-Control\ncomments: true\ndate: 2018-08-09 15:49:49\ntags:\n---\n\nCache-Control指定了请求和响应遵循的缓存机制。好的缓存机制可以减少对网络带宽的占用，可以提高访问速度，提高用户的体验，还可以减轻服务器的负担。\n\nhttps://www.cnblogs.com/chinajava/p/5705169.html\n\n#### no-cache和no-store的区别\n网上有好多关于no-cache和no-store的区别，但是长篇大论，感觉也没有怎么讲清楚。\n\n最近看了《图解HTTP》这本书，书上讲到了这两者的区别：\n\nno-cache从字面意义上很容易误解为不缓存，但是no-cache代表不缓存过期的资源，缓存会向服务器进行有效处理确认之后处理资源，更确切的说，no-cache应该是\n\n```nginx\ndo-not-serve-from-cache-without-revalidation\n```\n\n而no-store才是真正的不进行缓存。\n\n使用no-cache的目的就是为了防止从缓存中获取过期的资源。\n\n\n\n<!-- more -->\n\nCache-Control主要有以下几种类型：\n\n(1) 请求Request：\n\n[1] no-cache  ---- 不要读取缓存中的文件，要求向WEB服务器重新请求\n\n[2] no-store    ---- 请求和响应都禁止被缓存\n[2] max-age： ---- 表示当访问此网页后的max-age秒内再次访问不会去服务器请求，其功能与Expires类似，只是Expires是根据某个特定日期值做比较。一但缓存者自身的时间不准确.则结果可能就是错误的，而max-age,显然无此问题.。Max-age的优先级也是高于Expires的。\n[3] max-stale  ---- 允许读取过期时间必须小于max-stale 值的缓存对象。 \n[4] min-fresh ---- 接受其max-age生命期大于其当前时间 跟 min-fresh 值之和的缓存对象\n\n[5] only-if-cached ---- 告知缓存者,我希望内容来自缓存，我并不关心被缓存响应,是否是新鲜的.\n\n[6] no-transform   ---- 告知代理,不要更改媒体类型,比如jpg,被你改成png.\n\n\n\n(2) 响应Response：\n\n[1] public    ---- 数据内容皆被储存起来，就连有密码保护的网页也储存，安全性很低\n[2] private    ---- 数据内容只能被储存到私有的cache，仅对某个用户有效，不能共享\n[3] no-cache    ---- 可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端\n\n[4] no-store  ---- 请求和响应都禁止被缓存\n\n[4] max-age：   ----- 本响应包含的对象的过期时间\n[5] Must-revalidate    ---- 如果缓存过期了，会再次和原来的服务器确定是否为最新数据，而不是和中间的proxy\n\n[6] max-stale  ----  允许读取过期时间必须小于max-stale 值的缓存对象。 \n\n[7] proxy-revalidate  ---- 与Must-revalidate类似，区别在于：proxy-revalidate要排除掉用户代理的缓存的。即其规则并不应用于用户代理的本地缓存上。\n\n[8] s-maxage  ---- 与max-age的唯一区别是,s-maxage仅仅应用于共享缓存.而不应用于用户代理的本地缓存等针对单用户的缓存. 另外,s-maxage的优先级要高于max-age.\n\n[9] no-transform   ---- 告知代理,不要更改媒体类型,比如jpg,被你改成png.","slug":"HTTP-Cache-Control","published":1,"updated":"2018-09-05T18:17:29.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi7t0002b6e83nubteq3","content":"<p>Cache-Control指定了请求和响应遵循的缓存机制。好的缓存机制可以减少对网络带宽的占用，可以提高访问速度，提高用户的体验，还可以减轻服务器的负担。</p>\n<p><a href=\"https://www.cnblogs.com/chinajava/p/5705169.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chinajava/p/5705169.html</a></p>\n<h4 id=\"no-cache和no-store的区别\"><a href=\"#no-cache和no-store的区别\" class=\"headerlink\" title=\"no-cache和no-store的区别\"></a>no-cache和no-store的区别</h4><p>网上有好多关于no-cache和no-store的区别，但是长篇大论，感觉也没有怎么讲清楚。</p>\n<p>最近看了《图解HTTP》这本书，书上讲到了这两者的区别：</p>\n<p>no-cache从字面意义上很容易误解为不缓存，但是no-cache代表不缓存过期的资源，缓存会向服务器进行有效处理确认之后处理资源，更确切的说，no-cache应该是</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do-not-serve-from-cache-without-revalidation</span><br></pre></td></tr></table></figure>\n<p>而no-store才是真正的不进行缓存。</p>\n<p>使用no-cache的目的就是为了防止从缓存中获取过期的资源。</p>\n<a id=\"more\"></a>\n<p>Cache-Control主要有以下几种类型：</p>\n<p>(1) 请求Request：</p>\n<p>[1] no-cache  —- 不要读取缓存中的文件，要求向WEB服务器重新请求</p>\n<p>[2] no-store    —- 请求和响应都禁止被缓存<br>[2] max-age： —- 表示当访问此网页后的max-age秒内再次访问不会去服务器请求，其功能与Expires类似，只是Expires是根据某个特定日期值做比较。一但缓存者自身的时间不准确.则结果可能就是错误的，而max-age,显然无此问题.。Max-age的优先级也是高于Expires的。<br>[3] max-stale  —- 允许读取过期时间必须小于max-stale 值的缓存对象。<br>[4] min-fresh —- 接受其max-age生命期大于其当前时间 跟 min-fresh 值之和的缓存对象</p>\n<p>[5] only-if-cached —- 告知缓存者,我希望内容来自缓存，我并不关心被缓存响应,是否是新鲜的.</p>\n<p>[6] no-transform   —- 告知代理,不要更改媒体类型,比如jpg,被你改成png.</p>\n<p>(2) 响应Response：</p>\n<p>[1] public    —- 数据内容皆被储存起来，就连有密码保护的网页也储存，安全性很低<br>[2] private    —- 数据内容只能被储存到私有的cache，仅对某个用户有效，不能共享<br>[3] no-cache    —- 可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端</p>\n<p>[4] no-store  —- 请求和响应都禁止被缓存</p>\n<p>[4] max-age：   —– 本响应包含的对象的过期时间<br>[5] Must-revalidate    —- 如果缓存过期了，会再次和原来的服务器确定是否为最新数据，而不是和中间的proxy</p>\n<p>[6] max-stale  —-  允许读取过期时间必须小于max-stale 值的缓存对象。 </p>\n<p>[7] proxy-revalidate  —- 与Must-revalidate类似，区别在于：proxy-revalidate要排除掉用户代理的缓存的。即其规则并不应用于用户代理的本地缓存上。</p>\n<p>[8] s-maxage  —- 与max-age的唯一区别是,s-maxage仅仅应用于共享缓存.而不应用于用户代理的本地缓存等针对单用户的缓存. 另外,s-maxage的优先级要高于max-age.</p>\n<p>[9] no-transform   —- 告知代理,不要更改媒体类型,比如jpg,被你改成png.</p>\n","site":{"data":{}},"excerpt":"<p>Cache-Control指定了请求和响应遵循的缓存机制。好的缓存机制可以减少对网络带宽的占用，可以提高访问速度，提高用户的体验，还可以减轻服务器的负担。</p>\n<p><a href=\"https://www.cnblogs.com/chinajava/p/5705169.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chinajava/p/5705169.html</a></p>\n<h4 id=\"no-cache和no-store的区别\"><a href=\"#no-cache和no-store的区别\" class=\"headerlink\" title=\"no-cache和no-store的区别\"></a>no-cache和no-store的区别</h4><p>网上有好多关于no-cache和no-store的区别，但是长篇大论，感觉也没有怎么讲清楚。</p>\n<p>最近看了《图解HTTP》这本书，书上讲到了这两者的区别：</p>\n<p>no-cache从字面意义上很容易误解为不缓存，但是no-cache代表不缓存过期的资源，缓存会向服务器进行有效处理确认之后处理资源，更确切的说，no-cache应该是</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do-not-serve-from-cache-without-revalidation</span><br></pre></td></tr></table></figure>\n<p>而no-store才是真正的不进行缓存。</p>\n<p>使用no-cache的目的就是为了防止从缓存中获取过期的资源。</p>","more":"<p>Cache-Control主要有以下几种类型：</p>\n<p>(1) 请求Request：</p>\n<p>[1] no-cache  —- 不要读取缓存中的文件，要求向WEB服务器重新请求</p>\n<p>[2] no-store    —- 请求和响应都禁止被缓存<br>[2] max-age： —- 表示当访问此网页后的max-age秒内再次访问不会去服务器请求，其功能与Expires类似，只是Expires是根据某个特定日期值做比较。一但缓存者自身的时间不准确.则结果可能就是错误的，而max-age,显然无此问题.。Max-age的优先级也是高于Expires的。<br>[3] max-stale  —- 允许读取过期时间必须小于max-stale 值的缓存对象。<br>[4] min-fresh —- 接受其max-age生命期大于其当前时间 跟 min-fresh 值之和的缓存对象</p>\n<p>[5] only-if-cached —- 告知缓存者,我希望内容来自缓存，我并不关心被缓存响应,是否是新鲜的.</p>\n<p>[6] no-transform   —- 告知代理,不要更改媒体类型,比如jpg,被你改成png.</p>\n<p>(2) 响应Response：</p>\n<p>[1] public    —- 数据内容皆被储存起来，就连有密码保护的网页也储存，安全性很低<br>[2] private    —- 数据内容只能被储存到私有的cache，仅对某个用户有效，不能共享<br>[3] no-cache    —- 可以缓存，但是只有在跟WEB服务器验证了其有效后，才能返回给客户端</p>\n<p>[4] no-store  —- 请求和响应都禁止被缓存</p>\n<p>[4] max-age：   —– 本响应包含的对象的过期时间<br>[5] Must-revalidate    —- 如果缓存过期了，会再次和原来的服务器确定是否为最新数据，而不是和中间的proxy</p>\n<p>[6] max-stale  —-  允许读取过期时间必须小于max-stale 值的缓存对象。 </p>\n<p>[7] proxy-revalidate  —- 与Must-revalidate类似，区别在于：proxy-revalidate要排除掉用户代理的缓存的。即其规则并不应用于用户代理的本地缓存上。</p>\n<p>[8] s-maxage  —- 与max-age的唯一区别是,s-maxage仅仅应用于共享缓存.而不应用于用户代理的本地缓存等针对单用户的缓存. 另外,s-maxage的优先级要高于max-age.</p>\n<p>[9] no-transform   —- 告知代理,不要更改媒体类型,比如jpg,被你改成png.</p>"},{"title":"ASCII、Unicode和UTF-8编码的区别","comments":1,"date":"2018-08-17T08:07:31.000Z","_content":"\n\n\n\n\n\n| 编码      | 大小                               | 支持语言 |\n| :------ | :------------------------------- | :--- |\n| ASCII   | 1个字节                             | 英文   |\n| Unicode | 2个字节（生僻字4个）                      | 所有语言 |\n| UTF-8   | 1-6个字节，英文字母1个字节，汉字3个字节，生僻字4-6个字节 | 所有语言 |\n\n\n\n#### **具体解释**：\n\n最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。\n\n但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。\n\n你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。\n\n因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。\n\nUnicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。\n\n新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。\n\n所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。\n\nUTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。","source":"_posts/ASCII、Unicode和UTF-8编码的区别.md","raw":"---\ntitle: ASCII、Unicode和UTF-8编码的区别\ncomments: true\ndate: 2018-08-17 16:07:31\ntags:\n---\n\n\n\n\n\n\n| 编码      | 大小                               | 支持语言 |\n| :------ | :------------------------------- | :--- |\n| ASCII   | 1个字节                             | 英文   |\n| Unicode | 2个字节（生僻字4个）                      | 所有语言 |\n| UTF-8   | 1-6个字节，英文字母1个字节，汉字3个字节，生僻字4-6个字节 | 所有语言 |\n\n\n\n#### **具体解释**：\n\n最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。\n\n但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。\n\n你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。\n\n因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。\n\nUnicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。\n\n新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。\n\n所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。\n\nUTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。","slug":"ASCII、Unicode和UTF-8编码的区别","published":1,"updated":"2018-09-05T18:17:29.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi7v0003b6e8i3i55myy","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">编码</th>\n<th style=\"text-align:left\">大小</th>\n<th style=\"text-align:left\">支持语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ASCII</td>\n<td style=\"text-align:left\">1个字节</td>\n<td style=\"text-align:left\">英文</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Unicode</td>\n<td style=\"text-align:left\">2个字节（生僻字4个）</td>\n<td style=\"text-align:left\">所有语言</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UTF-8</td>\n<td style=\"text-align:left\">1-6个字节，英文字母1个字节，汉字3个字节，生僻字4-6个字节</td>\n<td style=\"text-align:left\">所有语言</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"具体解释：\"><a href=\"#具体解释：\" class=\"headerlink\" title=\"具体解释：\"></a><strong>具体解释</strong>：</h4><p>最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。</p>\n<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。</p>\n<p>你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p>\n<p>因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p>\n<p>Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>\n<p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>\n<p>所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。</p>\n<p>UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">编码</th>\n<th style=\"text-align:left\">大小</th>\n<th style=\"text-align:left\">支持语言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ASCII</td>\n<td style=\"text-align:left\">1个字节</td>\n<td style=\"text-align:left\">英文</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Unicode</td>\n<td style=\"text-align:left\">2个字节（生僻字4个）</td>\n<td style=\"text-align:left\">所有语言</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UTF-8</td>\n<td style=\"text-align:left\">1-6个字节，英文字母1个字节，汉字3个字节，生僻字4-6个字节</td>\n<td style=\"text-align:left\">所有语言</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"具体解释：\"><a href=\"#具体解释：\" class=\"headerlink\" title=\"具体解释：\"></a><strong>具体解释</strong>：</h4><p>最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122。</p>\n<p>但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。</p>\n<p>你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。</p>\n<p>因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。</p>\n<p>Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。</p>\n<p>新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。</p>\n<p>所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。</p>\n<p>UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。</p>\n"},{"title":"Sublime 入门","comments":1,"date":"2018-07-18T13:20:52.000Z","_content":"\nTheme:  https://github.com/equinusocio/material-theme\n-- CMD+,\n    \"color_scheme\": \"Packages/Material Theme/schemes/Material-Theme.tmTheme\",\n    \"theme\": \"Material-Theme.sublime-theme\",\n--","source":"_posts/Sublime-入门.md","raw":"---\ntitle: Sublime 入门\ncomments: true\ndate: 2018-07-18 21:20:52\ntags:\n---\n\nTheme:  https://github.com/equinusocio/material-theme\n-- CMD+,\n    \"color_scheme\": \"Packages/Material Theme/schemes/Material-Theme.tmTheme\",\n    \"theme\": \"Material-Theme.sublime-theme\",\n--","slug":"Sublime-入门","published":1,"updated":"2018-09-05T18:17:29.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi7w0004b6e8k1s8tred","content":"<p>Theme:  <a href=\"https://github.com/equinusocio/material-theme\" target=\"_blank\" rel=\"noopener\">https://github.com/equinusocio/material-theme</a><br>– CMD+,<br>    “color_scheme”: “Packages/Material Theme/schemes/Material-Theme.tmTheme”,</p>\n<pre><code>&quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;,\n</code></pre><p>–</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Theme:  <a href=\"https://github.com/equinusocio/material-theme\" target=\"_blank\" rel=\"noopener\">https://github.com/equinusocio/material-theme</a><br>– CMD+,<br>    “color_scheme”: “Packages/Material Theme/schemes/Material-Theme.tmTheme”,</p>\n<pre><code>&quot;theme&quot;: &quot;Material-Theme.sublime-theme&quot;,\n</code></pre><p>–</p>\n"},{"title":"Object构造函数的方法","comments":1,"date":"2018-10-27T09:19:36.000Z","_content":"\n\n- ## [`Object`构造函数的方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object#Methods)\n\n  - [`Object.assign()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\n    通过复制一个或多个对象来创建一个新的对象。\n\n  - [`Object.create()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n\n    使用指定的原型对象和属性创建一个新对象。\n\n  - [`Object.defineProperty()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n    给对象添加一个属性并指定该属性的配置。\n\n  - [`Object.defineProperties()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\n\n    给对象添加多个属性并分别指定它们的配置。\n<!-- more -->\n  - [`Object.entries()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries)\n\n    返回给定对象自身可枚举属性的`[key, value]`数组。\n\n  - [`Object.freeze()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n\n    冻结对象：其他代码不能删除或更改任何属性。\n\n  - [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor)\n\n    返回对象指定的属性配置。\n\n  - [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames)\n\n    返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。\n\n  - [`Object.getOwnPropertySymbols()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols)\n\n    返回一个数组，它包含了指定对象自身所有的符号属性。\n\n  - [`Object.getPrototypeOf()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf)\n\n    返回指定对象的原型对象。\n\n  - [`Object.is()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n\n    比较两个值是否相同。所有 NaN 值都相等（这与==和===不同）。\n\n  - [`Object.isExtensible()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible)\n\n    判断对象是否可扩展。\n\n  - [`Object.isFrozen()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen)\n\n    判断对象是否已经冻结。\n\n  - [`Object.isSealed()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed)\n\n    判断对象是否已经密封。\n\n  - [`Object.keys()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)\n\n    返回一个包含所有给定对象**自身**可枚举属性名称的数组。\n\n  - [`Object.preventExtensions()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions)\n\n    防止对象的任何扩展。\n\n  - [`Object.seal()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n\n    防止其他代码删除对象的属性。\n\n  - [`Object.setPrototypeOf()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf)\n\n    设置对象的原型（即内部`[[Prototype]]`属性）。\n\n  - [`Object.values()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values)\n\n    返回给定对象自身可枚举值的数组。","source":"_posts/Object构造函数的方法.md","raw":"---\ntitle: Object构造函数的方法\ncomments: true\ndate: 2018-10-27 17:19:36\ntags: 面试\n---\n\n\n- ## [`Object`构造函数的方法](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object#Methods)\n\n  - [`Object.assign()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\n\n    通过复制一个或多个对象来创建一个新的对象。\n\n  - [`Object.create()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n\n    使用指定的原型对象和属性创建一个新对象。\n\n  - [`Object.defineProperty()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n    给对象添加一个属性并指定该属性的配置。\n\n  - [`Object.defineProperties()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties)\n\n    给对象添加多个属性并分别指定它们的配置。\n<!-- more -->\n  - [`Object.entries()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries)\n\n    返回给定对象自身可枚举属性的`[key, value]`数组。\n\n  - [`Object.freeze()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze)\n\n    冻结对象：其他代码不能删除或更改任何属性。\n\n  - [`Object.getOwnPropertyDescriptor()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor)\n\n    返回对象指定的属性配置。\n\n  - [`Object.getOwnPropertyNames()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames)\n\n    返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。\n\n  - [`Object.getOwnPropertySymbols()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols)\n\n    返回一个数组，它包含了指定对象自身所有的符号属性。\n\n  - [`Object.getPrototypeOf()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf)\n\n    返回指定对象的原型对象。\n\n  - [`Object.is()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n\n    比较两个值是否相同。所有 NaN 值都相等（这与==和===不同）。\n\n  - [`Object.isExtensible()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible)\n\n    判断对象是否可扩展。\n\n  - [`Object.isFrozen()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen)\n\n    判断对象是否已经冻结。\n\n  - [`Object.isSealed()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed)\n\n    判断对象是否已经密封。\n\n  - [`Object.keys()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys)\n\n    返回一个包含所有给定对象**自身**可枚举属性名称的数组。\n\n  - [`Object.preventExtensions()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions)\n\n    防止对象的任何扩展。\n\n  - [`Object.seal()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n\n    防止其他代码删除对象的属性。\n\n  - [`Object.setPrototypeOf()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf)\n\n    设置对象的原型（即内部`[[Prototype]]`属性）。\n\n  - [`Object.values()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values)\n\n    返回给定对象自身可枚举值的数组。","slug":"Object构造函数的方法","published":1,"updated":"2019-08-31T09:32:42.682Z","layout":"post","photos":[],"link":"","_id":"cks4nsi7x0005b6e8gwwrkl08","content":"<ul>\n<li><h2 id=\"Object构造函数的方法\"><a href=\"#Object构造函数的方法\" class=\"headerlink\" title=\"Object构造函数的方法\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object#Methods\" target=\"_blank\" rel=\"noopener\"><code>Object</code>构造函数的方法</a></h2><ul>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" target=\"_blank\" rel=\"noopener\"><code>Object.assign()</code></a></p>\n<p>通过复制一个或多个对象来创建一个新的对象。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\"><code>Object.create()</code></a></p>\n<p>使用指定的原型对象和属性创建一个新对象。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\"><code>Object.defineProperty()</code></a></p>\n<p>给对象添加一个属性并指定该属性的配置。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\" target=\"_blank\" rel=\"noopener\"><code>Object.defineProperties()</code></a></p>\n<p>给对象添加多个属性并分别指定它们的配置。</p>\n<a id=\"more\"></a></li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\" target=\"_blank\" rel=\"noopener\"><code>Object.entries()</code></a></p>\n<p>返回给定对象自身可枚举属性的<code>[key, value]</code>数组。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"noopener\"><code>Object.freeze()</code></a></p>\n<p>冻结对象：其他代码不能删除或更改任何属性。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" target=\"_blank\" rel=\"noopener\"><code>Object.getOwnPropertyDescriptor()</code></a></p>\n<p>返回对象指定的属性配置。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\" target=\"_blank\" rel=\"noopener\"><code>Object.getOwnPropertyNames()</code></a></p>\n<p>返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\" target=\"_blank\" rel=\"noopener\"><code>Object.getOwnPropertySymbols()</code></a></p>\n<p>返回一个数组，它包含了指定对象自身所有的符号属性。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\" target=\"_blank\" rel=\"noopener\"><code>Object.getPrototypeOf()</code></a></p>\n<p>返回指定对象的原型对象。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" target=\"_blank\" rel=\"noopener\"><code>Object.is()</code></a></p>\n<p>比较两个值是否相同。所有 NaN 值都相等（这与==和===不同）。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\" target=\"_blank\" rel=\"noopener\"><code>Object.isExtensible()</code></a></p>\n<p>判断对象是否可扩展。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\" target=\"_blank\" rel=\"noopener\"><code>Object.isFrozen()</code></a></p>\n<p>判断对象是否已经冻结。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\" target=\"_blank\" rel=\"noopener\"><code>Object.isSealed()</code></a></p>\n<p>判断对象是否已经密封。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" target=\"_blank\" rel=\"noopener\"><code>Object.keys()</code></a></p>\n<p>返回一个包含所有给定对象<strong>自身</strong>可枚举属性名称的数组。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\" target=\"_blank\" rel=\"noopener\"><code>Object.preventExtensions()</code></a></p>\n<p>防止对象的任何扩展。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" target=\"_blank\" rel=\"noopener\"><code>Object.seal()</code></a></p>\n<p>防止其他代码删除对象的属性。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\" target=\"_blank\" rel=\"noopener\"><code>Object.setPrototypeOf()</code></a></p>\n<p>设置对象的原型（即内部<code>[[Prototype]]</code>属性）。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values\" target=\"_blank\" rel=\"noopener\"><code>Object.values()</code></a></p>\n<p>返回给定对象自身可枚举值的数组。</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li><h2 id=\"Object构造函数的方法\"><a href=\"#Object构造函数的方法\" class=\"headerlink\" title=\"Object构造函数的方法\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object#Methods\" target=\"_blank\" rel=\"noopener\"><code>Object</code>构造函数的方法</a></h2><ul>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" target=\"_blank\" rel=\"noopener\"><code>Object.assign()</code></a></p>\n<p>通过复制一个或多个对象来创建一个新的对象。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\" rel=\"noopener\"><code>Object.create()</code></a></p>\n<p>使用指定的原型对象和属性创建一个新对象。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"noopener\"><code>Object.defineProperty()</code></a></p>\n<p>给对象添加一个属性并指定该属性的配置。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\" target=\"_blank\" rel=\"noopener\"><code>Object.defineProperties()</code></a></p>\n<p>给对象添加多个属性并分别指定它们的配置。</p></li></ul></li></ul>","more":"\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\" target=\"_blank\" rel=\"noopener\"><code>Object.entries()</code></a></p>\n<p>返回给定对象自身可枚举属性的<code>[key, value]</code>数组。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"noopener\"><code>Object.freeze()</code></a></p>\n<p>冻结对象：其他代码不能删除或更改任何属性。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" target=\"_blank\" rel=\"noopener\"><code>Object.getOwnPropertyDescriptor()</code></a></p>\n<p>返回对象指定的属性配置。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\" target=\"_blank\" rel=\"noopener\"><code>Object.getOwnPropertyNames()</code></a></p>\n<p>返回一个数组，它包含了指定对象所有的可枚举或不可枚举的属性名。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols\" target=\"_blank\" rel=\"noopener\"><code>Object.getOwnPropertySymbols()</code></a></p>\n<p>返回一个数组，它包含了指定对象自身所有的符号属性。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\" target=\"_blank\" rel=\"noopener\"><code>Object.getPrototypeOf()</code></a></p>\n<p>返回指定对象的原型对象。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" target=\"_blank\" rel=\"noopener\"><code>Object.is()</code></a></p>\n<p>比较两个值是否相同。所有 NaN 值都相等（这与==和===不同）。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\" target=\"_blank\" rel=\"noopener\"><code>Object.isExtensible()</code></a></p>\n<p>判断对象是否可扩展。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\" target=\"_blank\" rel=\"noopener\"><code>Object.isFrozen()</code></a></p>\n<p>判断对象是否已经冻结。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\" target=\"_blank\" rel=\"noopener\"><code>Object.isSealed()</code></a></p>\n<p>判断对象是否已经密封。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" target=\"_blank\" rel=\"noopener\"><code>Object.keys()</code></a></p>\n<p>返回一个包含所有给定对象<strong>自身</strong>可枚举属性名称的数组。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\" target=\"_blank\" rel=\"noopener\"><code>Object.preventExtensions()</code></a></p>\n<p>防止对象的任何扩展。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal\" target=\"_blank\" rel=\"noopener\"><code>Object.seal()</code></a></p>\n<p>防止其他代码删除对象的属性。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\" target=\"_blank\" rel=\"noopener\"><code>Object.setPrototypeOf()</code></a></p>\n<p>设置对象的原型（即内部<code>[[Prototype]]</code>属性）。</p>\n</li>\n<li><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values\" target=\"_blank\" rel=\"noopener\"><code>Object.values()</code></a></p>\n<p>返回给定对象自身可枚举值的数组。</p>\n</li>\n\n\n"},{"title":"cookie","comments":1,"date":"2017-04-15T02:55:13.000Z","_content":"\n\n## setCookie方法在localhost域名下不能存，在127.0.0.1下确可以存取\n\n```\nsomething that wasn't made clear to me here and totally confused me for a while was that domain\n\nnames must contain at least two dots (.),\n\nhence 'localhost' is invalid and the browser will refuse to set the cookie!\n\ninstead for localhost you should use false.\n\nto make your code work on both localhost and a proper domain, you can do this:\n```\n\n## 解决方案一： localhost指向127.0.0.1\n\n## 解决方案二： 改hosts\n\n## 三：php解决方案（网上搜的，看不明白php还。。。。）\n```\n<?php  \n$domain = ($_SERVER['HTTP_HOST'] != 'localhost') ? $_SERVER['HTTP_HOST'] : false;  \nsetcookie('cookiename', 'data', time()+60*60*24*365, '/', $domain, false);  \n?> \n```","source":"_posts/cookie.md","raw":"---\ntitle: cookie\ncomments: true\ndate: 2017-04-15 10:55:13\ntags:\n---\n\n\n## setCookie方法在localhost域名下不能存，在127.0.0.1下确可以存取\n\n```\nsomething that wasn't made clear to me here and totally confused me for a while was that domain\n\nnames must contain at least two dots (.),\n\nhence 'localhost' is invalid and the browser will refuse to set the cookie!\n\ninstead for localhost you should use false.\n\nto make your code work on both localhost and a proper domain, you can do this:\n```\n\n## 解决方案一： localhost指向127.0.0.1\n\n## 解决方案二： 改hosts\n\n## 三：php解决方案（网上搜的，看不明白php还。。。。）\n```\n<?php  \n$domain = ($_SERVER['HTTP_HOST'] != 'localhost') ? $_SERVER['HTTP_HOST'] : false;  \nsetcookie('cookiename', 'data', time()+60*60*24*365, '/', $domain, false);  \n?> \n```","slug":"cookie","published":1,"updated":"2017-04-15T03:19:51.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi7y0006b6e8h9posp6i","content":"<h2 id=\"setCookie方法在localhost域名下不能存，在127-0-0-1下确可以存取\"><a href=\"#setCookie方法在localhost域名下不能存，在127-0-0-1下确可以存取\" class=\"headerlink\" title=\"setCookie方法在localhost域名下不能存，在127.0.0.1下确可以存取\"></a>setCookie方法在localhost域名下不能存，在127.0.0.1下确可以存取</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">something that wasn&apos;t made clear to me here and totally confused me for a while was that domain</span><br><span class=\"line\"></span><br><span class=\"line\">names must contain at least two dots (.),</span><br><span class=\"line\"></span><br><span class=\"line\">hence &apos;localhost&apos; is invalid and the browser will refuse to set the cookie!</span><br><span class=\"line\"></span><br><span class=\"line\">instead for localhost you should use false.</span><br><span class=\"line\"></span><br><span class=\"line\">to make your code work on both localhost and a proper domain, you can do this:</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方案一：-localhost指向127-0-0-1\"><a href=\"#解决方案一：-localhost指向127-0-0-1\" class=\"headerlink\" title=\"解决方案一： localhost指向127.0.0.1\"></a>解决方案一： localhost指向127.0.0.1</h2><h2 id=\"解决方案二：-改hosts\"><a href=\"#解决方案二：-改hosts\" class=\"headerlink\" title=\"解决方案二： 改hosts\"></a>解决方案二： 改hosts</h2><h2 id=\"三：php解决方案（网上搜的，看不明白php还。。。。）\"><a href=\"#三：php解决方案（网上搜的，看不明白php还。。。。）\" class=\"headerlink\" title=\"三：php解决方案（网上搜的，看不明白php还。。。。）\"></a>三：php解决方案（网上搜的，看不明白php还。。。。）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$domain = ($_SERVER[&apos;HTTP_HOST&apos;] != &apos;localhost&apos;) ? $_SERVER[&apos;HTTP_HOST&apos;] : false;  </span><br><span class=\"line\">setcookie(&apos;cookiename&apos;, &apos;data&apos;, time()+60*60*24*365, &apos;/&apos;, $domain, false);  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"setCookie方法在localhost域名下不能存，在127-0-0-1下确可以存取\"><a href=\"#setCookie方法在localhost域名下不能存，在127-0-0-1下确可以存取\" class=\"headerlink\" title=\"setCookie方法在localhost域名下不能存，在127.0.0.1下确可以存取\"></a>setCookie方法在localhost域名下不能存，在127.0.0.1下确可以存取</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">something that wasn&apos;t made clear to me here and totally confused me for a while was that domain</span><br><span class=\"line\"></span><br><span class=\"line\">names must contain at least two dots (.),</span><br><span class=\"line\"></span><br><span class=\"line\">hence &apos;localhost&apos; is invalid and the browser will refuse to set the cookie!</span><br><span class=\"line\"></span><br><span class=\"line\">instead for localhost you should use false.</span><br><span class=\"line\"></span><br><span class=\"line\">to make your code work on both localhost and a proper domain, you can do this:</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方案一：-localhost指向127-0-0-1\"><a href=\"#解决方案一：-localhost指向127-0-0-1\" class=\"headerlink\" title=\"解决方案一： localhost指向127.0.0.1\"></a>解决方案一： localhost指向127.0.0.1</h2><h2 id=\"解决方案二：-改hosts\"><a href=\"#解决方案二：-改hosts\" class=\"headerlink\" title=\"解决方案二： 改hosts\"></a>解决方案二： 改hosts</h2><h2 id=\"三：php解决方案（网上搜的，看不明白php还。。。。）\"><a href=\"#三：php解决方案（网上搜的，看不明白php还。。。。）\" class=\"headerlink\" title=\"三：php解决方案（网上搜的，看不明白php还。。。。）\"></a>三：php解决方案（网上搜的，看不明白php还。。。。）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php  </span><br><span class=\"line\">$domain = ($_SERVER[&apos;HTTP_HOST&apos;] != &apos;localhost&apos;) ? $_SERVER[&apos;HTTP_HOST&apos;] : false;  </span><br><span class=\"line\">setcookie(&apos;cookiename&apos;, &apos;data&apos;, time()+60*60*24*365, &apos;/&apos;, $domain, false);  </span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ability","comments":1,"date":"2018-08-31T09:19:36.000Z","_content":"\n### 知识点梳理\n\n[Object对象](https://jianfei1991.github.io/2018/10/27/Object构造函数的方法/)、原型链、es6、webpack、手写promise、\n[简单算法](https://leetcode-cn.com/problemset/algorithms/)\njs基础\ncss基础\n项目架构设计\n优化方案","source":"_posts/ability.md","raw":"---\ntitle: ability\ncomments: true\ndate: 2018-08-31 17:19:36\ntags: 面试\n---\n\n### 知识点梳理\n\n[Object对象](https://jianfei1991.github.io/2018/10/27/Object构造函数的方法/)、原型链、es6、webpack、手写promise、\n[简单算法](https://leetcode-cn.com/problemset/algorithms/)\njs基础\ncss基础\n项目架构设计\n优化方案","slug":"ability","published":1,"updated":"2019-08-31T09:31:02.362Z","layout":"post","photos":[],"link":"","_id":"cks4nsi810008b6e82geug0b7","content":"<h3 id=\"知识点梳理\"><a href=\"#知识点梳理\" class=\"headerlink\" title=\"知识点梳理\"></a>知识点梳理</h3><p><a href=\"https://jianfei1991.github.io/2018/10/27/Object构造函数的方法/\" target=\"_blank\" rel=\"noopener\">Object对象</a>、原型链、es6、webpack、手写promise、<br><a href=\"https://leetcode-cn.com/problemset/algorithms/\" target=\"_blank\" rel=\"noopener\">简单算法</a><br>js基础<br>css基础<br>项目架构设计<br>优化方案</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"知识点梳理\"><a href=\"#知识点梳理\" class=\"headerlink\" title=\"知识点梳理\"></a>知识点梳理</h3><p><a href=\"https://jianfei1991.github.io/2018/10/27/Object构造函数的方法/\" target=\"_blank\" rel=\"noopener\">Object对象</a>、原型链、es6、webpack、手写promise、<br><a href=\"https://leetcode-cn.com/problemset/algorithms/\" target=\"_blank\" rel=\"noopener\">简单算法</a><br>js基础<br>css基础<br>项目架构设计<br>优化方案</p>\n"},{"title":"chrome skill","comments":1,"date":"2019-06-25T12:17:24.000Z","_content":"\n## copying && saving\n\n\t1. copy(location.href) ==> ctrl + v\n\t2. console出来的对象,通过右键==》Store as global variable 来保存为全局变量\n\n## 快捷键和通用技巧\n\n <!-- more -->\n|快捷键 | 用途\n :- | :-: | :-:\n | cmd + option + I | 打开控制台\n | cmd + option + U | 查看源码\n | cmd + shift + D  | 底部-右部切换控制台窗口\n | cmd + [ or ]     | 左右切换控制台面板\n | cmd + shift + M | 切换手机模拟模式和普通模式\ncss 数字值调试 | |\n | cmd + ⬆or⬇ | 100\n | shift + ⬆or⬇ | \t10\n | option + ⬆or⬇ | 0.1\ndebugger | |\n | cmd + \\ | resume/pause script execution <br>恢复/暂停脚本执行 \n | cmd + ' | step over next function call <br>跨过，实际表现是不遇到函数时，执行下一步。遇到函数时，不进入函数直接执行下一步。\n | cmd + ;\t| step into next function call <br>跨入，实际表现是不遇到函数时，执行下一步。遇到到函数时，进入函数执行上下文。\n | cmd + shift + ; | step out of current function <br> 跳出当前函数\n\n\n\n## 使用Command(命令)\n\n在控制台中使用 CMD + shift + P 调用命令面板\n\ncmd | 用途\n:-: | :-:\nshow timestamps | 控制台显示输出时间\ncapture full size screenshot | 截屏(包括滚动区域)\n\n## 代码块的使用\n\nSources面板 =》 Snippets中可以保存代码\n> **用途** 比如你需要经常在某一个项目中执行某一些代码,这些代码又不能放进仓库上线\n> **应用场景** 对一个有大量照片和身份证数据的后台,想去看美女照片,这种代码不可能发版,存到snippets中,打开后台,执行保存好的代码块………………………………………………\n> **代码块快捷查找** CMD + p => 输入“!”+snippet名称\n\n## console\n\n### console.assert\n> 当我们传入的第一个参数为 假 时，console.assert 打印跟在这个参数后面的值。\n```javascript\nvalue = null\nif(!value){\n\tconsole.log(\"value\"+'为空')\n}\n```\n```javascript\nvalue = null\nconsole.assert(value,\"value\"+'为空')\n```\n通过它，你可以摆脱令人讨厌的 if 表达式，还可以获得堆栈信息。\n> NodeJS 版本 ≤ 10.0 ， console.assert 可能会中断后面代码的执行，但是在 .10 的版本中被修复了(当然，在浏览器中不存在这个问题)\n\n### console.log\n\nlet a = 1, b = 2;\nconsole.log({a,b})\nconsole.table({a,b})\n打印dom使用 console.dir\nconsole.log('%c123',\"font-size:50px;color:red;\") //%c是关键\n\n\n### console中的\"$\"\n\n$0 dom选择\n$_ 对上次的结果进行饮用\n$i 控制台安装npm 包 \\_进行调用 （需要安装Console Importer插件）\n\n### console的\"bug\"\n\nlet obj = {a:1,b:2};\nconsole.log(obj)\nobj.a=2\nconsole.log(obj)\n\n> **原因** console 中打印出的对象，在你打印出他内容之前，是以引用的方式保存的。\n\n\n\n### 异步的console\n\n","source":"_posts/chrome-skill.md","raw":"---\ntitle: chrome skill\ncomments: true\ndate: 2019-06-25 20:17:24\ntags:\n---\n\n## copying && saving\n\n\t1. copy(location.href) ==> ctrl + v\n\t2. console出来的对象,通过右键==》Store as global variable 来保存为全局变量\n\n## 快捷键和通用技巧\n\n <!-- more -->\n|快捷键 | 用途\n :- | :-: | :-:\n | cmd + option + I | 打开控制台\n | cmd + option + U | 查看源码\n | cmd + shift + D  | 底部-右部切换控制台窗口\n | cmd + [ or ]     | 左右切换控制台面板\n | cmd + shift + M | 切换手机模拟模式和普通模式\ncss 数字值调试 | |\n | cmd + ⬆or⬇ | 100\n | shift + ⬆or⬇ | \t10\n | option + ⬆or⬇ | 0.1\ndebugger | |\n | cmd + \\ | resume/pause script execution <br>恢复/暂停脚本执行 \n | cmd + ' | step over next function call <br>跨过，实际表现是不遇到函数时，执行下一步。遇到函数时，不进入函数直接执行下一步。\n | cmd + ;\t| step into next function call <br>跨入，实际表现是不遇到函数时，执行下一步。遇到到函数时，进入函数执行上下文。\n | cmd + shift + ; | step out of current function <br> 跳出当前函数\n\n\n\n## 使用Command(命令)\n\n在控制台中使用 CMD + shift + P 调用命令面板\n\ncmd | 用途\n:-: | :-:\nshow timestamps | 控制台显示输出时间\ncapture full size screenshot | 截屏(包括滚动区域)\n\n## 代码块的使用\n\nSources面板 =》 Snippets中可以保存代码\n> **用途** 比如你需要经常在某一个项目中执行某一些代码,这些代码又不能放进仓库上线\n> **应用场景** 对一个有大量照片和身份证数据的后台,想去看美女照片,这种代码不可能发版,存到snippets中,打开后台,执行保存好的代码块………………………………………………\n> **代码块快捷查找** CMD + p => 输入“!”+snippet名称\n\n## console\n\n### console.assert\n> 当我们传入的第一个参数为 假 时，console.assert 打印跟在这个参数后面的值。\n```javascript\nvalue = null\nif(!value){\n\tconsole.log(\"value\"+'为空')\n}\n```\n```javascript\nvalue = null\nconsole.assert(value,\"value\"+'为空')\n```\n通过它，你可以摆脱令人讨厌的 if 表达式，还可以获得堆栈信息。\n> NodeJS 版本 ≤ 10.0 ， console.assert 可能会中断后面代码的执行，但是在 .10 的版本中被修复了(当然，在浏览器中不存在这个问题)\n\n### console.log\n\nlet a = 1, b = 2;\nconsole.log({a,b})\nconsole.table({a,b})\n打印dom使用 console.dir\nconsole.log('%c123',\"font-size:50px;color:red;\") //%c是关键\n\n\n### console中的\"$\"\n\n$0 dom选择\n$_ 对上次的结果进行饮用\n$i 控制台安装npm 包 \\_进行调用 （需要安装Console Importer插件）\n\n### console的\"bug\"\n\nlet obj = {a:1,b:2};\nconsole.log(obj)\nobj.a=2\nconsole.log(obj)\n\n> **原因** console 中打印出的对象，在你打印出他内容之前，是以引用的方式保存的。\n\n\n\n### 异步的console\n\n","slug":"chrome-skill","published":1,"updated":"2019-08-31T09:22:17.202Z","layout":"post","photos":[],"link":"","_id":"cks4nsi820009b6e8z36e7ds4","content":"<h2 id=\"copying-amp-amp-saving\"><a href=\"#copying-amp-amp-saving\" class=\"headerlink\" title=\"copying &amp;&amp; saving\"></a>copying &amp;&amp; saving</h2><pre><code>1. copy(location.href) ==&gt; ctrl + v\n2. console出来的对象,通过右键==》Store as global variable 来保存为全局变量\n</code></pre><h2 id=\"快捷键和通用技巧\"><a href=\"#快捷键和通用技巧\" class=\"headerlink\" title=\"快捷键和通用技巧\"></a>快捷键和通用技巧</h2> <a id=\"more\"></a>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:center\">快捷键</th>\n<th style=\"text-align:center\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + option + I</td>\n<td style=\"text-align:center\">打开控制台</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + option + U</td>\n<td style=\"text-align:center\">查看源码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + shift + D</td>\n<td style=\"text-align:center\">底部-右部切换控制台窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + [ or ]</td>\n<td style=\"text-align:center\">左右切换控制台面板</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + shift + M</td>\n<td style=\"text-align:center\">切换手机模拟模式和普通模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">css 数字值调试</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + ⬆or⬇</td>\n<td style=\"text-align:center\">100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">shift + ⬆or⬇</td>\n<td style=\"text-align:center\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">option + ⬆or⬇</td>\n<td style=\"text-align:center\">0.1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">debugger</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + \\</td>\n<td style=\"text-align:center\">resume/pause script execution <br>恢复/暂停脚本执行 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + ‘</td>\n<td style=\"text-align:center\">step over next function call <br>跨过，实际表现是不遇到函数时，执行下一步。遇到函数时，不进入函数直接执行下一步。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + ;</td>\n<td style=\"text-align:center\">step into next function call <br>跨入，实际表现是不遇到函数时，执行下一步。遇到到函数时，进入函数执行上下文。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + shift + ;</td>\n<td style=\"text-align:center\">step out of current function <br> 跳出当前函数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"使用Command-命令\"><a href=\"#使用Command-命令\" class=\"headerlink\" title=\"使用Command(命令)\"></a>使用Command(命令)</h2><p>在控制台中使用 CMD + shift + P 调用命令面板</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">cmd</th>\n<th style=\"text-align:center\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">show timestamps</td>\n<td style=\"text-align:center\">控制台显示输出时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">capture full size screenshot</td>\n<td style=\"text-align:center\">截屏(包括滚动区域)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"代码块的使用\"><a href=\"#代码块的使用\" class=\"headerlink\" title=\"代码块的使用\"></a>代码块的使用</h2><p>Sources面板 =》 Snippets中可以保存代码</p>\n<blockquote>\n<p><strong>用途</strong> 比如你需要经常在某一个项目中执行某一些代码,这些代码又不能放进仓库上线<br><strong>应用场景</strong> 对一个有大量照片和身份证数据的后台,想去看美女照片,这种代码不可能发版,存到snippets中,打开后台,执行保存好的代码块………………………………………………<br><strong>代码块快捷查找</strong> CMD + p =&gt; 输入“!”+snippet名称</p>\n</blockquote>\n<h2 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h2><h3 id=\"console-assert\"><a href=\"#console-assert\" class=\"headerlink\" title=\"console.assert\"></a>console.assert</h3><blockquote>\n<p>当我们传入的第一个参数为 假 时，console.assert 打印跟在这个参数后面的值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!value)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"value\"</span>+<span class=\"string\">'为空'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.assert(value,<span class=\"string\">\"value\"</span>+<span class=\"string\">'为空'</span>)</span><br></pre></td></tr></table></figure>\n<p>通过它，你可以摆脱令人讨厌的 if 表达式，还可以获得堆栈信息。</p>\n<blockquote>\n<p>NodeJS 版本 ≤ 10.0 ， console.assert 可能会中断后面代码的执行，但是在 .10 的版本中被修复了(当然，在浏览器中不存在这个问题)</p>\n</blockquote>\n<h3 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log\"></a>console.log</h3><p>let a = 1, b = 2;<br>console.log({a,b})<br>console.table({a,b})<br>打印dom使用 console.dir<br>console.log(‘%c123’,”font-size:50px;color:red;”) //%c是关键</p>\n<h3 id=\"console中的”-”\"><a href=\"#console中的”-”\" class=\"headerlink\" title=\"console中的”$”\"></a>console中的”$”</h3><p>$0 dom选择<br>$_ 对上次的结果进行饮用<br>$i 控制台安装npm 包 _进行调用 （需要安装Console Importer插件）</p>\n<h3 id=\"console的”bug”\"><a href=\"#console的”bug”\" class=\"headerlink\" title=\"console的”bug”\"></a>console的”bug”</h3><p>let obj = {a:1,b:2};<br>console.log(obj)<br>obj.a=2<br>console.log(obj)</p>\n<blockquote>\n<p><strong>原因</strong> console 中打印出的对象，在你打印出他内容之前，是以引用的方式保存的。</p>\n</blockquote>\n<h3 id=\"异步的console\"><a href=\"#异步的console\" class=\"headerlink\" title=\"异步的console\"></a>异步的console</h3>","site":{"data":{}},"excerpt":"<h2 id=\"copying-amp-amp-saving\"><a href=\"#copying-amp-amp-saving\" class=\"headerlink\" title=\"copying &amp;&amp; saving\"></a>copying &amp;&amp; saving</h2><pre><code>1. copy(location.href) ==&gt; ctrl + v\n2. console出来的对象,通过右键==》Store as global variable 来保存为全局变量\n</code></pre><h2 id=\"快捷键和通用技巧\"><a href=\"#快捷键和通用技巧\" class=\"headerlink\" title=\"快捷键和通用技巧\"></a>快捷键和通用技巧</h2>","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:center\">快捷键</th>\n<th style=\"text-align:center\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + option + I</td>\n<td style=\"text-align:center\">打开控制台</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + option + U</td>\n<td style=\"text-align:center\">查看源码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + shift + D</td>\n<td style=\"text-align:center\">底部-右部切换控制台窗口</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + [ or ]</td>\n<td style=\"text-align:center\">左右切换控制台面板</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + shift + M</td>\n<td style=\"text-align:center\">切换手机模拟模式和普通模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">css 数字值调试</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + ⬆or⬇</td>\n<td style=\"text-align:center\">100</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">shift + ⬆or⬇</td>\n<td style=\"text-align:center\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">option + ⬆or⬇</td>\n<td style=\"text-align:center\">0.1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">debugger</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + \\</td>\n<td style=\"text-align:center\">resume/pause script execution <br>恢复/暂停脚本执行 </td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + ‘</td>\n<td style=\"text-align:center\">step over next function call <br>跨过，实际表现是不遇到函数时，执行下一步。遇到函数时，不进入函数直接执行下一步。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + ;</td>\n<td style=\"text-align:center\">step into next function call <br>跨入，实际表现是不遇到函数时，执行下一步。遇到到函数时，进入函数执行上下文。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\">cmd + shift + ;</td>\n<td style=\"text-align:center\">step out of current function <br> 跳出当前函数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"使用Command-命令\"><a href=\"#使用Command-命令\" class=\"headerlink\" title=\"使用Command(命令)\"></a>使用Command(命令)</h2><p>在控制台中使用 CMD + shift + P 调用命令面板</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">cmd</th>\n<th style=\"text-align:center\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">show timestamps</td>\n<td style=\"text-align:center\">控制台显示输出时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">capture full size screenshot</td>\n<td style=\"text-align:center\">截屏(包括滚动区域)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"代码块的使用\"><a href=\"#代码块的使用\" class=\"headerlink\" title=\"代码块的使用\"></a>代码块的使用</h2><p>Sources面板 =》 Snippets中可以保存代码</p>\n<blockquote>\n<p><strong>用途</strong> 比如你需要经常在某一个项目中执行某一些代码,这些代码又不能放进仓库上线<br><strong>应用场景</strong> 对一个有大量照片和身份证数据的后台,想去看美女照片,这种代码不可能发版,存到snippets中,打开后台,执行保存好的代码块………………………………………………<br><strong>代码块快捷查找</strong> CMD + p =&gt; 输入“!”+snippet名称</p>\n</blockquote>\n<h2 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h2><h3 id=\"console-assert\"><a href=\"#console-assert\" class=\"headerlink\" title=\"console.assert\"></a>console.assert</h3><blockquote>\n<p>当我们传入的第一个参数为 假 时，console.assert 打印跟在这个参数后面的值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!value)&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"value\"</span>+<span class=\"string\">'为空'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.assert(value,<span class=\"string\">\"value\"</span>+<span class=\"string\">'为空'</span>)</span><br></pre></td></tr></table></figure>\n<p>通过它，你可以摆脱令人讨厌的 if 表达式，还可以获得堆栈信息。</p>\n<blockquote>\n<p>NodeJS 版本 ≤ 10.0 ， console.assert 可能会中断后面代码的执行，但是在 .10 的版本中被修复了(当然，在浏览器中不存在这个问题)</p>\n</blockquote>\n<h3 id=\"console-log\"><a href=\"#console-log\" class=\"headerlink\" title=\"console.log\"></a>console.log</h3><p>let a = 1, b = 2;<br>console.log({a,b})<br>console.table({a,b})<br>打印dom使用 console.dir<br>console.log(‘%c123’,”font-size:50px;color:red;”) //%c是关键</p>\n<h3 id=\"console中的”-”\"><a href=\"#console中的”-”\" class=\"headerlink\" title=\"console中的”$”\"></a>console中的”$”</h3><p>$0 dom选择<br>$_ 对上次的结果进行饮用<br>$i 控制台安装npm 包 _进行调用 （需要安装Console Importer插件）</p>\n<h3 id=\"console的”bug”\"><a href=\"#console的”bug”\" class=\"headerlink\" title=\"console的”bug”\"></a>console的”bug”</h3><p>let obj = {a:1,b:2};<br>console.log(obj)<br>obj.a=2<br>console.log(obj)</p>\n<blockquote>\n<p><strong>原因</strong> console 中打印出的对象，在你打印出他内容之前，是以引用的方式保存的。</p>\n</blockquote>\n<h3 id=\"异步的console\"><a href=\"#异步的console\" class=\"headerlink\" title=\"异步的console\"></a>异步的console</h3>"},{"title":"hexo介绍","date":"2017-01-03T08:43:19.000Z","_content":">https://www.kancloud.cn/wizardforcel/hexo-doc/101374\n\n* 需要安装Node.js、Git\n\n* hexo init <folder> //进行初始化会自动生成下面这样的目录结构\n<!-- more -->\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n* ## \\_config.yml\n配置文件，可以配置title、author、日期格式、deplpy--关联github的配置信息\n\n* ## scaffolds\n模板文件夹，新建文章的时候，Hexo会根据scaffold来建立文件\n\n* ## source\n资源文件夹。 除了\\_post 文件夹之外，开头命名为\\_的文件或文件夹和隐藏的文件将会被忽略。\nMarkdown和html文件会被解析并放到public文件夹，而其他文件会被拷贝过去\n\n* ## themes\n主题文件夹。Hexo会根据主题来生成静态页面\n  - huno\n    * 首页效果 看着还不错\n  - yilia\n    * 综合效果不错\n    * 头像需要在yilia文件夹下的\\_config.yml里面设置avator参数\n\n* ## 开始写文章\n$ hexo new \"文章名\"------通过这个命令来创建一篇新文章\n","source":"_posts/hexo介绍.md","raw":"---\ntitle: hexo介绍\ndate: 2017-01-03 16:43:19\ntags:\n---\n>https://www.kancloud.cn/wizardforcel/hexo-doc/101374\n\n* 需要安装Node.js、Git\n\n* hexo init <folder> //进行初始化会自动生成下面这样的目录结构\n<!-- more -->\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n* ## \\_config.yml\n配置文件，可以配置title、author、日期格式、deplpy--关联github的配置信息\n\n* ## scaffolds\n模板文件夹，新建文章的时候，Hexo会根据scaffold来建立文件\n\n* ## source\n资源文件夹。 除了\\_post 文件夹之外，开头命名为\\_的文件或文件夹和隐藏的文件将会被忽略。\nMarkdown和html文件会被解析并放到public文件夹，而其他文件会被拷贝过去\n\n* ## themes\n主题文件夹。Hexo会根据主题来生成静态页面\n  - huno\n    * 首页效果 看着还不错\n  - yilia\n    * 综合效果不错\n    * 头像需要在yilia文件夹下的\\_config.yml里面设置avator参数\n\n* ## 开始写文章\n$ hexo new \"文章名\"------通过这个命令来创建一篇新文章\n","slug":"hexo介绍","published":1,"updated":"2017-01-04T08:51:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks4nsi83000ab6e8dnbhdghb","content":"<blockquote>\n<p><a href=\"https://www.kancloud.cn/wizardforcel/hexo-doc/101374\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/wizardforcel/hexo-doc/101374</a></p>\n</blockquote>\n<ul>\n<li><p>需要安装Node.js、Git</p>\n</li>\n<li><p>hexo init <folder> //进行初始化会自动生成下面这样的目录结构</folder></p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n</li>\n<li><h2 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h2><p>配置文件，可以配置title、author、日期格式、deplpy–关联github的配置信息</p>\n</li>\n<li><h2 id=\"scaffolds\"><a href=\"#scaffolds\" class=\"headerlink\" title=\"scaffolds\"></a>scaffolds</h2><p>模板文件夹，新建文章的时候，Hexo会根据scaffold来建立文件</p>\n</li>\n<li><h2 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a>source</h2><p>资源文件夹。 除了_post 文件夹之外，开头命名为_的文件或文件夹和隐藏的文件将会被忽略。<br>Markdown和html文件会被解析并放到public文件夹，而其他文件会被拷贝过去</p>\n</li>\n<li><h2 id=\"themes\"><a href=\"#themes\" class=\"headerlink\" title=\"themes\"></a>themes</h2><p>主题文件夹。Hexo会根据主题来生成静态页面</p>\n<ul>\n<li>huno<ul>\n<li>首页效果 看着还不错</li>\n</ul>\n</li>\n<li>yilia<ul>\n<li>综合效果不错</li>\n<li>头像需要在yilia文件夹下的_config.yml里面设置avator参数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"开始写文章\"><a href=\"#开始写文章\" class=\"headerlink\" title=\"开始写文章\"></a>开始写文章</h2><p>$ hexo new “文章名”——通过这个命令来创建一篇新文章</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><a href=\"https://www.kancloud.cn/wizardforcel/hexo-doc/101374\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/wizardforcel/hexo-doc/101374</a></p>\n</blockquote>\n<ul>\n<li><p>需要安装Node.js、Git</p>\n</li>\n<li><p>hexo init <folder> //进行初始化会自动生成下面这样的目录结构</folder></p></li></ul>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── _config.yml</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── scaffolds</span><br><span class=\"line\">├── source</span><br><span class=\"line\">|   ├── _drafts</span><br><span class=\"line\">|   └── _posts</span><br><span class=\"line\">└── themes</span><br></pre></td></tr></table></figure>\n\n<li><h2 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h2><p>配置文件，可以配置title、author、日期格式、deplpy–关联github的配置信息</p>\n</li>\n<li><h2 id=\"scaffolds\"><a href=\"#scaffolds\" class=\"headerlink\" title=\"scaffolds\"></a>scaffolds</h2><p>模板文件夹，新建文章的时候，Hexo会根据scaffold来建立文件</p>\n</li>\n<li><h2 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a>source</h2><p>资源文件夹。 除了_post 文件夹之外，开头命名为_的文件或文件夹和隐藏的文件将会被忽略。<br>Markdown和html文件会被解析并放到public文件夹，而其他文件会被拷贝过去</p>\n</li>\n<li><h2 id=\"themes\"><a href=\"#themes\" class=\"headerlink\" title=\"themes\"></a>themes</h2><p>主题文件夹。Hexo会根据主题来生成静态页面</p>\n<ul>\n<li>huno<ul>\n<li>首页效果 看着还不错</li>\n</ul>\n</li>\n<li>yilia<ul>\n<li>综合效果不错</li>\n<li>头像需要在yilia文件夹下的_config.yml里面设置avator参数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h2 id=\"开始写文章\"><a href=\"#开始写文章\" class=\"headerlink\" title=\"开始写文章\"></a>开始写文章</h2><p>$ hexo new “文章名”——通过这个命令来创建一篇新文章</p>\n</li>\n"},{"title":"Hello World","date":"2028-04-18T07:05:06.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n<!-- more -->\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2028-04-18 15:05:06\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n<!-- more -->\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-09-06T16:31:04.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks4nsi86000db6e8sp803uyc","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"editorConfig","comments":1,"date":"2019-07-04T09:04:05.000Z","_content":"\n### 属性\n属性 | 释义\n :-: | :-: \nroot | 表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件。\nindent_style | 设置缩进风格，tab或者空格。tab是hard tabs，space为soft tabs。\nindent_size  | 缩进的宽度，即列数，整数。如果indent_style为tab,则此属性默认为tab_width。\ntab_width  | 设置tab的列数。默认是indent_size。\nend_of_line |  换行符，lf、cr和crlf\ncharset |  编码，latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用utf-8-bom。\ntrim_trailing_whitespace |  设为true表示会除去换行行首的任意空白字符。\ninsert_final_newline | 设为true表明使文件以一个空白行结尾\n\nvscode + prettier\n首先安装prettier\n格式化快捷键 alt + shift + f\n\n\n保存自动格式化功能\n* cmd + , 唤起设置 \n* 搜索 \" editor.formatOnSave \" \n* 设置为true\n\n\n### 在vscode中使用editorconfig的正确姿势\n\n#### 如何使用\n* 在当前项目根目录下添加.editorconfig(定义格式化规则,不会直接被vscode直接解析)\n* 安装EditorConfig扩展(读取editorconfig文件中定义的规则,并覆盖user/workspace settings中的对应规则)\n* 安装editorconfig依赖包 (npm i -g editorconfig | npm i -D editorconfig) (不安装的可能会导致editorConfig无法正常解析我们在第一步定义的editorconfig文件)\n* 手动格式化代码( alt + shif + f ) (让经过EditorConfig扩展覆盖后的user/workspace settings生效)\n\t","source":"_posts/editorConfig.md","raw":"---\ntitle: editorConfig\ncomments: true\ndate: 2019-07-04 17:04:05\ntags:\n---\n\n### 属性\n属性 | 释义\n :-: | :-: \nroot | 表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件。\nindent_style | 设置缩进风格，tab或者空格。tab是hard tabs，space为soft tabs。\nindent_size  | 缩进的宽度，即列数，整数。如果indent_style为tab,则此属性默认为tab_width。\ntab_width  | 设置tab的列数。默认是indent_size。\nend_of_line |  换行符，lf、cr和crlf\ncharset |  编码，latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用utf-8-bom。\ntrim_trailing_whitespace |  设为true表示会除去换行行首的任意空白字符。\ninsert_final_newline | 设为true表明使文件以一个空白行结尾\n\nvscode + prettier\n首先安装prettier\n格式化快捷键 alt + shift + f\n\n\n保存自动格式化功能\n* cmd + , 唤起设置 \n* 搜索 \" editor.formatOnSave \" \n* 设置为true\n\n\n### 在vscode中使用editorconfig的正确姿势\n\n#### 如何使用\n* 在当前项目根目录下添加.editorconfig(定义格式化规则,不会直接被vscode直接解析)\n* 安装EditorConfig扩展(读取editorconfig文件中定义的规则,并覆盖user/workspace settings中的对应规则)\n* 安装editorconfig依赖包 (npm i -g editorconfig | npm i -D editorconfig) (不安装的可能会导致editorConfig无法正常解析我们在第一步定义的editorconfig文件)\n* 手动格式化代码( alt + shif + f ) (让经过EditorConfig扩展覆盖后的user/workspace settings生效)\n\t","slug":"editorConfig","published":1,"updated":"2019-07-05T08:12:12.916Z","layout":"post","photos":[],"link":"","_id":"cks4nsi87000eb6e8j8la1ahm","content":"<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">root</td>\n<td style=\"text-align:center\">表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">indent_style</td>\n<td style=\"text-align:center\">设置缩进风格，tab或者空格。tab是hard tabs，space为soft tabs。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">indent_size</td>\n<td style=\"text-align:center\">缩进的宽度，即列数，整数。如果indent_style为tab,则此属性默认为tab_width。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tab_width</td>\n<td style=\"text-align:center\">设置tab的列数。默认是indent_size。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">end_of_line</td>\n<td style=\"text-align:center\">换行符，lf、cr和crlf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">charset</td>\n<td style=\"text-align:center\">编码，latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用utf-8-bom。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">trim_trailing_whitespace</td>\n<td style=\"text-align:center\">设为true表示会除去换行行首的任意空白字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insert_final_newline</td>\n<td style=\"text-align:center\">设为true表明使文件以一个空白行结尾</td>\n</tr>\n</tbody>\n</table>\n<p>vscode + prettier<br>首先安装prettier<br>格式化快捷键 alt + shift + f</p>\n<p>保存自动格式化功能</p>\n<ul>\n<li>cmd + , 唤起设置 </li>\n<li>搜索 “ editor.formatOnSave “ </li>\n<li>设置为true</li>\n</ul>\n<h3 id=\"在vscode中使用editorconfig的正确姿势\"><a href=\"#在vscode中使用editorconfig的正确姿势\" class=\"headerlink\" title=\"在vscode中使用editorconfig的正确姿势\"></a>在vscode中使用editorconfig的正确姿势</h3><h4 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h4><ul>\n<li>在当前项目根目录下添加.editorconfig(定义格式化规则,不会直接被vscode直接解析)</li>\n<li>安装EditorConfig扩展(读取editorconfig文件中定义的规则,并覆盖user/workspace settings中的对应规则)</li>\n<li>安装editorconfig依赖包 (npm i -g editorconfig | npm i -D editorconfig) (不安装的可能会导致editorConfig无法正常解析我们在第一步定义的editorconfig文件)</li>\n<li>手动格式化代码( alt + shif + f ) (让经过EditorConfig扩展覆盖后的user/workspace settings生效)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性</th>\n<th style=\"text-align:center\">释义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">root</td>\n<td style=\"text-align:center\">表明是最顶层的配置文件，发现设为true时，才会停止查找.editorconfig文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">indent_style</td>\n<td style=\"text-align:center\">设置缩进风格，tab或者空格。tab是hard tabs，space为soft tabs。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">indent_size</td>\n<td style=\"text-align:center\">缩进的宽度，即列数，整数。如果indent_style为tab,则此属性默认为tab_width。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">tab_width</td>\n<td style=\"text-align:center\">设置tab的列数。默认是indent_size。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">end_of_line</td>\n<td style=\"text-align:center\">换行符，lf、cr和crlf</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">charset</td>\n<td style=\"text-align:center\">编码，latin1、utf-8、utf-8-bom、utf-16be和utf-16le，不建议使用utf-8-bom。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">trim_trailing_whitespace</td>\n<td style=\"text-align:center\">设为true表示会除去换行行首的任意空白字符。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insert_final_newline</td>\n<td style=\"text-align:center\">设为true表明使文件以一个空白行结尾</td>\n</tr>\n</tbody>\n</table>\n<p>vscode + prettier<br>首先安装prettier<br>格式化快捷键 alt + shift + f</p>\n<p>保存自动格式化功能</p>\n<ul>\n<li>cmd + , 唤起设置 </li>\n<li>搜索 “ editor.formatOnSave “ </li>\n<li>设置为true</li>\n</ul>\n<h3 id=\"在vscode中使用editorconfig的正确姿势\"><a href=\"#在vscode中使用editorconfig的正确姿势\" class=\"headerlink\" title=\"在vscode中使用editorconfig的正确姿势\"></a>在vscode中使用editorconfig的正确姿势</h3><h4 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h4><ul>\n<li>在当前项目根目录下添加.editorconfig(定义格式化规则,不会直接被vscode直接解析)</li>\n<li>安装EditorConfig扩展(读取editorconfig文件中定义的规则,并覆盖user/workspace settings中的对应规则)</li>\n<li>安装editorconfig依赖包 (npm i -g editorconfig | npm i -D editorconfig) (不安装的可能会导致editorConfig无法正常解析我们在第一步定义的editorconfig文件)</li>\n<li>手动格式化代码( alt + shif + f ) (让经过EditorConfig扩展覆盖后的user/workspace settings生效)</li>\n</ul>\n"},{"title":"markdown入门","date":"2017-01-03T08:44:28.000Z","_content":"Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。\n<br/>\n#### \"\\<br/>\"  代表强制换行或者“两个空格加回车”\n<!-- more -->\n标题1\n======\n1111\n标题2\n------\n222222\n# 一级标题\n## 二级标题\n### 三级标题\n---\n\n---\n* 1\n* 2\n* 3\n1. 1\n2. 2\n3. 3\n- 1\n- 2\n- 3\n1. 列出所有元素：\n    - 无序列表元素 A\n        1. 元素 A 的有序子列表\n    - 前面加四个空格\n2. 列表里的多段换行：\n    前面必须加四个空格，\n    这样换行，整体的格式不会乱\n3. 列表里引用：\n\n    > 前面空一行\n    > 仍然需要在 >  前面加四个空格\n\n\n> 这里是引用 # MD中与无关内容间需要空一行\n> > 这里是引用中的引用\n\n#### 插入链接\n[链接](http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg)\n![图片](http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg)\n<http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg>\n高级链接技巧\n\n\n\n```\n这个链接用 1 作为网址变量 [Google][1].\n这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [yahoo]: http://www.yahoo.com/\n```\n\n__用两个*或者包含一段文本就是粗体的语法__\n_用一个*包含一段文本就是斜体的语法。_\n\n```javascript\n$(document).ready(function () {\n    alert('hello world');\n});\n```\n\n### 转义字符\n```\nMarkdown中的转义字符为\\，转义的有：\n\\\\ 反斜杠\n\\` 反引号\n\\* 星号\n\\_ 下划线\n\\{\\} 大括号\n\\[\\] 中括号\n\\(\\) 小括号\n\\# 井号\n\\+ 加号\n\\- 减号\n\\. 英文句号\n\\! 感叹号\n```\n\n|| *Year* || *Temperature (low)* || *Temperature (high)* ||\n|| 1900 || -10 || 25 ||\n|| 1910 || -15 || 30 ||\n|| 1920 || -10 || 32 ||\n\n<table>\n    <tr>\n        <td>Foo</td>\n        <td>Foo2</td>\n    </tr>\n</table>\n","source":"_posts/markdown入门.md","raw":"---\ntitle: markdown入门\ndate: 2017-01-03 16:44:28\ntags:\n---\nMarkdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。\n<br/>\n#### \"\\<br/>\"  代表强制换行或者“两个空格加回车”\n<!-- more -->\n标题1\n======\n1111\n标题2\n------\n222222\n# 一级标题\n## 二级标题\n### 三级标题\n---\n\n---\n* 1\n* 2\n* 3\n1. 1\n2. 2\n3. 3\n- 1\n- 2\n- 3\n1. 列出所有元素：\n    - 无序列表元素 A\n        1. 元素 A 的有序子列表\n    - 前面加四个空格\n2. 列表里的多段换行：\n    前面必须加四个空格，\n    这样换行，整体的格式不会乱\n3. 列表里引用：\n\n    > 前面空一行\n    > 仍然需要在 >  前面加四个空格\n\n\n> 这里是引用 # MD中与无关内容间需要空一行\n> > 这里是引用中的引用\n\n#### 插入链接\n[链接](http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg)\n![图片](http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg)\n<http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg>\n高级链接技巧\n\n\n\n```\n这个链接用 1 作为网址变量 [Google][1].\n这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].\n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [yahoo]: http://www.yahoo.com/\n```\n\n__用两个*或者包含一段文本就是粗体的语法__\n_用一个*包含一段文本就是斜体的语法。_\n\n```javascript\n$(document).ready(function () {\n    alert('hello world');\n});\n```\n\n### 转义字符\n```\nMarkdown中的转义字符为\\，转义的有：\n\\\\ 反斜杠\n\\` 反引号\n\\* 星号\n\\_ 下划线\n\\{\\} 大括号\n\\[\\] 中括号\n\\(\\) 小括号\n\\# 井号\n\\+ 加号\n\\- 减号\n\\. 英文句号\n\\! 感叹号\n```\n\n|| *Year* || *Temperature (low)* || *Temperature (high)* ||\n|| 1900 || -10 || 25 ||\n|| 1910 || -15 || 30 ||\n|| 1920 || -10 || 32 ||\n\n<table>\n    <tr>\n        <td>Foo</td>\n        <td>Foo2</td>\n    </tr>\n</table>\n","slug":"markdown入门","published":1,"updated":"2018-09-05T18:17:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cks4nsi89000gb6e854jmwicz","content":"<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。<br><br></p>\n<h4 id=\"“-“-代表强制换行或者“两个空格加回车”\"><a href=\"#“-“-代表强制换行或者“两个空格加回车”\" class=\"headerlink\" title=\"“\\“  代表强制换行或者“两个空格加回车”\"></a>“\\<br>“  代表强制换行或者“两个空格加回车”</h4><a id=\"more\"></a>\n<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><p>1111</p>\n<h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><p>222222</p>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><hr>\n<hr>\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n<ol>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ol>\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n<ol>\n<li>列出所有元素：<ul>\n<li>无序列表元素 A<ol>\n<li>元素 A 的有序子列表</li>\n</ol>\n</li>\n<li>前面加四个空格</li>\n</ul>\n</li>\n<li>列表里的多段换行：<br> 前面必须加四个空格，<br> 这样换行，整体的格式不会乱</li>\n<li><p>列表里引用：</p>\n<blockquote>\n<p>前面空一行<br>仍然需要在 &gt;  前面加四个空格</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>这里是引用 # MD中与无关内容间需要空一行</p>\n<blockquote>\n<p>这里是引用中的引用</p>\n</blockquote>\n</blockquote>\n<h4 id=\"插入链接\"><a href=\"#插入链接\" class=\"headerlink\" title=\"插入链接\"></a>插入链接</h4><p><a href=\"http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg\" target=\"_blank\" rel=\"noopener\">链接</a><br><img src=\"http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg\" alt=\"图片\"><br><a href=\"http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg\" target=\"_blank\" rel=\"noopener\">http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg</a><br>高级链接技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个链接用 1 作为网址变量 [Google][1].</span><br><span class=\"line\">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</span><br><span class=\"line\">然后在文档的结尾为变量赋值（网址）</span><br><span class=\"line\"></span><br><span class=\"line\">  [1]: http://www.google.com/</span><br><span class=\"line\">  [yahoo]: http://www.yahoo.com/</span><br></pre></td></tr></table></figure>\n<p><strong>用两个*或者包含一段文本就是粗体的语法</strong><br><em>用一个*包含一段文本就是斜体的语法。</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Markdown中的转义字符为\\，转义的有：</span><br><span class=\"line\">\\\\ 反斜杠</span><br><span class=\"line\">\\` 反引号</span><br><span class=\"line\">\\* 星号</span><br><span class=\"line\">\\_ 下划线</span><br><span class=\"line\">\\&#123;\\&#125; 大括号</span><br><span class=\"line\">\\[\\] 中括号</span><br><span class=\"line\">\\(\\) 小括号</span><br><span class=\"line\">\\# 井号</span><br><span class=\"line\">\\+ 加号</span><br><span class=\"line\">\\- 减号</span><br><span class=\"line\">\\. 英文句号</span><br><span class=\"line\">\\! 感叹号</span><br></pre></td></tr></table></figure>\n<p>|| <em>Year</em> || <em>Temperature (low)</em> || <em>Temperature (high)</em> ||<br>|| 1900 || -10 || 25 ||<br>|| 1910 || -15 || 30 ||<br>|| 1920 || -10 || 32 ||</p>\n<table><br>    <tr><br>        <td>Foo</td><br>        <td>Foo2</td><br>    </tr><br></table>\n","site":{"data":{}},"excerpt":"<p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。<br><br></p>\n<h4 id=\"“-“-代表强制换行或者“两个空格加回车”\"><a href=\"#“-“-代表强制换行或者“两个空格加回车”\" class=\"headerlink\" title=\"“\\“  代表强制换行或者“两个空格加回车”\"></a>“\\<br>“  代表强制换行或者“两个空格加回车”</h4>","more":"<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><p>1111</p>\n<h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><p>222222</p>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><hr>\n<hr>\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n<ol>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ol>\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n<ol>\n<li>列出所有元素：<ul>\n<li>无序列表元素 A<ol>\n<li>元素 A 的有序子列表</li>\n</ol>\n</li>\n<li>前面加四个空格</li>\n</ul>\n</li>\n<li>列表里的多段换行：<br> 前面必须加四个空格，<br> 这样换行，整体的格式不会乱</li>\n<li><p>列表里引用：</p>\n<blockquote>\n<p>前面空一行<br>仍然需要在 &gt;  前面加四个空格</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>这里是引用 # MD中与无关内容间需要空一行</p>\n<blockquote>\n<p>这里是引用中的引用</p>\n</blockquote>\n</blockquote>\n<h4 id=\"插入链接\"><a href=\"#插入链接\" class=\"headerlink\" title=\"插入链接\"></a>插入链接</h4><p><a href=\"http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg\" target=\"_blank\" rel=\"noopener\">链接</a><br><img src=\"http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg\" alt=\"图片\"><br><a href=\"http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg\" target=\"_blank\" rel=\"noopener\">http://cdn.sspai.com/attachment/thumbnail/2014/04/15/f96c892fc63933ab186235f7c910753b10f77_mw_800_wm_1_wmp_3.jpg</a><br>高级链接技巧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这个链接用 1 作为网址变量 [Google][1].</span><br><span class=\"line\">这个链接用 yahoo 作为网址变量 [Yahoo!][yahoo].</span><br><span class=\"line\">然后在文档的结尾为变量赋值（网址）</span><br><span class=\"line\"></span><br><span class=\"line\">  [1]: http://www.google.com/</span><br><span class=\"line\">  [yahoo]: http://www.yahoo.com/</span><br></pre></td></tr></table></figure>\n<p><strong>用两个*或者包含一段文本就是粗体的语法</strong><br><em>用一个*包含一段文本就是斜体的语法。</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Markdown中的转义字符为\\，转义的有：</span><br><span class=\"line\">\\\\ 反斜杠</span><br><span class=\"line\">\\` 反引号</span><br><span class=\"line\">\\* 星号</span><br><span class=\"line\">\\_ 下划线</span><br><span class=\"line\">\\&#123;\\&#125; 大括号</span><br><span class=\"line\">\\[\\] 中括号</span><br><span class=\"line\">\\(\\) 小括号</span><br><span class=\"line\">\\# 井号</span><br><span class=\"line\">\\+ 加号</span><br><span class=\"line\">\\- 减号</span><br><span class=\"line\">\\. 英文句号</span><br><span class=\"line\">\\! 感叹号</span><br></pre></td></tr></table></figure>\n<p>|| <em>Year</em> || <em>Temperature (low)</em> || <em>Temperature (high)</em> ||<br>|| 1900 || -10 || 25 ||<br>|| 1910 || -15 || 30 ||<br>|| 1920 || -10 || 32 ||</p>\n<table><br>    <tr><br>        <td>Foo</td><br>        <td>Foo2</td><br>    </tr><br></table>"},{"title":"jsArray","comments":1,"date":"2017-11-13T04:34:19.000Z","_content":"\n## 方法\n\n1.every()，数组所有元素都满足要求则返回true，否则返回false\n2.some()，只要有满足要求的就返回true\n3.filter()，返回过滤后的结果数组\n4.map()，返回在函数中处理过的数组\n5.forEach()，遍历整个数组\n\n\n#### 改变原数组的方法\n\npop、push、shift、unshift、reverse、sort、splice\n\n","source":"_posts/jsArray.md","raw":"---\ntitle: jsArray\ncomments: true\ndate: 2017-11-13 12:34:19\ntags:\n---\n\n## 方法\n\n1.every()，数组所有元素都满足要求则返回true，否则返回false\n2.some()，只要有满足要求的就返回true\n3.filter()，返回过滤后的结果数组\n4.map()，返回在函数中处理过的数组\n5.forEach()，遍历整个数组\n\n\n#### 改变原数组的方法\n\npop、push、shift、unshift、reverse、sort、splice\n\n","slug":"jsArray","published":1,"updated":"2020-11-18T09:50:11.744Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8a000hb6e8xyta1qjc","content":"<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>1.every()，数组所有元素都满足要求则返回true，否则返回false<br>2.some()，只要有满足要求的就返回true<br>3.filter()，返回过滤后的结果数组<br>4.map()，返回在函数中处理过的数组<br>5.forEach()，遍历整个数组</p>\n<h4 id=\"改变原数组的方法\"><a href=\"#改变原数组的方法\" class=\"headerlink\" title=\"改变原数组的方法\"></a>改变原数组的方法</h4><p>pop、push、shift、unshift、reverse、sort、splice</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>1.every()，数组所有元素都满足要求则返回true，否则返回false<br>2.some()，只要有满足要求的就返回true<br>3.filter()，返回过滤后的结果数组<br>4.map()，返回在函数中处理过的数组<br>5.forEach()，遍历整个数组</p>\n<h4 id=\"改变原数组的方法\"><a href=\"#改变原数组的方法\" class=\"headerlink\" title=\"改变原数组的方法\"></a>改变原数组的方法</h4><p>pop、push、shift、unshift、reverse、sort、splice</p>\n"},{"title":"git相关操作","comments":1,"date":"2019-03-25T07:05:06.000Z","_content":"\n\n### gitignore 添加已经被跟踪的文件、文件夹\n* .gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。\n* 解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:\n* git rm -r --cached .\n* git add .\n* git commit -m 'update .gitignore'\n\n\n### 实用技巧\n```shell\n#查询a.vue文件的提交历史记录\ngit log --stat | grep -B 6 a.vue  \n\n## git log 配置\ngit config --global alias.lm  \"log --no-merges --color --date=format:'%Y-%m-%d %H:%M:%S' --author='你的名字！自己修改！' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n\n\ngit config --global alias.lms  \"log --no-merges --color --stat --date=format:'%Y-%m-%d %H:%M:%S' --author='你的名字！自己修改！' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n\n\ngit config --global alias.ls \"log --no-merges --color --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n\n\ngit config --global alias.lss \"log --no-merges --color --stat --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n <!-- more -->\n\n\n##  git 对比两个分支差异\n- [git 对比两个分支差异](https://blog.csdn.net/u011240877/article/details/52586664)\n\n##  git 小游戏\n- [githug](https://www.jianshu.com/p/482b32716bbe)\n- [git在线学习](https://learngitbranching.js.org/?demo)\n\n## git学习笔记\n- [git tag相关](https://www.cnblogs.com/wufangfang/p/6086239.html)\n- [更改git log展示](https://www.cnblogs.com/bellkosmos/p/5923439.html)\n ","source":"_posts/git相关操作.md","raw":"---\ntitle: git相关操作\ncomments: true\ndate: 2019-03-25 15:05:06\ntags:\n---\n\n\n### gitignore 添加已经被跟踪的文件、文件夹\n* .gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。\n* 解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:\n* git rm -r --cached .\n* git add .\n* git commit -m 'update .gitignore'\n\n\n### 实用技巧\n```shell\n#查询a.vue文件的提交历史记录\ngit log --stat | grep -B 6 a.vue  \n\n## git log 配置\ngit config --global alias.lm  \"log --no-merges --color --date=format:'%Y-%m-%d %H:%M:%S' --author='你的名字！自己修改！' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n\n\ngit config --global alias.lms  \"log --no-merges --color --stat --date=format:'%Y-%m-%d %H:%M:%S' --author='你的名字！自己修改！' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n\n\ngit config --global alias.ls \"log --no-merges --color --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n\n\ngit config --global alias.lss \"log --no-merges --color --stat --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\"\n```\n <!-- more -->\n\n\n##  git 对比两个分支差异\n- [git 对比两个分支差异](https://blog.csdn.net/u011240877/article/details/52586664)\n\n##  git 小游戏\n- [githug](https://www.jianshu.com/p/482b32716bbe)\n- [git在线学习](https://learngitbranching.js.org/?demo)\n\n## git学习笔记\n- [git tag相关](https://www.cnblogs.com/wufangfang/p/6086239.html)\n- [更改git log展示](https://www.cnblogs.com/bellkosmos/p/5923439.html)\n ","slug":"git相关操作","published":1,"updated":"2019-08-31T09:22:58.026Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8a000ib6e8meq3yf4q","content":"<h3 id=\"gitignore-添加已经被跟踪的文件、文件夹\"><a href=\"#gitignore-添加已经被跟踪的文件、文件夹\" class=\"headerlink\" title=\"gitignore 添加已经被跟踪的文件、文件夹\"></a>gitignore 添加已经被跟踪的文件、文件夹</h3><ul>\n<li>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</li>\n<li>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</li>\n<li>git rm -r –cached .</li>\n<li>git add .</li>\n<li>git commit -m ‘update .gitignore’</li>\n</ul>\n<h3 id=\"实用技巧\"><a href=\"#实用技巧\" class=\"headerlink\" title=\"实用技巧\"></a>实用技巧</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查询a.vue文件的提交历史记录</span></span><br><span class=\"line\">git log --stat | grep -B 6 a.vue  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># git log 配置</span></span></span><br><span class=\"line\">git config --global alias.lm  \"log --no-merges --color --date=format:'%Y-%m-%d %H:%M:%S' --author='你的名字！自己修改！' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.lms  \"log --no-merges --color --stat --date=format:'%Y-%m-%d %H:%M:%S' --author='你的名字！自己修改！' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.ls \"log --no-merges --color --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.lss \"log --no-merges --color --stat --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span><br></pre></td></tr></table></figure>\n <a id=\"more\"></a>\n<h2 id=\"git-对比两个分支差异\"><a href=\"#git-对比两个分支差异\" class=\"headerlink\" title=\"git 对比两个分支差异\"></a>git 对比两个分支差异</h2><ul>\n<li><a href=\"https://blog.csdn.net/u011240877/article/details/52586664\" target=\"_blank\" rel=\"noopener\">git 对比两个分支差异</a></li>\n</ul>\n<h2 id=\"git-小游戏\"><a href=\"#git-小游戏\" class=\"headerlink\" title=\"git 小游戏\"></a>git 小游戏</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/482b32716bbe\" target=\"_blank\" rel=\"noopener\">githug</a></li>\n<li><a href=\"https://learngitbranching.js.org/?demo\" target=\"_blank\" rel=\"noopener\">git在线学习</a></li>\n</ul>\n<h2 id=\"git学习笔记\"><a href=\"#git学习笔记\" class=\"headerlink\" title=\"git学习笔记\"></a>git学习笔记</h2><ul>\n<li><a href=\"https://www.cnblogs.com/wufangfang/p/6086239.html\" target=\"_blank\" rel=\"noopener\">git tag相关</a></li>\n<li><a href=\"https://www.cnblogs.com/bellkosmos/p/5923439.html\" target=\"_blank\" rel=\"noopener\">更改git log展示</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"gitignore-添加已经被跟踪的文件、文件夹\"><a href=\"#gitignore-添加已经被跟踪的文件、文件夹\" class=\"headerlink\" title=\"gitignore 添加已经被跟踪的文件、文件夹\"></a>gitignore 添加已经被跟踪的文件、文件夹</h3><ul>\n<li>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。</li>\n<li>解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:</li>\n<li>git rm -r –cached .</li>\n<li>git add .</li>\n<li>git commit -m ‘update .gitignore’</li>\n</ul>\n<h3 id=\"实用技巧\"><a href=\"#实用技巧\" class=\"headerlink\" title=\"实用技巧\"></a>实用技巧</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查询a.vue文件的提交历史记录</span></span><br><span class=\"line\">git log --stat | grep -B 6 a.vue  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\"># git log 配置</span></span></span><br><span class=\"line\">git config --global alias.lm  \"log --no-merges --color --date=format:'%Y-%m-%d %H:%M:%S' --author='你的名字！自己修改！' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.lms  \"log --no-merges --color --stat --date=format:'%Y-%m-%d %H:%M:%S' --author='你的名字！自己修改！' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.ls \"log --no-merges --color --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.lss \"log --no-merges --color --stat --graph --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Cblue %s %Cgreen(%cd) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit\"</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"git-对比两个分支差异\"><a href=\"#git-对比两个分支差异\" class=\"headerlink\" title=\"git 对比两个分支差异\"></a>git 对比两个分支差异</h2><ul>\n<li><a href=\"https://blog.csdn.net/u011240877/article/details/52586664\" target=\"_blank\" rel=\"noopener\">git 对比两个分支差异</a></li>\n</ul>\n<h2 id=\"git-小游戏\"><a href=\"#git-小游戏\" class=\"headerlink\" title=\"git 小游戏\"></a>git 小游戏</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/482b32716bbe\" target=\"_blank\" rel=\"noopener\">githug</a></li>\n<li><a href=\"https://learngitbranching.js.org/?demo\" target=\"_blank\" rel=\"noopener\">git在线学习</a></li>\n</ul>\n<h2 id=\"git学习笔记\"><a href=\"#git学习笔记\" class=\"headerlink\" title=\"git学习笔记\"></a>git学习笔记</h2><ul>\n<li><a href=\"https://www.cnblogs.com/wufangfang/p/6086239.html\" target=\"_blank\" rel=\"noopener\">git tag相关</a></li>\n<li><a href=\"https://www.cnblogs.com/bellkosmos/p/5923439.html\" target=\"_blank\" rel=\"noopener\">更改git log展示</a></li>\n</ul>"},{"title":"mysql","comments":1,"date":"2017-04-15T04:25:46.000Z","_content":"\n# 使用MySQL数据库\n\t登录\n\t\tMySQL运行时 可以通过命令行 mysql -h 主机名 -u 用户名 -p\n\t\t\t-h 制定要登录的主机名，登录当前及其该参数可以省略\n\t创建一个数据库\n\t\tcreate database 数据库名[其它选项就]\n\t\t例如：create database samp_db character set gbk;\n\t\t(为了便于在命令提示符下显示中文character set gbk 将数据库字符编码指定为gbk)\n\t\t(创建成功时会得到 Query OK, 1 row affected(0.02 sec) 的响应)","source":"_posts/mysql.md","raw":"---\ntitle: mysql\ncomments: true\ndate: 2017-04-15 12:25:46\ntags:\n---\n\n# 使用MySQL数据库\n\t登录\n\t\tMySQL运行时 可以通过命令行 mysql -h 主机名 -u 用户名 -p\n\t\t\t-h 制定要登录的主机名，登录当前及其该参数可以省略\n\t创建一个数据库\n\t\tcreate database 数据库名[其它选项就]\n\t\t例如：create database samp_db character set gbk;\n\t\t(为了便于在命令提示符下显示中文character set gbk 将数据库字符编码指定为gbk)\n\t\t(创建成功时会得到 Query OK, 1 row affected(0.02 sec) 的响应)","slug":"mysql","published":1,"updated":"2017-04-15T04:33:30.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8b000jb6e8zheug77f","content":"<h1 id=\"使用MySQL数据库\"><a href=\"#使用MySQL数据库\" class=\"headerlink\" title=\"使用MySQL数据库\"></a>使用MySQL数据库</h1><pre><code>登录\n    MySQL运行时 可以通过命令行 mysql -h 主机名 -u 用户名 -p\n        -h 制定要登录的主机名，登录当前及其该参数可以省略\n创建一个数据库\n    create database 数据库名[其它选项就]\n    例如：create database samp_db character set gbk;\n    (为了便于在命令提示符下显示中文character set gbk 将数据库字符编码指定为gbk)\n    (创建成功时会得到 Query OK, 1 row affected(0.02 sec) 的响应)\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"使用MySQL数据库\"><a href=\"#使用MySQL数据库\" class=\"headerlink\" title=\"使用MySQL数据库\"></a>使用MySQL数据库</h1><pre><code>登录\n    MySQL运行时 可以通过命令行 mysql -h 主机名 -u 用户名 -p\n        -h 制定要登录的主机名，登录当前及其该参数可以省略\n创建一个数据库\n    create database 数据库名[其它选项就]\n    例如：create database samp_db character set gbk;\n    (为了便于在命令提示符下显示中文character set gbk 将数据库字符编码指定为gbk)\n    (创建成功时会得到 Query OK, 1 row affected(0.02 sec) 的响应)\n</code></pre>"},{"title":"linux","comments":1,"date":"2018-09-16T17:10:02.000Z","_content":"\n## Linux快捷键\n* CTRL+K 从光标处剪切文本直至本行结束(删除用)\n* CTRL+Y 粘贴文本\n* CTRL+E 将光标移到本行的末尾\n* CTRL+A 将光标移动到本行的开头\n* CTRL+W 剪切光标前一个词\n\n## Linux常用命令\n\t\n* mkdir、ls、rm -rf、wget、grep、cp、mv、cat、vim、pwd、ln软连、find、chmod、chown\n* tar -zxvf 解压gzip\n* grep Aug -R /var/log/* 在目录 '/var/log' 及随后的目录中搜索字符串\"Aug\" \n* ps aux 查看当前进程\n* top","source":"_posts/linux常用命令.md","raw":"---\ntitle: linux\ncomments: true\ndate: 2018-09-17 01:10:02\ntags:\n---\n\n## Linux快捷键\n* CTRL+K 从光标处剪切文本直至本行结束(删除用)\n* CTRL+Y 粘贴文本\n* CTRL+E 将光标移到本行的末尾\n* CTRL+A 将光标移动到本行的开头\n* CTRL+W 剪切光标前一个词\n\n## Linux常用命令\n\t\n* mkdir、ls、rm -rf、wget、grep、cp、mv、cat、vim、pwd、ln软连、find、chmod、chown\n* tar -zxvf 解压gzip\n* grep Aug -R /var/log/* 在目录 '/var/log' 及随后的目录中搜索字符串\"Aug\" \n* ps aux 查看当前进程\n* top","slug":"linux常用命令","published":1,"updated":"2019-05-08T06:41:48.977Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8c000kb6e88xpqfxm0","content":"<h2 id=\"Linux快捷键\"><a href=\"#Linux快捷键\" class=\"headerlink\" title=\"Linux快捷键\"></a>Linux快捷键</h2><ul>\n<li>CTRL+K 从光标处剪切文本直至本行结束(删除用)</li>\n<li>CTRL+Y 粘贴文本</li>\n<li>CTRL+E 将光标移到本行的末尾</li>\n<li>CTRL+A 将光标移动到本行的开头</li>\n<li>CTRL+W 剪切光标前一个词</li>\n</ul>\n<h2 id=\"Linux常用命令\"><a href=\"#Linux常用命令\" class=\"headerlink\" title=\"Linux常用命令\"></a>Linux常用命令</h2><ul>\n<li>mkdir、ls、rm -rf、wget、grep、cp、mv、cat、vim、pwd、ln软连、find、chmod、chown</li>\n<li>tar -zxvf 解压gzip</li>\n<li>grep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug” </li>\n<li>ps aux 查看当前进程</li>\n<li>top</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Linux快捷键\"><a href=\"#Linux快捷键\" class=\"headerlink\" title=\"Linux快捷键\"></a>Linux快捷键</h2><ul>\n<li>CTRL+K 从光标处剪切文本直至本行结束(删除用)</li>\n<li>CTRL+Y 粘贴文本</li>\n<li>CTRL+E 将光标移到本行的末尾</li>\n<li>CTRL+A 将光标移动到本行的开头</li>\n<li>CTRL+W 剪切光标前一个词</li>\n</ul>\n<h2 id=\"Linux常用命令\"><a href=\"#Linux常用命令\" class=\"headerlink\" title=\"Linux常用命令\"></a>Linux常用命令</h2><ul>\n<li>mkdir、ls、rm -rf、wget、grep、cp、mv、cat、vim、pwd、ln软连、find、chmod、chown</li>\n<li>tar -zxvf 解压gzip</li>\n<li>grep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug” </li>\n<li>ps aux 查看当前进程</li>\n<li>top</li>\n</ul>\n"},{"title":"nginx","comments":1,"date":"2018-09-16T17:01:10.000Z","_content":"\n\n\n## 安装nginx\n\n[官网](http://nginx.org/en/download.html)\n\n复制 稳定版本（stable version）链接\n\n进入服务器 wget http://nginx.org/download/nginx-1.14.0.tar.gz\n\n下载完成后\n\n tar zxvf nginx*(tab补全)\n\n进入nginx目录 执行 ./configure \n\n会生成objs目录\n\n执行make install\n\n系统会把nginx 安装到 /usr/local/nginx\n\n执行文件是/usr/local/nginx/sbin/nginx\n\nNginx -t 测试配置文件是否有问题\n\nnginx -s reload 重启nginx\n\nPs -ef | grep nginx 查找进程中是否有启动的nginx\n\nlsof -i:80 查看占用80端口的进程\n<!-- more -->\n\n### 配置文件\n\n/conf/nginx.conf\n\n``` nginx\n\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n\n","source":"_posts/nginx.md","raw":"---\ntitle: nginx\ncomments: true\ndate: 2018-09-17 01:01:10\ntags:\n---\n\n\n\n## 安装nginx\n\n[官网](http://nginx.org/en/download.html)\n\n复制 稳定版本（stable version）链接\n\n进入服务器 wget http://nginx.org/download/nginx-1.14.0.tar.gz\n\n下载完成后\n\n tar zxvf nginx*(tab补全)\n\n进入nginx目录 执行 ./configure \n\n会生成objs目录\n\n执行make install\n\n系统会把nginx 安装到 /usr/local/nginx\n\n执行文件是/usr/local/nginx/sbin/nginx\n\nNginx -t 测试配置文件是否有问题\n\nnginx -s reload 重启nginx\n\nPs -ef | grep nginx 查找进程中是否有启动的nginx\n\nlsof -i:80 查看占用80端口的进程\n<!-- more -->\n\n### 配置文件\n\n/conf/nginx.conf\n\n``` nginx\n\n#user  nobody;\nworker_processes  1;\n\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    #access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    server {\n        listen       80;\n        server_name  localhost;\n\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n\n","slug":"nginx","published":1,"updated":"2019-03-26T14:12:51.417Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8c000lb6e89h2bw2yu","content":"<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><p><a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>复制 稳定版本（stable version）链接</p>\n<p>进入服务器 wget <a href=\"http://nginx.org/download/nginx-1.14.0.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/nginx-1.14.0.tar.gz</a></p>\n<p>下载完成后</p>\n<p> tar zxvf nginx*(tab补全)</p>\n<p>进入nginx目录 执行 ./configure </p>\n<p>会生成objs目录</p>\n<p>执行make install</p>\n<p>系统会把nginx 安装到 /usr/local/nginx</p>\n<p>执行文件是/usr/local/nginx/sbin/nginx</p>\n<p>Nginx -t 测试配置文件是否有问题</p>\n<p>nginx -s reload 重启nginx</p>\n<p>Ps -ef | grep nginx 查找进程中是否有启动的nginx</p>\n<p>lsof -i:80 查看占用80端口的进程<br><a id=\"more\"></a></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>/conf/nginx.conf</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#user  nobody;</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pid        logs/nginx.pid;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#access_log  logs/access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#keepalive_timeout  0;</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#access_log  logs/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;</span><br><span class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    proxy_pass   http://127.0.0.1;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    root           html;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class=\"line\">        <span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># deny access to .htaccess files, if Apache's document root</span></span><br><span class=\"line\">        <span class=\"comment\"># concurs with nginx's one</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ /\\.ht &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    deny  all;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#server &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       8000;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       somename:8080;</span></span><br><span class=\"line\">    <span class=\"comment\">#    server_name  somename  alias  another.alias;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    location / &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#        root   html;</span></span><br><span class=\"line\">    <span class=\"comment\">#        index  index.html index.htm;</span></span><br><span class=\"line\">    <span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># HTTPS server</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#server &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       443 ssl;</span></span><br><span class=\"line\">    <span class=\"comment\">#    server_name  localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_certificate      cert.pem;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_certificate_key  cert.key;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_session_timeout  5m;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_prefer_server_ciphers  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    location / &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#        root   html;</span></span><br><span class=\"line\">    <span class=\"comment\">#        index  index.html index.htm;</span></span><br><span class=\"line\">    <span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h2><p><a href=\"http://nginx.org/en/download.html\" target=\"_blank\" rel=\"noopener\">官网</a></p>\n<p>复制 稳定版本（stable version）链接</p>\n<p>进入服务器 wget <a href=\"http://nginx.org/download/nginx-1.14.0.tar.gz\" target=\"_blank\" rel=\"noopener\">http://nginx.org/download/nginx-1.14.0.tar.gz</a></p>\n<p>下载完成后</p>\n<p> tar zxvf nginx*(tab补全)</p>\n<p>进入nginx目录 执行 ./configure </p>\n<p>会生成objs目录</p>\n<p>执行make install</p>\n<p>系统会把nginx 安装到 /usr/local/nginx</p>\n<p>执行文件是/usr/local/nginx/sbin/nginx</p>\n<p>Nginx -t 测试配置文件是否有问题</p>\n<p>nginx -s reload 重启nginx</p>\n<p>Ps -ef | grep nginx 查找进程中是否有启动的nginx</p>\n<p>lsof -i:80 查看占用80端口的进程<br></p>","more":"<p></p>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>/conf/nginx.conf</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#user  nobody;</span></span><br><span class=\"line\"><span class=\"attribute\">worker_processes</span>  <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  notice;</span></span><br><span class=\"line\"><span class=\"comment\">#error_log  logs/error.log  info;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pid        logs/nginx.pid;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">events</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">worker_connections</span>  <span class=\"number\">1024</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">http</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">include</span>       mime.types;</span><br><span class=\"line\">    <span class=\"attribute\">default_type</span>  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span></span><br><span class=\"line\">    <span class=\"comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#access_log  logs/access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attribute\">sendfile</span>        <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"comment\">#tcp_nopush     on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#keepalive_timeout  0;</span></span><br><span class=\"line\">    <span class=\"attribute\">keepalive_timeout</span>  <span class=\"number\">65</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#gzip  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;</span><br><span class=\"line\">        <span class=\"attribute\">server_name</span>  localhost;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#charset koi8-r;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#access_log  logs/host.access.log  main;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;</span><br><span class=\"line\">            <span class=\"attribute\">index</span>  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">#error_page  404              /404.html;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># redirect server error pages to the static page /50x.html</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"attribute\">error_page</span>   <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span>  /50x.html;</span><br><span class=\"line\">        <span class=\"attribute\">location</span> = /50x.html &#123;</span><br><span class=\"line\">            <span class=\"attribute\">root</span>   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    proxy_pass   http://127.0.0.1;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ \\.php$ &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    root           html;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_index  index.php;</span></span><br><span class=\"line\">        <span class=\"comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class=\"line\">        <span class=\"comment\">#    include        fastcgi_params;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># deny access to .htaccess files, if Apache's document root</span></span><br><span class=\"line\">        <span class=\"comment\"># concurs with nginx's one</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        <span class=\"comment\">#location ~ /\\.ht &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">#    deny  all;</span></span><br><span class=\"line\">        <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#server &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       8000;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       somename:8080;</span></span><br><span class=\"line\">    <span class=\"comment\">#    server_name  somename  alias  another.alias;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    location / &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#        root   html;</span></span><br><span class=\"line\">    <span class=\"comment\">#        index  index.html index.htm;</span></span><br><span class=\"line\">    <span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># HTTPS server</span></span><br><span class=\"line\">    <span class=\"comment\">#</span></span><br><span class=\"line\">    <span class=\"comment\">#server &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#    listen       443 ssl;</span></span><br><span class=\"line\">    <span class=\"comment\">#    server_name  localhost;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_certificate      cert.pem;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_certificate_key  cert.key;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_session_timeout  5m;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class=\"line\">    <span class=\"comment\">#    ssl_prefer_server_ciphers  on;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#    location / &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#        root   html;</span></span><br><span class=\"line\">    <span class=\"comment\">#        index  index.html index.htm;</span></span><br><span class=\"line\">    <span class=\"comment\">#    &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"react入门","comments":1,"date":"2017-01-12T08:59:09.000Z","_content":"","source":"_posts/react入门.md","raw":"---\ntitle: react入门\ncomments: true\ndate: 2017-01-12 16:59:09\ntags:\n---\n","slug":"react入门","published":1,"updated":"2017-01-12T08:59:09.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8d000mb6e82tq8csx5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"package.json","comments":1,"date":"2017-03-18T07:20:56.000Z","_content":"\n### --save-dev && --save\npackage.json 中有dependencies和devDependencies<br/>\ndependencies是用在开发完上线模式的，<br/>\ndevDependencies是用在开发模式<br/>\n\n### 依赖的版本控制\n\n指定版本号\n（1）指定版本：比如\"classnames\": \"2.2.5\"，表示安装2.2.5的版本\n\n（2）波浪号~+指定版本：比如 \"babel-plugin-import\": \"~1.1.0\",表示安装1.1.x的最新版本（不低于1.1.0），但是不安装1.2.x，也就是说安装时不改变大版本号和次要版本号\n\n（3）^+指定版本：比如 \"antd\": \"^3.1.4\",，表示安装3.1.4及以上的版本，但是不安装4.0.0，也就是说安装时不改变大版本号。","source":"_posts/package-json.md","raw":"---\ntitle: package.json\ncomments: true\ndate: 2017-03-18 15:20:56\ntags:\n---\n\n### --save-dev && --save\npackage.json 中有dependencies和devDependencies<br/>\ndependencies是用在开发完上线模式的，<br/>\ndevDependencies是用在开发模式<br/>\n\n### 依赖的版本控制\n\n指定版本号\n（1）指定版本：比如\"classnames\": \"2.2.5\"，表示安装2.2.5的版本\n\n（2）波浪号~+指定版本：比如 \"babel-plugin-import\": \"~1.1.0\",表示安装1.1.x的最新版本（不低于1.1.0），但是不安装1.2.x，也就是说安装时不改变大版本号和次要版本号\n\n（3）^+指定版本：比如 \"antd\": \"^3.1.4\",，表示安装3.1.4及以上的版本，但是不安装4.0.0，也就是说安装时不改变大版本号。","slug":"package-json","published":1,"updated":"2018-11-03T18:32:39.514Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8d000nb6e832qwa42j","content":"<h3 id=\"–save-dev-amp-amp-–save\"><a href=\"#–save-dev-amp-amp-–save\" class=\"headerlink\" title=\"–save-dev &amp;&amp; –save\"></a>–save-dev &amp;&amp; –save</h3><p>package.json 中有dependencies和devDependencies<br><br>dependencies是用在开发完上线模式的，<br><br>devDependencies是用在开发模式<br></p>\n<h3 id=\"依赖的版本控制\"><a href=\"#依赖的版本控制\" class=\"headerlink\" title=\"依赖的版本控制\"></a>依赖的版本控制</h3><p>指定版本号<br>（1）指定版本：比如”classnames”: “2.2.5”，表示安装2.2.5的版本</p>\n<p>（2）波浪号~+指定版本：比如 “babel-plugin-import”: “~1.1.0”,表示安装1.1.x的最新版本（不低于1.1.0），但是不安装1.2.x，也就是说安装时不改变大版本号和次要版本号</p>\n<p>（3）^+指定版本：比如 “antd”: “^3.1.4”,，表示安装3.1.4及以上的版本，但是不安装4.0.0，也就是说安装时不改变大版本号。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"–save-dev-amp-amp-–save\"><a href=\"#–save-dev-amp-amp-–save\" class=\"headerlink\" title=\"–save-dev &amp;&amp; –save\"></a>–save-dev &amp;&amp; –save</h3><p>package.json 中有dependencies和devDependencies<br><br>dependencies是用在开发完上线模式的，<br><br>devDependencies是用在开发模式<br></p>\n<h3 id=\"依赖的版本控制\"><a href=\"#依赖的版本控制\" class=\"headerlink\" title=\"依赖的版本控制\"></a>依赖的版本控制</h3><p>指定版本号<br>（1）指定版本：比如”classnames”: “2.2.5”，表示安装2.2.5的版本</p>\n<p>（2）波浪号~+指定版本：比如 “babel-plugin-import”: “~1.1.0”,表示安装1.1.x的最新版本（不低于1.1.0），但是不安装1.2.x，也就是说安装时不改变大版本号和次要版本号</p>\n<p>（3）^+指定版本：比如 “antd”: “^3.1.4”,，表示安装3.1.4及以上的版本，但是不安装4.0.0，也就是说安装时不改变大版本号。</p>\n"},{"title":"linux && nginx技术分享","comments":1,"date":"2018-10-23T05:16:32.000Z","_content":"\n\n\n### 技术分享背景\n\n​\t前端开发人员成长的必经之路\n\n​\t与运维合作更顺畅\n\n​\t在业务场景下，可以想到ngixn等解决方案，找ops帮忙解决\n\n### 前端开发可以用nginx做什么\n\n<!-- more -->\n### 操作系统概述\n\nWindows -  x shell、git bash\n\nmac 基于unix\n\nlinux 特指内核，常见发行版：ubuntu、CentOS\n\n\n\n### ssh远程登陆\n\n服务器生成\n\n-p、-i\n\n### linux 使用\n\n文件操作\n​\tchmod\n​\tscp\nalias 快捷设置 .bashrc .zshrc\ntop\nctrl+s 暂停屏幕输出\nctrl+q 恢复屏幕输出\nctrl+a、ctrl+e\n\n服务管理命令 systemctl\n\nsystemctl status nginx\nsystemctl enable nginx 开机启动nginx\n\n\nps aux | grep nginx\nkill (-9) pid\n\n## Nginx\nip_hash\nupstream\ngzip:on \n\n\n\n### samba \n\n局域网资源共享","source":"_posts/nginx技术分享.md","raw":"---\ntitle: linux && nginx技术分享\ncomments: true\ndate: 2018-10-23 13:16:32\ntags:\n---\n\n\n\n### 技术分享背景\n\n​\t前端开发人员成长的必经之路\n\n​\t与运维合作更顺畅\n\n​\t在业务场景下，可以想到ngixn等解决方案，找ops帮忙解决\n\n### 前端开发可以用nginx做什么\n\n<!-- more -->\n### 操作系统概述\n\nWindows -  x shell、git bash\n\nmac 基于unix\n\nlinux 特指内核，常见发行版：ubuntu、CentOS\n\n\n\n### ssh远程登陆\n\n服务器生成\n\n-p、-i\n\n### linux 使用\n\n文件操作\n​\tchmod\n​\tscp\nalias 快捷设置 .bashrc .zshrc\ntop\nctrl+s 暂停屏幕输出\nctrl+q 恢复屏幕输出\nctrl+a、ctrl+e\n\n服务管理命令 systemctl\n\nsystemctl status nginx\nsystemctl enable nginx 开机启动nginx\n\n\nps aux | grep nginx\nkill (-9) pid\n\n## Nginx\nip_hash\nupstream\ngzip:on \n\n\n\n### samba \n\n局域网资源共享","slug":"nginx技术分享","published":1,"updated":"2019-03-26T14:12:27.773Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8e000ob6e8whaewwt4","content":"<h3 id=\"技术分享背景\"><a href=\"#技术分享背景\" class=\"headerlink\" title=\"技术分享背景\"></a>技术分享背景</h3><p>​    前端开发人员成长的必经之路</p>\n<p>​    与运维合作更顺畅</p>\n<p>​    在业务场景下，可以想到ngixn等解决方案，找ops帮忙解决</p>\n<h3 id=\"前端开发可以用nginx做什么\"><a href=\"#前端开发可以用nginx做什么\" class=\"headerlink\" title=\"前端开发可以用nginx做什么\"></a>前端开发可以用nginx做什么</h3><a id=\"more\"></a>\n<h3 id=\"操作系统概述\"><a href=\"#操作系统概述\" class=\"headerlink\" title=\"操作系统概述\"></a>操作系统概述</h3><p>Windows -  x shell、git bash</p>\n<p>mac 基于unix</p>\n<p>linux 特指内核，常见发行版：ubuntu、CentOS</p>\n<h3 id=\"ssh远程登陆\"><a href=\"#ssh远程登陆\" class=\"headerlink\" title=\"ssh远程登陆\"></a>ssh远程登陆</h3><p>服务器生成</p>\n<p>-p、-i</p>\n<h3 id=\"linux-使用\"><a href=\"#linux-使用\" class=\"headerlink\" title=\"linux 使用\"></a>linux 使用</h3><p>文件操作<br>​    chmod<br>​    scp<br>alias 快捷设置 .bashrc .zshrc<br>top<br>ctrl+s 暂停屏幕输出<br>ctrl+q 恢复屏幕输出<br>ctrl+a、ctrl+e</p>\n<p>服务管理命令 systemctl</p>\n<p>systemctl status nginx<br>systemctl enable nginx 开机启动nginx</p>\n<p>ps aux | grep nginx<br>kill (-9) pid</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p>ip_hash<br>upstream<br>gzip:on </p>\n<h3 id=\"samba\"><a href=\"#samba\" class=\"headerlink\" title=\"samba\"></a>samba</h3><p>局域网资源共享</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"技术分享背景\"><a href=\"#技术分享背景\" class=\"headerlink\" title=\"技术分享背景\"></a>技术分享背景</h3><p>​    前端开发人员成长的必经之路</p>\n<p>​    与运维合作更顺畅</p>\n<p>​    在业务场景下，可以想到ngixn等解决方案，找ops帮忙解决</p>\n<h3 id=\"前端开发可以用nginx做什么\"><a href=\"#前端开发可以用nginx做什么\" class=\"headerlink\" title=\"前端开发可以用nginx做什么\"></a>前端开发可以用nginx做什么</h3>","more":"<h3 id=\"操作系统概述\"><a href=\"#操作系统概述\" class=\"headerlink\" title=\"操作系统概述\"></a>操作系统概述</h3><p>Windows -  x shell、git bash</p>\n<p>mac 基于unix</p>\n<p>linux 特指内核，常见发行版：ubuntu、CentOS</p>\n<h3 id=\"ssh远程登陆\"><a href=\"#ssh远程登陆\" class=\"headerlink\" title=\"ssh远程登陆\"></a>ssh远程登陆</h3><p>服务器生成</p>\n<p>-p、-i</p>\n<h3 id=\"linux-使用\"><a href=\"#linux-使用\" class=\"headerlink\" title=\"linux 使用\"></a>linux 使用</h3><p>文件操作<br>​    chmod<br>​    scp<br>alias 快捷设置 .bashrc .zshrc<br>top<br>ctrl+s 暂停屏幕输出<br>ctrl+q 恢复屏幕输出<br>ctrl+a、ctrl+e</p>\n<p>服务管理命令 systemctl</p>\n<p>systemctl status nginx<br>systemctl enable nginx 开机启动nginx</p>\n<p>ps aux | grep nginx<br>kill (-9) pid</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><p>ip_hash<br>upstream<br>gzip:on </p>\n<h3 id=\"samba\"><a href=\"#samba\" class=\"headerlink\" title=\"samba\"></a>samba</h3><p>局域网资源共享</p>"},{"title":"rem入门","comments":1,"date":"2017-03-05T09:22:27.000Z","_content":"\n## 为什么要用rem?\n　　定宽布局在部分ios应用内不能正确显示。\n\n## rem是什么？\n　　rem（font size of the root element）是指相对于根元素的字体大小的单位。\n\n　　简单的说它就是一个相对单位。看到rem大家一定会想起em单位，em（font size of the element）是指相对于父元素的字体大小的单位。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;区别：它们之间其实很相似，只不过一个计算的规则是依赖根元素一个是依赖父元素计算。\n\n## 前端页面布局方式\n- ### 响应式布局\n<!-- more -->\n  - 从web page到web app直接一步到位，可以节约成本，不用再专门为自己的网站做一个web app的版本。\n  - 工作大，维护性难\n\n\n* ### 流式布局\n  * 通过百分比来定一款杜，但是高度大都是用过px来固定\n  * 在大屏幕手机下显示效果会变成有些元素宽度呗拉得很长，但是高度还是和原来一样，导致显示不协调\n  * 对设计师有很大程度的限制\n\n- ### 定宽布局\n  - 把宽度设置成320、640、750，超出的部分留白，这样前端可以照着设计稿直接写对应设计稿尺寸的px单位，工作效率高\n  - 早起的320在大屏幕手机下两边会有空白，并且操作按钮过小。\n  - 后来的640、750在能满足主流手机的全屏显示，但是在部分ios应用内有兼容问题\n  \n- ### 设置viewport进行缩放\n  - 天猫的web app的首页就是采用这种方式去做的，以320宽度为基准，进行缩放，最大缩放为320*1.3 = 416，基本缩放到416都就可以兼容iphone6 plus的屏幕了，这个方法简单粗暴，又高效。\n  - 使用过程中反应缩放会导致有些页面元素会糊的情况。\n  - >’<\\meta name=\"viewport\" content=\"width=320,maximum-scale=1.3,user-scalable=no\">‘\n  \n## rem布局\nrem是通过根元素进行适配的，网页中的根元素指的是html我们通过设置html的字体大小就可以控制rem的大小\n\n\n本文借鉴自：\n>http://www.duanliang920.com/learn/web/html5/316.html\n","source":"_posts/rem入门.md","raw":"---\ntitle: rem入门\ncomments: true\ndate: 2017-03-05 17:22:27\ntags:\n---\n\n## 为什么要用rem?\n　　定宽布局在部分ios应用内不能正确显示。\n\n## rem是什么？\n　　rem（font size of the root element）是指相对于根元素的字体大小的单位。\n\n　　简单的说它就是一个相对单位。看到rem大家一定会想起em单位，em（font size of the element）是指相对于父元素的字体大小的单位。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;区别：它们之间其实很相似，只不过一个计算的规则是依赖根元素一个是依赖父元素计算。\n\n## 前端页面布局方式\n- ### 响应式布局\n<!-- more -->\n  - 从web page到web app直接一步到位，可以节约成本，不用再专门为自己的网站做一个web app的版本。\n  - 工作大，维护性难\n\n\n* ### 流式布局\n  * 通过百分比来定一款杜，但是高度大都是用过px来固定\n  * 在大屏幕手机下显示效果会变成有些元素宽度呗拉得很长，但是高度还是和原来一样，导致显示不协调\n  * 对设计师有很大程度的限制\n\n- ### 定宽布局\n  - 把宽度设置成320、640、750，超出的部分留白，这样前端可以照着设计稿直接写对应设计稿尺寸的px单位，工作效率高\n  - 早起的320在大屏幕手机下两边会有空白，并且操作按钮过小。\n  - 后来的640、750在能满足主流手机的全屏显示，但是在部分ios应用内有兼容问题\n  \n- ### 设置viewport进行缩放\n  - 天猫的web app的首页就是采用这种方式去做的，以320宽度为基准，进行缩放，最大缩放为320*1.3 = 416，基本缩放到416都就可以兼容iphone6 plus的屏幕了，这个方法简单粗暴，又高效。\n  - 使用过程中反应缩放会导致有些页面元素会糊的情况。\n  - >’<\\meta name=\"viewport\" content=\"width=320,maximum-scale=1.3,user-scalable=no\">‘\n  \n## rem布局\nrem是通过根元素进行适配的，网页中的根元素指的是html我们通过设置html的字体大小就可以控制rem的大小\n\n\n本文借鉴自：\n>http://www.duanliang920.com/learn/web/html5/316.html\n","slug":"rem入门","published":1,"updated":"2017-03-05T09:54:44.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8e000pb6e8vjdrqz16","content":"<h2 id=\"为什么要用rem\"><a href=\"#为什么要用rem\" class=\"headerlink\" title=\"为什么要用rem?\"></a>为什么要用rem?</h2><p>　　定宽布局在部分ios应用内不能正确显示。</p>\n<h2 id=\"rem是什么？\"><a href=\"#rem是什么？\" class=\"headerlink\" title=\"rem是什么？\"></a>rem是什么？</h2><p>　　rem（font size of the root element）是指相对于根元素的字体大小的单位。</p>\n<p>　　简单的说它就是一个相对单位。看到rem大家一定会想起em单位，em（font size of the element）是指相对于父元素的字体大小的单位。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;区别：它们之间其实很相似，只不过一个计算的规则是依赖根元素一个是依赖父元素计算。</p>\n<h2 id=\"前端页面布局方式\"><a href=\"#前端页面布局方式\" class=\"headerlink\" title=\"前端页面布局方式\"></a>前端页面布局方式</h2><ul>\n<li><h3 id=\"响应式布局\"><a href=\"#响应式布局\" class=\"headerlink\" title=\"响应式布局\"></a>响应式布局</h3><a id=\"more\"></a>\n<ul>\n<li>从web page到web app直接一步到位，可以节约成本，不用再专门为自己的网站做一个web app的版本。</li>\n<li>工作大，维护性难</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"流式布局\"><a href=\"#流式布局\" class=\"headerlink\" title=\"流式布局\"></a>流式布局</h3><ul>\n<li>通过百分比来定一款杜，但是高度大都是用过px来固定</li>\n<li>在大屏幕手机下显示效果会变成有些元素宽度呗拉得很长，但是高度还是和原来一样，导致显示不协调</li>\n<li>对设计师有很大程度的限制</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"定宽布局\"><a href=\"#定宽布局\" class=\"headerlink\" title=\"定宽布局\"></a>定宽布局</h3><ul>\n<li>把宽度设置成320、640、750，超出的部分留白，这样前端可以照着设计稿直接写对应设计稿尺寸的px单位，工作效率高</li>\n<li>早起的320在大屏幕手机下两边会有空白，并且操作按钮过小。</li>\n<li>后来的640、750在能满足主流手机的全屏显示，但是在部分ios应用内有兼容问题</li>\n</ul>\n</li>\n<li><h3 id=\"设置viewport进行缩放\"><a href=\"#设置viewport进行缩放\" class=\"headerlink\" title=\"设置viewport进行缩放\"></a>设置viewport进行缩放</h3><ul>\n<li>天猫的web app的首页就是采用这种方式去做的，以320宽度为基准，进行缩放，最大缩放为320*1.3 = 416，基本缩放到416都就可以兼容iphone6 plus的屏幕了，这个方法简单粗暴，又高效。</li>\n<li>使用过程中反应缩放会导致有些页面元素会糊的情况。</li>\n<li><blockquote>\n<p>’&lt;\\meta name=”viewport” content=”width=320,maximum-scale=1.3,user-scalable=no”&gt;‘</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"rem布局\"><a href=\"#rem布局\" class=\"headerlink\" title=\"rem布局\"></a>rem布局</h2><p>rem是通过根元素进行适配的，网页中的根元素指的是html我们通过设置html的字体大小就可以控制rem的大小</p>\n<p>本文借鉴自：</p>\n<blockquote>\n<p><a href=\"http://www.duanliang920.com/learn/web/html5/316.html\" target=\"_blank\" rel=\"noopener\">http://www.duanliang920.com/learn/web/html5/316.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"为什么要用rem\"><a href=\"#为什么要用rem\" class=\"headerlink\" title=\"为什么要用rem?\"></a>为什么要用rem?</h2><p>　　定宽布局在部分ios应用内不能正确显示。</p>\n<h2 id=\"rem是什么？\"><a href=\"#rem是什么？\" class=\"headerlink\" title=\"rem是什么？\"></a>rem是什么？</h2><p>　　rem（font size of the root element）是指相对于根元素的字体大小的单位。</p>\n<p>　　简单的说它就是一个相对单位。看到rem大家一定会想起em单位，em（font size of the element）是指相对于父元素的字体大小的单位。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;区别：它们之间其实很相似，只不过一个计算的规则是依赖根元素一个是依赖父元素计算。</p>\n<h2 id=\"前端页面布局方式\"><a href=\"#前端页面布局方式\" class=\"headerlink\" title=\"前端页面布局方式\"></a>前端页面布局方式</h2><ul>\n<li><h3 id=\"响应式布局\"><a href=\"#响应式布局\" class=\"headerlink\" title=\"响应式布局\"></a>响应式布局</h3></li></ul>","more":"<ul>\n<li>从web page到web app直接一步到位，可以节约成本，不用再专门为自己的网站做一个web app的版本。</li>\n<li>工作大，维护性难</li>\n</ul>\n\n\n<ul>\n<li><h3 id=\"流式布局\"><a href=\"#流式布局\" class=\"headerlink\" title=\"流式布局\"></a>流式布局</h3><ul>\n<li>通过百分比来定一款杜，但是高度大都是用过px来固定</li>\n<li>在大屏幕手机下显示效果会变成有些元素宽度呗拉得很长，但是高度还是和原来一样，导致显示不协调</li>\n<li>对设计师有很大程度的限制</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"定宽布局\"><a href=\"#定宽布局\" class=\"headerlink\" title=\"定宽布局\"></a>定宽布局</h3><ul>\n<li>把宽度设置成320、640、750，超出的部分留白，这样前端可以照着设计稿直接写对应设计稿尺寸的px单位，工作效率高</li>\n<li>早起的320在大屏幕手机下两边会有空白，并且操作按钮过小。</li>\n<li>后来的640、750在能满足主流手机的全屏显示，但是在部分ios应用内有兼容问题</li>\n</ul>\n</li>\n<li><h3 id=\"设置viewport进行缩放\"><a href=\"#设置viewport进行缩放\" class=\"headerlink\" title=\"设置viewport进行缩放\"></a>设置viewport进行缩放</h3><ul>\n<li>天猫的web app的首页就是采用这种方式去做的，以320宽度为基准，进行缩放，最大缩放为320*1.3 = 416，基本缩放到416都就可以兼容iphone6 plus的屏幕了，这个方法简单粗暴，又高效。</li>\n<li>使用过程中反应缩放会导致有些页面元素会糊的情况。</li>\n<li><blockquote>\n<p>’&lt;\\meta name=”viewport” content=”width=320,maximum-scale=1.3,user-scalable=no”&gt;‘</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"rem布局\"><a href=\"#rem布局\" class=\"headerlink\" title=\"rem布局\"></a>rem布局</h2><p>rem是通过根元素进行适配的，网页中的根元素指的是html我们通过设置html的字体大小就可以控制rem的大小</p>\n<p>本文借鉴自：</p>\n<blockquote>\n<p><a href=\"http://www.duanliang920.com/learn/web/html5/316.html\" target=\"_blank\" rel=\"noopener\">http://www.duanliang920.com/learn/web/html5/316.html</a></p>\n</blockquote>"},{"title":"record problem","comments":1,"date":"2017-01-13T09:22:30.000Z","_content":"\n\n## iphone webview 调试\n\n一切调通后 safari里面点击对应需要调试的页面 手机页面顶部显示“此网页出现问题，已重新载入”并重新加载，safari出现inspector后自动关闭\n>短期解决方案：安卓+weinre\n\n\n![图片测试](record-problem/Mobile-debug.png)\n\n\n## weinre\n1、安装\n2、执行weinre --boundHost -all-\n3、打开localhost:8080 找到页面中的 Target Script\n4、把Target Script 粘贴到需要调试的html中（注：如果是localhost需要换成本机的IP）\n开始调试\nhttps://blog.csdn.net/wuyajun1124/article/details/41622987","source":"_posts/record-problem.md","raw":"---\ntitle: record problem\ncomments: true\ndate: 2017-01-13 17:22:30\ntags:\n---\n\n\n## iphone webview 调试\n\n一切调通后 safari里面点击对应需要调试的页面 手机页面顶部显示“此网页出现问题，已重新载入”并重新加载，safari出现inspector后自动关闭\n>短期解决方案：安卓+weinre\n\n\n![图片测试](record-problem/Mobile-debug.png)\n\n\n## weinre\n1、安装\n2、执行weinre --boundHost -all-\n3、打开localhost:8080 找到页面中的 Target Script\n4、把Target Script 粘贴到需要调试的html中（注：如果是localhost需要换成本机的IP）\n开始调试\nhttps://blog.csdn.net/wuyajun1124/article/details/41622987","slug":"record-problem","published":1,"updated":"2018-09-05T18:17:29.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8f000qb6e8jbj9n5ki","content":"<h2 id=\"iphone-webview-调试\"><a href=\"#iphone-webview-调试\" class=\"headerlink\" title=\"iphone webview 调试\"></a>iphone webview 调试</h2><p>一切调通后 safari里面点击对应需要调试的页面 手机页面顶部显示“此网页出现问题，已重新载入”并重新加载，safari出现inspector后自动关闭</p>\n<blockquote>\n<p>短期解决方案：安卓+weinre</p>\n</blockquote>\n<p><img src=\"/2017/01/13/record-problem/Mobile-debug.png\" alt=\"图片测试\"></p>\n<h2 id=\"weinre\"><a href=\"#weinre\" class=\"headerlink\" title=\"weinre\"></a>weinre</h2><p>1、安装<br>2、执行weinre –boundHost -all-<br>3、打开localhost:8080 找到页面中的 Target Script<br>4、把Target Script 粘贴到需要调试的html中（注：如果是localhost需要换成本机的IP）<br>开始调试<br><a href=\"https://blog.csdn.net/wuyajun1124/article/details/41622987\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wuyajun1124/article/details/41622987</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"iphone-webview-调试\"><a href=\"#iphone-webview-调试\" class=\"headerlink\" title=\"iphone webview 调试\"></a>iphone webview 调试</h2><p>一切调通后 safari里面点击对应需要调试的页面 手机页面顶部显示“此网页出现问题，已重新载入”并重新加载，safari出现inspector后自动关闭</p>\n<blockquote>\n<p>短期解决方案：安卓+weinre</p>\n</blockquote>\n<p><img src=\"/2017/01/13/record-problem/Mobile-debug.png\" alt=\"图片测试\"></p>\n<h2 id=\"weinre\"><a href=\"#weinre\" class=\"headerlink\" title=\"weinre\"></a>weinre</h2><p>1、安装<br>2、执行weinre –boundHost -all-<br>3、打开localhost:8080 找到页面中的 Target Script<br>4、把Target Script 粘贴到需要调试的html中（注：如果是localhost需要换成本机的IP）<br>开始调试<br><a href=\"https://blog.csdn.net/wuyajun1124/article/details/41622987\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/wuyajun1124/article/details/41622987</a></p>\n"},{"title":"todo","comments":1,"date":"2018-09-05T16:02:30.000Z","_content":"\n### 安装\n\nSublime CMD+shift+P  install   PlainTasks\n\n### 快捷键\n\n| 快捷键 | 备注 | 作用 |\n|:-------|:-----|:-----|\n|  CMD+shif+p|  输入tasks: New document  | 创建新文档 |\n|  CMD+i          |               | 创建新的task |\n|  ctrl+c           |               | 取消task |\n|  CMD+d         |               | 完成 |\n|  CMD+shift+a |            | 归档 |\n|  --tab           |              | 漂亮的分割线 |\n|  CMD+shift+p   输入Tasks: Copy Statistics |  在文本中粘贴即可显示你的任务完成度  | 生成统计 |\n\n### 配置\n\n如果遇到不能显示的字符，可以在配置文件中修改，进度条可以在用户配置文件中加入：\n  \n\"bar_full\": \"■\", // any char\n\"bar_empty\": \"☐\", // any char\n// if you want to avoid Unicode when copy stats — you can define replacements\n// e.g. to convert ■■■■■■☐☐☐☐ to [====== ]\n\"replace_stats_chars\": [[\" ■\", \" [=\"], [\"■\", \"=\"], [\"☐ \", \" ] \"], [\"☐\", \" \"]]\n}\n任务的轻重缓急等设置\nc tab —— @critical，用于标注任务重要程序，表示极重要的\nh tab —— @high，用于标注任务重要程序\nl tab —— @low，用于标注任务重要程序\ns tab —— @started ，再按tab键就会插入当前时间，这样当你完成任务时可以知道耗时多少\nd tab —— @due() 设置任务期限，格式为@due(year-month-day hour:minute)，以下内容再输入tab即可扩充为这个格式。 \n@due(+) —— 明天，同@due( +1) 和 @due( +1d)\n@due(+w) —— 一周，同@(due +1)。另外+3w就表示三周\n@due(+2:) —— 两小时\n@due(+:45) —— 45分钟\n@due(+2 12:) —— 两天十二小时\n@due(1) —— 下个月一号\n@due(5) —— 这个月或者下个月5号，是这个月还是下个月取决当前日期是否大于5\n@due(2-3) —— 今年或明年2月3号，取决于当前日期是否大于2月3号\n@due(25 23:) —— 这个月或下个月25号，23时，分钟等于当前的分钟\n@due(16.1.1 1:1) —— 等于@due(16-01-01 01:01)","source":"_posts/todo.md","raw":"---\ntitle: todo\ncomments: true\ndate: 2018-09-06 00:02:30\ntags:\n---\n\n### 安装\n\nSublime CMD+shift+P  install   PlainTasks\n\n### 快捷键\n\n| 快捷键 | 备注 | 作用 |\n|:-------|:-----|:-----|\n|  CMD+shif+p|  输入tasks: New document  | 创建新文档 |\n|  CMD+i          |               | 创建新的task |\n|  ctrl+c           |               | 取消task |\n|  CMD+d         |               | 完成 |\n|  CMD+shift+a |            | 归档 |\n|  --tab           |              | 漂亮的分割线 |\n|  CMD+shift+p   输入Tasks: Copy Statistics |  在文本中粘贴即可显示你的任务完成度  | 生成统计 |\n\n### 配置\n\n如果遇到不能显示的字符，可以在配置文件中修改，进度条可以在用户配置文件中加入：\n  \n\"bar_full\": \"■\", // any char\n\"bar_empty\": \"☐\", // any char\n// if you want to avoid Unicode when copy stats — you can define replacements\n// e.g. to convert ■■■■■■☐☐☐☐ to [====== ]\n\"replace_stats_chars\": [[\" ■\", \" [=\"], [\"■\", \"=\"], [\"☐ \", \" ] \"], [\"☐\", \" \"]]\n}\n任务的轻重缓急等设置\nc tab —— @critical，用于标注任务重要程序，表示极重要的\nh tab —— @high，用于标注任务重要程序\nl tab —— @low，用于标注任务重要程序\ns tab —— @started ，再按tab键就会插入当前时间，这样当你完成任务时可以知道耗时多少\nd tab —— @due() 设置任务期限，格式为@due(year-month-day hour:minute)，以下内容再输入tab即可扩充为这个格式。 \n@due(+) —— 明天，同@due( +1) 和 @due( +1d)\n@due(+w) —— 一周，同@(due +1)。另外+3w就表示三周\n@due(+2:) —— 两小时\n@due(+:45) —— 45分钟\n@due(+2 12:) —— 两天十二小时\n@due(1) —— 下个月一号\n@due(5) —— 这个月或者下个月5号，是这个月还是下个月取决当前日期是否大于5\n@due(2-3) —— 今年或明年2月3号，取决于当前日期是否大于2月3号\n@due(25 23:) —— 这个月或下个月25号，23时，分钟等于当前的分钟\n@due(16.1.1 1:1) —— 等于@due(16-01-01 01:01)","slug":"todo","published":1,"updated":"2018-09-05T18:17:29.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8f000rb6e89dkn1m88","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Sublime CMD+shift+P  install   PlainTasks</p>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">备注</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">CMD+shif+p</td>\n<td style=\"text-align:left\">输入tasks: New document</td>\n<td style=\"text-align:left\">创建新文档</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMD+i</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">创建新的task</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ctrl+c</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">取消task</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMD+d</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">完成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMD+shift+a</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">归档</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–tab</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">漂亮的分割线</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMD+shift+p   输入Tasks: Copy Statistics</td>\n<td style=\"text-align:left\">在文本中粘贴即可显示你的任务完成度</td>\n<td style=\"text-align:left\">生成统计</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>如果遇到不能显示的字符，可以在配置文件中修改，进度条可以在用户配置文件中加入：</p>\n<p>“bar_full”: “■”, // any char<br>“bar_empty”: “☐”, // any char<br>// if you want to avoid Unicode when copy stats — you can define replacements<br>// e.g. to convert ■■■■■■☐☐☐☐ to [====== ]<br>“replace_stats_chars”: [[“ ■”, “ [=”], [“■”, “=”], [“☐ “, “ ] “], [“☐”, “ “]]<br>}<br>任务的轻重缓急等设置<br>c tab —— @critical，用于标注任务重要程序，表示极重要的<br>h tab —— @high，用于标注任务重要程序<br>l tab —— @low，用于标注任务重要程序<br>s tab —— @started ，再按tab键就会插入当前时间，这样当你完成任务时可以知道耗时多少<br>d tab —— @due() 设置任务期限，格式为@due(year-month-day hour:minute)，以下内容再输入tab即可扩充为这个格式。<br>@due(+) —— 明天，同@due( +1) 和 @due( +1d)<br>@due(+w) —— 一周，同@(due +1)。另外+3w就表示三周<br>@due(+2:) —— 两小时<br>@due(+:45) —— 45分钟<br>@due(+2 12:) —— 两天十二小时<br>@due(1) —— 下个月一号<br>@due(5) —— 这个月或者下个月5号，是这个月还是下个月取决当前日期是否大于5<br>@due(2-3) —— 今年或明年2月3号，取决于当前日期是否大于2月3号<br>@due(25 23:) —— 这个月或下个月25号，23时，分钟等于当前的分钟<br>@due(16.1.1 1:1) —— 等于@due(16-01-01 01:01)</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Sublime CMD+shift+P  install   PlainTasks</p>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">快捷键</th>\n<th style=\"text-align:left\">备注</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">CMD+shif+p</td>\n<td style=\"text-align:left\">输入tasks: New document</td>\n<td style=\"text-align:left\">创建新文档</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMD+i</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">创建新的task</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ctrl+c</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">取消task</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMD+d</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">完成</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMD+shift+a</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">归档</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">–tab</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">漂亮的分割线</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CMD+shift+p   输入Tasks: Copy Statistics</td>\n<td style=\"text-align:left\">在文本中粘贴即可显示你的任务完成度</td>\n<td style=\"text-align:left\">生成统计</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>如果遇到不能显示的字符，可以在配置文件中修改，进度条可以在用户配置文件中加入：</p>\n<p>“bar_full”: “■”, // any char<br>“bar_empty”: “☐”, // any char<br>// if you want to avoid Unicode when copy stats — you can define replacements<br>// e.g. to convert ■■■■■■☐☐☐☐ to [====== ]<br>“replace_stats_chars”: [[“ ■”, “ [=”], [“■”, “=”], [“☐ “, “ ] “], [“☐”, “ “]]<br>}<br>任务的轻重缓急等设置<br>c tab —— @critical，用于标注任务重要程序，表示极重要的<br>h tab —— @high，用于标注任务重要程序<br>l tab —— @low，用于标注任务重要程序<br>s tab —— @started ，再按tab键就会插入当前时间，这样当你完成任务时可以知道耗时多少<br>d tab —— @due() 设置任务期限，格式为@due(year-month-day hour:minute)，以下内容再输入tab即可扩充为这个格式。<br>@due(+) —— 明天，同@due( +1) 和 @due( +1d)<br>@due(+w) —— 一周，同@(due +1)。另外+3w就表示三周<br>@due(+2:) —— 两小时<br>@due(+:45) —— 45分钟<br>@due(+2 12:) —— 两天十二小时<br>@due(1) —— 下个月一号<br>@due(5) —— 这个月或者下个月5号，是这个月还是下个月取决当前日期是否大于5<br>@due(2-3) —— 今年或明年2月3号，取决于当前日期是否大于2月3号<br>@due(25 23:) —— 这个月或下个月25号，23时，分钟等于当前的分钟<br>@due(16.1.1 1:1) —— 等于@due(16-01-01 01:01)</p>\n"},{"title":"transition的坑","comments":1,"date":"2017-03-09T10:58:36.000Z","_content":"","source":"_posts/transition的坑.md","raw":"---\ntitle: transition的坑\ncomments: true\ndate: 2017-03-09 18:58:36\ntags:\n---\n","slug":"transition的坑","published":1,"updated":"2017-03-09T10:58:36.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8g000sb6e8k6fujmp7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"vue中给svg组件的dom元素绑定点击事件","comments":1,"date":"2018-01-12T18:26:46.000Z","_content":"\n\n### 问题描述:在vue中 给svg组件绑定dom元素，因为元素太多，用的jquery或者js原生绑定事件\n测试过程中，复用svg组件分别为 A、B\n如果用dom元素绑定点击事件，触发A或者B中任意一个点击事件，会同时触发A和B两个相同元素绑定的点击事件\n\n暂无解决方案！！！难道要给众多的g标签分别添加绑定事件？\n\n\ng标签内很多重复的东西，难道要把众多的g标签用v-for循环出来？\n\n\nhttps://stackoverflow.com/questions/25886802/svg-path-convert-into-json\n\n\nvar d = \"M 93.00,444.00\\\n       C 93.00,444.00 114.00,506.00 114.00,506.00\\\n         102.30,512.28 100.00,518.71 100.00,531.00\\\n         100.00,531.00 86.00,534.00 86.00,534.00\\\n         86.00,534.00 68.95,485.00 68.95,485.00\\\n         68.95,485.00 58.00,452.00 58.00,452.00\\\n         58.00,452.00 93.00,444.00 93.00,444.00 Z\\\n       M 75.00,458.00\\\n       C 75.00,458.00 79.00,458.00 79.00,458.00\\\n         78.99,466.29 79.26,463.93 76.00,471.00\\\n         76.00,471.00 86.00,471.00 86.00,471.00\\\n         82.12,462.60 83.00,464.37 83.00,455.00\\\n         83.00,455.00 75.00,458.00 75.00,458.00 Z\"\n\n\n         \n\nd = d.replace(/\\s{2,}/g, ' '); // Remove multiple spaces\nd = d.replace(/([a-zA-Z])\\s[0-9]/g, '$1,'); // Add letters to coords group\nd = d.split(\" \"); // Split on space\n\nvar coords = [];\n\nfor (var i = 0; i < d.length; i++) {\n    var coordString = d[i];\n    var coordArray = coordString.split(\",\");\n    \n    var coord = {\n        x: coordArray[coordArray.length - 2],\n        y: coordArray[coordArray.length - 1]\n    };\n    \n    if (coordArray.length > 2) {\n        coord.path = coordArray[0];\n    }\n    \n    coords.push(coord);\n    \n}\n\nconsole.log(coords);","source":"_posts/vue中给svg组件的dom元素绑定点击事件.md","raw":"---\ntitle: vue中给svg组件的dom元素绑定点击事件\ncomments: true\ndate: 2018-01-13 02:26:46\ntags:\n---\n\n\n### 问题描述:在vue中 给svg组件绑定dom元素，因为元素太多，用的jquery或者js原生绑定事件\n测试过程中，复用svg组件分别为 A、B\n如果用dom元素绑定点击事件，触发A或者B中任意一个点击事件，会同时触发A和B两个相同元素绑定的点击事件\n\n暂无解决方案！！！难道要给众多的g标签分别添加绑定事件？\n\n\ng标签内很多重复的东西，难道要把众多的g标签用v-for循环出来？\n\n\nhttps://stackoverflow.com/questions/25886802/svg-path-convert-into-json\n\n\nvar d = \"M 93.00,444.00\\\n       C 93.00,444.00 114.00,506.00 114.00,506.00\\\n         102.30,512.28 100.00,518.71 100.00,531.00\\\n         100.00,531.00 86.00,534.00 86.00,534.00\\\n         86.00,534.00 68.95,485.00 68.95,485.00\\\n         68.95,485.00 58.00,452.00 58.00,452.00\\\n         58.00,452.00 93.00,444.00 93.00,444.00 Z\\\n       M 75.00,458.00\\\n       C 75.00,458.00 79.00,458.00 79.00,458.00\\\n         78.99,466.29 79.26,463.93 76.00,471.00\\\n         76.00,471.00 86.00,471.00 86.00,471.00\\\n         82.12,462.60 83.00,464.37 83.00,455.00\\\n         83.00,455.00 75.00,458.00 75.00,458.00 Z\"\n\n\n         \n\nd = d.replace(/\\s{2,}/g, ' '); // Remove multiple spaces\nd = d.replace(/([a-zA-Z])\\s[0-9]/g, '$1,'); // Add letters to coords group\nd = d.split(\" \"); // Split on space\n\nvar coords = [];\n\nfor (var i = 0; i < d.length; i++) {\n    var coordString = d[i];\n    var coordArray = coordString.split(\",\");\n    \n    var coord = {\n        x: coordArray[coordArray.length - 2],\n        y: coordArray[coordArray.length - 1]\n    };\n    \n    if (coordArray.length > 2) {\n        coord.path = coordArray[0];\n    }\n    \n    coords.push(coord);\n    \n}\n\nconsole.log(coords);","slug":"vue中给svg组件的dom元素绑定点击事件","published":1,"updated":"2018-09-05T18:17:29.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8h000tb6e88hp3bfim","content":"<h3 id=\"问题描述-在vue中-给svg组件绑定dom元素，因为元素太多，用的jquery或者js原生绑定事件\"><a href=\"#问题描述-在vue中-给svg组件绑定dom元素，因为元素太多，用的jquery或者js原生绑定事件\" class=\"headerlink\" title=\"问题描述:在vue中 给svg组件绑定dom元素，因为元素太多，用的jquery或者js原生绑定事件\"></a>问题描述:在vue中 给svg组件绑定dom元素，因为元素太多，用的jquery或者js原生绑定事件</h3><p>测试过程中，复用svg组件分别为 A、B<br>如果用dom元素绑定点击事件，触发A或者B中任意一个点击事件，会同时触发A和B两个相同元素绑定的点击事件</p>\n<p>暂无解决方案！！！难道要给众多的g标签分别添加绑定事件？</p>\n<p>g标签内很多重复的东西，难道要把众多的g标签用v-for循环出来？</p>\n<p><a href=\"https://stackoverflow.com/questions/25886802/svg-path-convert-into-json\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/25886802/svg-path-convert-into-json</a></p>\n<p>var d = “M 93.00,444.00\\<br>       C 93.00,444.00 114.00,506.00 114.00,506.00\\<br>         102.30,512.28 100.00,518.71 100.00,531.00\\<br>         100.00,531.00 86.00,534.00 86.00,534.00\\<br>         86.00,534.00 68.95,485.00 68.95,485.00\\<br>         68.95,485.00 58.00,452.00 58.00,452.00\\<br>         58.00,452.00 93.00,444.00 93.00,444.00 Z\\<br>       M 75.00,458.00\\<br>       C 75.00,458.00 79.00,458.00 79.00,458.00\\<br>         78.99,466.29 79.26,463.93 76.00,471.00\\<br>         76.00,471.00 86.00,471.00 86.00,471.00\\<br>         82.12,462.60 83.00,464.37 83.00,455.00\\<br>         83.00,455.00 75.00,458.00 75.00,458.00 Z”</p>\n<p>d = d.replace(/\\s{2,}/g, ‘ ‘); // Remove multiple spaces<br>d = d.replace(/([a-zA-Z])\\s[0-9]/g, ‘$1,’); // Add letters to coords group<br>d = d.split(“ “); // Split on space</p>\n<p>var coords = [];</p>\n<p>for (var i = 0; i &lt; d.length; i++) {<br>    var coordString = d[i];<br>    var coordArray = coordString.split(“,”);</p>\n<pre><code>var coord = {\n    x: coordArray[coordArray.length - 2],\n    y: coordArray[coordArray.length - 1]\n};\n\nif (coordArray.length &gt; 2) {\n    coord.path = coordArray[0];\n}\n\ncoords.push(coord);\n</code></pre><p>}</p>\n<p>console.log(coords);</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题描述-在vue中-给svg组件绑定dom元素，因为元素太多，用的jquery或者js原生绑定事件\"><a href=\"#问题描述-在vue中-给svg组件绑定dom元素，因为元素太多，用的jquery或者js原生绑定事件\" class=\"headerlink\" title=\"问题描述:在vue中 给svg组件绑定dom元素，因为元素太多，用的jquery或者js原生绑定事件\"></a>问题描述:在vue中 给svg组件绑定dom元素，因为元素太多，用的jquery或者js原生绑定事件</h3><p>测试过程中，复用svg组件分别为 A、B<br>如果用dom元素绑定点击事件，触发A或者B中任意一个点击事件，会同时触发A和B两个相同元素绑定的点击事件</p>\n<p>暂无解决方案！！！难道要给众多的g标签分别添加绑定事件？</p>\n<p>g标签内很多重复的东西，难道要把众多的g标签用v-for循环出来？</p>\n<p><a href=\"https://stackoverflow.com/questions/25886802/svg-path-convert-into-json\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/25886802/svg-path-convert-into-json</a></p>\n<p>var d = “M 93.00,444.00\\<br>       C 93.00,444.00 114.00,506.00 114.00,506.00\\<br>         102.30,512.28 100.00,518.71 100.00,531.00\\<br>         100.00,531.00 86.00,534.00 86.00,534.00\\<br>         86.00,534.00 68.95,485.00 68.95,485.00\\<br>         68.95,485.00 58.00,452.00 58.00,452.00\\<br>         58.00,452.00 93.00,444.00 93.00,444.00 Z\\<br>       M 75.00,458.00\\<br>       C 75.00,458.00 79.00,458.00 79.00,458.00\\<br>         78.99,466.29 79.26,463.93 76.00,471.00\\<br>         76.00,471.00 86.00,471.00 86.00,471.00\\<br>         82.12,462.60 83.00,464.37 83.00,455.00\\<br>         83.00,455.00 75.00,458.00 75.00,458.00 Z”</p>\n<p>d = d.replace(/\\s{2,}/g, ‘ ‘); // Remove multiple spaces<br>d = d.replace(/([a-zA-Z])\\s[0-9]/g, ‘$1,’); // Add letters to coords group<br>d = d.split(“ “); // Split on space</p>\n<p>var coords = [];</p>\n<p>for (var i = 0; i &lt; d.length; i++) {<br>    var coordString = d[i];<br>    var coordArray = coordString.split(“,”);</p>\n<pre><code>var coord = {\n    x: coordArray[coordArray.length - 2],\n    y: coordArray[coordArray.length - 1]\n};\n\nif (coordArray.length &gt; 2) {\n    coord.path = coordArray[0];\n}\n\ncoords.push(coord);\n</code></pre><p>}</p>\n<p>console.log(coords);</p>\n"},{"title":"window onload","comments":1,"date":"2017-03-09T05:24:32.000Z","_content":"\n## window.onload &&DOMContentLoaded\n一般情况下，DOMContentLoaded事件要在window.onload之前执行，当DOM树构建完成的时候就会执行DOMContentLoaded事件，而window.onload是在页面载入完成的时候，才执行，这其中包括图片等元素。大多数时候我们只是想在DOM树构建完成后，绑定事件到元素，我们并不需要图片元素，加上有时候加载外域图片的速度非常缓慢。\n\n\n随便照了几张大图简单测试了一下在几种方法第一行执行debugger\n- window.onload 在图片资源加载完会后才出debugger\n- DomContentLoaded、$(function(){})和$(document).ready(function(){})一样图片没有没有加载完就会出debugger","source":"_posts/window-onload.md","raw":"---\ntitle: window onload\ncomments: true\ndate: 2017-03-09 13:24:32\ntags:\n---\n\n## window.onload &&DOMContentLoaded\n一般情况下，DOMContentLoaded事件要在window.onload之前执行，当DOM树构建完成的时候就会执行DOMContentLoaded事件，而window.onload是在页面载入完成的时候，才执行，这其中包括图片等元素。大多数时候我们只是想在DOM树构建完成后，绑定事件到元素，我们并不需要图片元素，加上有时候加载外域图片的速度非常缓慢。\n\n\n随便照了几张大图简单测试了一下在几种方法第一行执行debugger\n- window.onload 在图片资源加载完会后才出debugger\n- DomContentLoaded、$(function(){})和$(document).ready(function(){})一样图片没有没有加载完就会出debugger","slug":"window-onload","published":1,"updated":"2017-03-09T05:47:04.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8h000ub6e8w6b2pcrc","content":"<h2 id=\"window-onload-amp-amp-DOMContentLoaded\"><a href=\"#window-onload-amp-amp-DOMContentLoaded\" class=\"headerlink\" title=\"window.onload &amp;&amp;DOMContentLoaded\"></a>window.onload &amp;&amp;DOMContentLoaded</h2><p>一般情况下，DOMContentLoaded事件要在window.onload之前执行，当DOM树构建完成的时候就会执行DOMContentLoaded事件，而window.onload是在页面载入完成的时候，才执行，这其中包括图片等元素。大多数时候我们只是想在DOM树构建完成后，绑定事件到元素，我们并不需要图片元素，加上有时候加载外域图片的速度非常缓慢。</p>\n<p>随便照了几张大图简单测试了一下在几种方法第一行执行debugger</p>\n<ul>\n<li>window.onload 在图片资源加载完会后才出debugger</li>\n<li>DomContentLoaded、$(function(){})和$(document).ready(function(){})一样图片没有没有加载完就会出debugger</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"window-onload-amp-amp-DOMContentLoaded\"><a href=\"#window-onload-amp-amp-DOMContentLoaded\" class=\"headerlink\" title=\"window.onload &amp;&amp;DOMContentLoaded\"></a>window.onload &amp;&amp;DOMContentLoaded</h2><p>一般情况下，DOMContentLoaded事件要在window.onload之前执行，当DOM树构建完成的时候就会执行DOMContentLoaded事件，而window.onload是在页面载入完成的时候，才执行，这其中包括图片等元素。大多数时候我们只是想在DOM树构建完成后，绑定事件到元素，我们并不需要图片元素，加上有时候加载外域图片的速度非常缓慢。</p>\n<p>随便照了几张大图简单测试了一下在几种方法第一行执行debugger</p>\n<ul>\n<li>window.onload 在图片资源加载完会后才出debugger</li>\n<li>DomContentLoaded、$(function(){})和$(document).ready(function(){})一样图片没有没有加载完就会出debugger</li>\n</ul>\n"},{"title":"vim常用快捷键","comments":1,"date":"2018-04-10T07:43:08.000Z","_content":"\n\n##  一、移动光标\nh,j,k,l 上，下，左，右\nctrl-e 移动页面\nctrl-f 上翻一页\nctrl-b 下翻一页\nctrl-u 上翻半页\nctrl-d 下翻半页\nw 跳到下一个字首，按标点或单词分割\nW 跳到下一个字首，长跳，如end-of-line被认为是一个字\ne 跳到下一个字尾\nE 跳到下一个字尾，长跳\nb 跳到上一个字\nB 跳到上一个字，长跳\n0 跳至行首，不管有无缩进，就是跳到第0个字符\n^ 跳至行首的第一个字符\n$ 跳至行尾\ngg 跳至文首\nG 调至文尾\n5gg/5G 调至第5行\ngd 跳至当前光标所在的变量的声明处\nfx 在当前行中找x字符，找到了就跳转至\n; 重复上一个f命令，而不用重复的输入fx\n\\* 查找光标所在处的单词，向下查找\n\\# 查找光标所在处的单词，向上查找\n\n##  二、删除复制\ndd 删除光标所在行\ndw 删除一个字(word)\nd/D删除到行末x删除当前字符X删除前一个字符yy复制一行yw复制一个字y/Y 复制到行末\np 粘贴粘贴板的内容到当前行的下面\nP 粘贴粘贴板的内容到当前行的上面\n<!-- more -->\n##  三、插入模式\ni 从当前光标处进入插入模式\nI 进入插入模式，并置光标于行首\na 追加模式，置光标于当前光标之后\nA 追加模式，置光标于行末\no 在当前行之下新加一行，并进入插入模式\nO 在当前行之上新加一行，并进入插入模式\nEsc 退出插入模式\n\n##  四、编辑\nJ 将下一行和当前行连接为一行\ncc 删除当前行并进入编辑模式\ncw 删除当前字，并进入编辑模式\nc$ 擦除从当前位置至行末的内容，并进入编辑模式\ns 删除当前字符并进入编辑模式\nS 删除光标所在行并进入编辑模式\nxp 交换当前字符和下一个字符\nu 撤销\nctrl+r 重做\n~ 切换大小写，当前字符\n\\>> 将当前行右移一个单位\n<< 将当前行左移一个单位(一个tab符)\n== 自动缩进当前行\n\n##  五、查找替换\n/pattern 向后搜索字符串pattern\n?pattern 向前搜索字符串pattern\n\"\\c\" 忽略大小写\n\"\\C\" 大小写敏感\n\nn 下一个匹配(如果是/搜索，则是向下的下一个，?搜索则是向上的下一个)\nN 上一个匹配(同上)\n:%s/old/new/g 搜索整个文件，将所有的old替换为new\n:%s/old/new/gc 搜索整个文件，将所有的old替换为new，每次都要你确认是否替换\n\n##  六、退出编辑器\n:w 将缓冲区写入文件，即保存修改\n:wq 保存修改并退出\n:x 保存修改并退出\n:q 退出，如果对缓冲区进行过修改，则会提示\n:q! 强制退出，放弃修改\n\n##  七、多文件编辑\nvim file1.. 同时打开多个文件\n:args 显示当前编辑文件\n:next 切换到下个文件\n:prev 切换到前个文件\n:next！ 不保存当前编辑文件并切换到下个文件\n:prev！ 不保存当前编辑文件并切换到上个文件\n:wnext 保存当前编辑文件并切换到下个文件\n:wprev 保存当前编辑文件并切换到上个文件\n:first 定位首文件\n:last 定位尾文件\nctrl+^ 快速在最近打开的两个文件间切换\n:split[sp] 把当前文件水平分割\n:split file 把当前窗口水平分割, file\n:vsplit[vsp] file 把当前窗口垂直分割, file\n:new file 同split file\n:close 关闭当前窗口\n:only 只显示当前窗口, 关闭所有其他的窗口\n:all 打开所有的窗口\n:vertical all 打开所有的窗口, 垂直打开\n:qall 对所有窗口执行：q操作\n:qall! 对所有窗口执行：q!操作\n:wall 对所有窗口执行：w操作\n:wqall 对所有窗口执行：wq操作\nctrl-w h 跳转到左边的窗口\nctrl-w j 跳转到下面的窗口\nctrl-w k 跳转到上面的窗口\nctrl-w l 跳转到右边的窗口\nctrl-w t 跳转到最顶上的窗口\nctrl-w b 跳转到最底下的窗口\n\n##  八、多标签编辑\n:tabedit file 在新标签中打开文件file\n:tab split file 在新标签中打开文件file\n:tabp 切换到前一个标签\n:tabn 切换到后一个标签\n:tabc 关闭当前标签\n:tabo 关闭其他标签\ngt 到下一个tab\ngT 到上一个tab\n0gt 跳到第一个tab\n5gt 跳到第五个tab\n\n##  九、执行shell命令\n1、在命令模式下输入\":sh\"，可以运行相当于在字符模式下，到输入结束想回到VIM编辑器中用exit，ctrl+D返回VIM编辑器\n2、可以\"!command\"，运行结束后自动回到VIM编辑器中\n3、用“Ctrl+Z“回到shell，用fg返回编辑\n4、:!make -> 直接在当前目录下运行make指令\n\n##  十、VIM启动项\n-o[n] 以水平分屏的方式打开多个文件\n-O[n] 以垂直分屏的方式打开多个文件\n\n##  十一、自动排版\n在粘贴了一些代码之后，vim变得比较乱，只要执行gg=G就能搞定\n\n##  十二、如何在vim中编译程序\n在vim中可以完成make,而且可以将编译的结果也显示在vim里，先执行 :copen 命令，将结果输出的窗口打开，然后执行 :make\n编译后的结果就显示在了copen打开的小窗口里了，而且用鼠标双击错误信息，就会跳转到发生错误的行。\n\n##  十三、buffer操作\n1、buffer状态\n\\- （非活动的缓冲区）\na （当前被激活缓冲区）\nh （隐藏的缓冲区）\n% （当前的缓冲区）\n\\# （交换缓冲区）\n= （只读缓冲区）\n\\+ （已经更改的缓冲区）\n\n##  十四、 VIM 操作目录\n1.打开目录\nvim .\nvim a-path/\n\n2.以下操作在操作目录时生效\np,P,t,u,U,x,v,o,r,s\n\nc 使当前打开的目录成为当前目录\nd 创建目录\n% 创建文件\nD 删除文件/目录\n\\- 转到上层目录\ngb 转到上一个 bookmarked directory\ni 改变目录文件列表方式\n^l 刷新当前打开的目录\n\nmf - 标记文件\nmu - unmark all marked files\nmz - Compress/decompress marked files\ngh 显示/不显示隐藏文件( dot-files)\n^h 编辑隐藏文件列表\na 转换显示模式, all - hide - unhide\nqf diplay infomation about file\nqb list the bookmarked directories and directory traversal history\ngi Display information on file\n\nmb\nmc\nmd - 将标记的文件(mf标记文件)使用 diff 模式\nme - 编辑标记的文件,只显示一个，其余放入 buffer 中\nmh\nmm - move marked files to marked-file target directory\nmc - copy\nmp\nmr\nmt\n\nvim 中复制,移动文件\n1, mt - 移动到的目录\n2, mf - 标记要移动的文件\n3, mc - 移动/复制\n\nR 移动文件\n\n打开当前编辑文件的目录\n:Explore\n:Hexplore\n:Nexplore\n:Pexplore\n:Sexplore\n:Texplore\n:Vexplore","source":"_posts/vim常用快捷键.md","raw":"---\ntitle: vim常用快捷键\ncomments: true\ndate: 2018-04-10 15:43:08\ntags:\n---\n\n\n##  一、移动光标\nh,j,k,l 上，下，左，右\nctrl-e 移动页面\nctrl-f 上翻一页\nctrl-b 下翻一页\nctrl-u 上翻半页\nctrl-d 下翻半页\nw 跳到下一个字首，按标点或单词分割\nW 跳到下一个字首，长跳，如end-of-line被认为是一个字\ne 跳到下一个字尾\nE 跳到下一个字尾，长跳\nb 跳到上一个字\nB 跳到上一个字，长跳\n0 跳至行首，不管有无缩进，就是跳到第0个字符\n^ 跳至行首的第一个字符\n$ 跳至行尾\ngg 跳至文首\nG 调至文尾\n5gg/5G 调至第5行\ngd 跳至当前光标所在的变量的声明处\nfx 在当前行中找x字符，找到了就跳转至\n; 重复上一个f命令，而不用重复的输入fx\n\\* 查找光标所在处的单词，向下查找\n\\# 查找光标所在处的单词，向上查找\n\n##  二、删除复制\ndd 删除光标所在行\ndw 删除一个字(word)\nd/D删除到行末x删除当前字符X删除前一个字符yy复制一行yw复制一个字y/Y 复制到行末\np 粘贴粘贴板的内容到当前行的下面\nP 粘贴粘贴板的内容到当前行的上面\n<!-- more -->\n##  三、插入模式\ni 从当前光标处进入插入模式\nI 进入插入模式，并置光标于行首\na 追加模式，置光标于当前光标之后\nA 追加模式，置光标于行末\no 在当前行之下新加一行，并进入插入模式\nO 在当前行之上新加一行，并进入插入模式\nEsc 退出插入模式\n\n##  四、编辑\nJ 将下一行和当前行连接为一行\ncc 删除当前行并进入编辑模式\ncw 删除当前字，并进入编辑模式\nc$ 擦除从当前位置至行末的内容，并进入编辑模式\ns 删除当前字符并进入编辑模式\nS 删除光标所在行并进入编辑模式\nxp 交换当前字符和下一个字符\nu 撤销\nctrl+r 重做\n~ 切换大小写，当前字符\n\\>> 将当前行右移一个单位\n<< 将当前行左移一个单位(一个tab符)\n== 自动缩进当前行\n\n##  五、查找替换\n/pattern 向后搜索字符串pattern\n?pattern 向前搜索字符串pattern\n\"\\c\" 忽略大小写\n\"\\C\" 大小写敏感\n\nn 下一个匹配(如果是/搜索，则是向下的下一个，?搜索则是向上的下一个)\nN 上一个匹配(同上)\n:%s/old/new/g 搜索整个文件，将所有的old替换为new\n:%s/old/new/gc 搜索整个文件，将所有的old替换为new，每次都要你确认是否替换\n\n##  六、退出编辑器\n:w 将缓冲区写入文件，即保存修改\n:wq 保存修改并退出\n:x 保存修改并退出\n:q 退出，如果对缓冲区进行过修改，则会提示\n:q! 强制退出，放弃修改\n\n##  七、多文件编辑\nvim file1.. 同时打开多个文件\n:args 显示当前编辑文件\n:next 切换到下个文件\n:prev 切换到前个文件\n:next！ 不保存当前编辑文件并切换到下个文件\n:prev！ 不保存当前编辑文件并切换到上个文件\n:wnext 保存当前编辑文件并切换到下个文件\n:wprev 保存当前编辑文件并切换到上个文件\n:first 定位首文件\n:last 定位尾文件\nctrl+^ 快速在最近打开的两个文件间切换\n:split[sp] 把当前文件水平分割\n:split file 把当前窗口水平分割, file\n:vsplit[vsp] file 把当前窗口垂直分割, file\n:new file 同split file\n:close 关闭当前窗口\n:only 只显示当前窗口, 关闭所有其他的窗口\n:all 打开所有的窗口\n:vertical all 打开所有的窗口, 垂直打开\n:qall 对所有窗口执行：q操作\n:qall! 对所有窗口执行：q!操作\n:wall 对所有窗口执行：w操作\n:wqall 对所有窗口执行：wq操作\nctrl-w h 跳转到左边的窗口\nctrl-w j 跳转到下面的窗口\nctrl-w k 跳转到上面的窗口\nctrl-w l 跳转到右边的窗口\nctrl-w t 跳转到最顶上的窗口\nctrl-w b 跳转到最底下的窗口\n\n##  八、多标签编辑\n:tabedit file 在新标签中打开文件file\n:tab split file 在新标签中打开文件file\n:tabp 切换到前一个标签\n:tabn 切换到后一个标签\n:tabc 关闭当前标签\n:tabo 关闭其他标签\ngt 到下一个tab\ngT 到上一个tab\n0gt 跳到第一个tab\n5gt 跳到第五个tab\n\n##  九、执行shell命令\n1、在命令模式下输入\":sh\"，可以运行相当于在字符模式下，到输入结束想回到VIM编辑器中用exit，ctrl+D返回VIM编辑器\n2、可以\"!command\"，运行结束后自动回到VIM编辑器中\n3、用“Ctrl+Z“回到shell，用fg返回编辑\n4、:!make -> 直接在当前目录下运行make指令\n\n##  十、VIM启动项\n-o[n] 以水平分屏的方式打开多个文件\n-O[n] 以垂直分屏的方式打开多个文件\n\n##  十一、自动排版\n在粘贴了一些代码之后，vim变得比较乱，只要执行gg=G就能搞定\n\n##  十二、如何在vim中编译程序\n在vim中可以完成make,而且可以将编译的结果也显示在vim里，先执行 :copen 命令，将结果输出的窗口打开，然后执行 :make\n编译后的结果就显示在了copen打开的小窗口里了，而且用鼠标双击错误信息，就会跳转到发生错误的行。\n\n##  十三、buffer操作\n1、buffer状态\n\\- （非活动的缓冲区）\na （当前被激活缓冲区）\nh （隐藏的缓冲区）\n% （当前的缓冲区）\n\\# （交换缓冲区）\n= （只读缓冲区）\n\\+ （已经更改的缓冲区）\n\n##  十四、 VIM 操作目录\n1.打开目录\nvim .\nvim a-path/\n\n2.以下操作在操作目录时生效\np,P,t,u,U,x,v,o,r,s\n\nc 使当前打开的目录成为当前目录\nd 创建目录\n% 创建文件\nD 删除文件/目录\n\\- 转到上层目录\ngb 转到上一个 bookmarked directory\ni 改变目录文件列表方式\n^l 刷新当前打开的目录\n\nmf - 标记文件\nmu - unmark all marked files\nmz - Compress/decompress marked files\ngh 显示/不显示隐藏文件( dot-files)\n^h 编辑隐藏文件列表\na 转换显示模式, all - hide - unhide\nqf diplay infomation about file\nqb list the bookmarked directories and directory traversal history\ngi Display information on file\n\nmb\nmc\nmd - 将标记的文件(mf标记文件)使用 diff 模式\nme - 编辑标记的文件,只显示一个，其余放入 buffer 中\nmh\nmm - move marked files to marked-file target directory\nmc - copy\nmp\nmr\nmt\n\nvim 中复制,移动文件\n1, mt - 移动到的目录\n2, mf - 标记要移动的文件\n3, mc - 移动/复制\n\nR 移动文件\n\n打开当前编辑文件的目录\n:Explore\n:Hexplore\n:Nexplore\n:Pexplore\n:Sexplore\n:Texplore\n:Vexplore","slug":"vim常用快捷键","published":1,"updated":"2018-09-05T18:17:29.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8i000vb6e837qc7szn","content":"<h2 id=\"一、移动光标\"><a href=\"#一、移动光标\" class=\"headerlink\" title=\"一、移动光标\"></a>一、移动光标</h2><p>h,j,k,l 上，下，左，右<br>ctrl-e 移动页面<br>ctrl-f 上翻一页<br>ctrl-b 下翻一页<br>ctrl-u 上翻半页<br>ctrl-d 下翻半页<br>w 跳到下一个字首，按标点或单词分割<br>W 跳到下一个字首，长跳，如end-of-line被认为是一个字<br>e 跳到下一个字尾<br>E 跳到下一个字尾，长跳<br>b 跳到上一个字<br>B 跳到上一个字，长跳<br>0 跳至行首，不管有无缩进，就是跳到第0个字符<br>^ 跳至行首的第一个字符<br>$ 跳至行尾<br>gg 跳至文首<br>G 调至文尾<br>5gg/5G 调至第5行<br>gd 跳至当前光标所在的变量的声明处<br>fx 在当前行中找x字符，找到了就跳转至<br>; 重复上一个f命令，而不用重复的输入fx<br>* 查找光标所在处的单词，向下查找<br># 查找光标所在处的单词，向上查找</p>\n<h2 id=\"二、删除复制\"><a href=\"#二、删除复制\" class=\"headerlink\" title=\"二、删除复制\"></a>二、删除复制</h2><p>dd 删除光标所在行<br>dw 删除一个字(word)<br>d/D删除到行末x删除当前字符X删除前一个字符yy复制一行yw复制一个字y/Y 复制到行末<br>p 粘贴粘贴板的内容到当前行的下面<br>P 粘贴粘贴板的内容到当前行的上面<br><a id=\"more\"></a></p>\n<h2 id=\"三、插入模式\"><a href=\"#三、插入模式\" class=\"headerlink\" title=\"三、插入模式\"></a>三、插入模式</h2><p>i 从当前光标处进入插入模式<br>I 进入插入模式，并置光标于行首<br>a 追加模式，置光标于当前光标之后<br>A 追加模式，置光标于行末<br>o 在当前行之下新加一行，并进入插入模式<br>O 在当前行之上新加一行，并进入插入模式<br>Esc 退出插入模式</p>\n<h2 id=\"四、编辑\"><a href=\"#四、编辑\" class=\"headerlink\" title=\"四、编辑\"></a>四、编辑</h2><p>J 将下一行和当前行连接为一行<br>cc 删除当前行并进入编辑模式<br>cw 删除当前字，并进入编辑模式<br>c$ 擦除从当前位置至行末的内容，并进入编辑模式<br>s 删除当前字符并进入编辑模式<br>S 删除光标所在行并进入编辑模式<br>xp 交换当前字符和下一个字符<br>u 撤销<br>ctrl+r 重做<br>~ 切换大小写，当前字符<br>>&gt; 将当前行右移一个单位<br>&lt;&lt; 将当前行左移一个单位(一个tab符)<br>== 自动缩进当前行</p>\n<h2 id=\"五、查找替换\"><a href=\"#五、查找替换\" class=\"headerlink\" title=\"五、查找替换\"></a>五、查找替换</h2><p>/pattern 向后搜索字符串pattern<br>?pattern 向前搜索字符串pattern<br>“\\c” 忽略大小写<br>“\\C” 大小写敏感</p>\n<p>n 下一个匹配(如果是/搜索，则是向下的下一个，?搜索则是向上的下一个)<br>N 上一个匹配(同上)<br>:%s/old/new/g 搜索整个文件，将所有的old替换为new<br>:%s/old/new/gc 搜索整个文件，将所有的old替换为new，每次都要你确认是否替换</p>\n<h2 id=\"六、退出编辑器\"><a href=\"#六、退出编辑器\" class=\"headerlink\" title=\"六、退出编辑器\"></a>六、退出编辑器</h2><p>:w 将缓冲区写入文件，即保存修改<br>:wq 保存修改并退出<br>:x 保存修改并退出<br>:q 退出，如果对缓冲区进行过修改，则会提示<br>:q! 强制退出，放弃修改</p>\n<h2 id=\"七、多文件编辑\"><a href=\"#七、多文件编辑\" class=\"headerlink\" title=\"七、多文件编辑\"></a>七、多文件编辑</h2><p>vim file1.. 同时打开多个文件<br>:args 显示当前编辑文件<br>:next 切换到下个文件<br>:prev 切换到前个文件<br>:next！ 不保存当前编辑文件并切换到下个文件<br>:prev！ 不保存当前编辑文件并切换到上个文件<br>:wnext 保存当前编辑文件并切换到下个文件<br>:wprev 保存当前编辑文件并切换到上个文件<br>:first 定位首文件<br>:last 定位尾文件<br>ctrl+^ 快速在最近打开的两个文件间切换<br>:split[sp] 把当前文件水平分割<br>:split file 把当前窗口水平分割, file<br>:vsplit[vsp] file 把当前窗口垂直分割, file<br>:new file 同split file<br>:close 关闭当前窗口<br>:only 只显示当前窗口, 关闭所有其他的窗口<br>:all 打开所有的窗口<br>:vertical all 打开所有的窗口, 垂直打开<br>:qall 对所有窗口执行：q操作<br>:qall! 对所有窗口执行：q!操作<br>:wall 对所有窗口执行：w操作<br>:wqall 对所有窗口执行：wq操作<br>ctrl-w h 跳转到左边的窗口<br>ctrl-w j 跳转到下面的窗口<br>ctrl-w k 跳转到上面的窗口<br>ctrl-w l 跳转到右边的窗口<br>ctrl-w t 跳转到最顶上的窗口<br>ctrl-w b 跳转到最底下的窗口</p>\n<h2 id=\"八、多标签编辑\"><a href=\"#八、多标签编辑\" class=\"headerlink\" title=\"八、多标签编辑\"></a>八、多标签编辑</h2><p>:tabedit file 在新标签中打开文件file<br>:tab split file 在新标签中打开文件file<br>:tabp 切换到前一个标签<br>:tabn 切换到后一个标签<br>:tabc 关闭当前标签<br>:tabo 关闭其他标签<br>gt 到下一个tab<br>gT 到上一个tab<br>0gt 跳到第一个tab<br>5gt 跳到第五个tab</p>\n<h2 id=\"九、执行shell命令\"><a href=\"#九、执行shell命令\" class=\"headerlink\" title=\"九、执行shell命令\"></a>九、执行shell命令</h2><p>1、在命令模式下输入”:sh”，可以运行相当于在字符模式下，到输入结束想回到VIM编辑器中用exit，ctrl+D返回VIM编辑器<br>2、可以”!command”，运行结束后自动回到VIM编辑器中<br>3、用“Ctrl+Z“回到shell，用fg返回编辑<br>4、:!make -&gt; 直接在当前目录下运行make指令</p>\n<h2 id=\"十、VIM启动项\"><a href=\"#十、VIM启动项\" class=\"headerlink\" title=\"十、VIM启动项\"></a>十、VIM启动项</h2><p>-o[n] 以水平分屏的方式打开多个文件<br>-O[n] 以垂直分屏的方式打开多个文件</p>\n<h2 id=\"十一、自动排版\"><a href=\"#十一、自动排版\" class=\"headerlink\" title=\"十一、自动排版\"></a>十一、自动排版</h2><p>在粘贴了一些代码之后，vim变得比较乱，只要执行gg=G就能搞定</p>\n<h2 id=\"十二、如何在vim中编译程序\"><a href=\"#十二、如何在vim中编译程序\" class=\"headerlink\" title=\"十二、如何在vim中编译程序\"></a>十二、如何在vim中编译程序</h2><p>在vim中可以完成make,而且可以将编译的结果也显示在vim里，先执行 :copen 命令，将结果输出的窗口打开，然后执行 :make<br>编译后的结果就显示在了copen打开的小窗口里了，而且用鼠标双击错误信息，就会跳转到发生错误的行。</p>\n<h2 id=\"十三、buffer操作\"><a href=\"#十三、buffer操作\" class=\"headerlink\" title=\"十三、buffer操作\"></a>十三、buffer操作</h2><p>1、buffer状态<br>- （非活动的缓冲区）<br>a （当前被激活缓冲区）<br>h （隐藏的缓冲区）<br>% （当前的缓冲区）<br># （交换缓冲区）<br>= （只读缓冲区）<br>+ （已经更改的缓冲区）</p>\n<h2 id=\"十四、-VIM-操作目录\"><a href=\"#十四、-VIM-操作目录\" class=\"headerlink\" title=\"十四、 VIM 操作目录\"></a>十四、 VIM 操作目录</h2><p>1.打开目录<br>vim .<br>vim a-path/</p>\n<p>2.以下操作在操作目录时生效<br>p,P,t,u,U,x,v,o,r,s</p>\n<p>c 使当前打开的目录成为当前目录<br>d 创建目录<br>% 创建文件<br>D 删除文件/目录<br>- 转到上层目录<br>gb 转到上一个 bookmarked directory<br>i 改变目录文件列表方式<br>^l 刷新当前打开的目录</p>\n<p>mf - 标记文件<br>mu - unmark all marked files<br>mz - Compress/decompress marked files<br>gh 显示/不显示隐藏文件( dot-files)<br>^h 编辑隐藏文件列表<br>a 转换显示模式, all - hide - unhide<br>qf diplay infomation about file<br>qb list the bookmarked directories and directory traversal history<br>gi Display information on file</p>\n<p>mb<br>mc<br>md - 将标记的文件(mf标记文件)使用 diff 模式<br>me - 编辑标记的文件,只显示一个，其余放入 buffer 中<br>mh<br>mm - move marked files to marked-file target directory<br>mc - copy<br>mp<br>mr<br>mt</p>\n<p>vim 中复制,移动文件<br>1, mt - 移动到的目录<br>2, mf - 标记要移动的文件<br>3, mc - 移动/复制</p>\n<p>R 移动文件</p>\n<p>打开当前编辑文件的目录<br>:Explore<br>:Hexplore<br>:Nexplore<br>:Pexplore<br>:Sexplore<br>:Texplore<br>:Vexplore</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、移动光标\"><a href=\"#一、移动光标\" class=\"headerlink\" title=\"一、移动光标\"></a>一、移动光标</h2><p>h,j,k,l 上，下，左，右<br>ctrl-e 移动页面<br>ctrl-f 上翻一页<br>ctrl-b 下翻一页<br>ctrl-u 上翻半页<br>ctrl-d 下翻半页<br>w 跳到下一个字首，按标点或单词分割<br>W 跳到下一个字首，长跳，如end-of-line被认为是一个字<br>e 跳到下一个字尾<br>E 跳到下一个字尾，长跳<br>b 跳到上一个字<br>B 跳到上一个字，长跳<br>0 跳至行首，不管有无缩进，就是跳到第0个字符<br>^ 跳至行首的第一个字符<br>$ 跳至行尾<br>gg 跳至文首<br>G 调至文尾<br>5gg/5G 调至第5行<br>gd 跳至当前光标所在的变量的声明处<br>fx 在当前行中找x字符，找到了就跳转至<br>; 重复上一个f命令，而不用重复的输入fx<br>* 查找光标所在处的单词，向下查找<br># 查找光标所在处的单词，向上查找</p>\n<h2 id=\"二、删除复制\"><a href=\"#二、删除复制\" class=\"headerlink\" title=\"二、删除复制\"></a>二、删除复制</h2><p>dd 删除光标所在行<br>dw 删除一个字(word)<br>d/D删除到行末x删除当前字符X删除前一个字符yy复制一行yw复制一个字y/Y 复制到行末<br>p 粘贴粘贴板的内容到当前行的下面<br>P 粘贴粘贴板的内容到当前行的上面<br></p>","more":"<p></p>\n<h2 id=\"三、插入模式\"><a href=\"#三、插入模式\" class=\"headerlink\" title=\"三、插入模式\"></a>三、插入模式</h2><p>i 从当前光标处进入插入模式<br>I 进入插入模式，并置光标于行首<br>a 追加模式，置光标于当前光标之后<br>A 追加模式，置光标于行末<br>o 在当前行之下新加一行，并进入插入模式<br>O 在当前行之上新加一行，并进入插入模式<br>Esc 退出插入模式</p>\n<h2 id=\"四、编辑\"><a href=\"#四、编辑\" class=\"headerlink\" title=\"四、编辑\"></a>四、编辑</h2><p>J 将下一行和当前行连接为一行<br>cc 删除当前行并进入编辑模式<br>cw 删除当前字，并进入编辑模式<br>c$ 擦除从当前位置至行末的内容，并进入编辑模式<br>s 删除当前字符并进入编辑模式<br>S 删除光标所在行并进入编辑模式<br>xp 交换当前字符和下一个字符<br>u 撤销<br>ctrl+r 重做<br>~ 切换大小写，当前字符<br>>&gt; 将当前行右移一个单位<br>&lt;&lt; 将当前行左移一个单位(一个tab符)<br>== 自动缩进当前行</p>\n<h2 id=\"五、查找替换\"><a href=\"#五、查找替换\" class=\"headerlink\" title=\"五、查找替换\"></a>五、查找替换</h2><p>/pattern 向后搜索字符串pattern<br>?pattern 向前搜索字符串pattern<br>“\\c” 忽略大小写<br>“\\C” 大小写敏感</p>\n<p>n 下一个匹配(如果是/搜索，则是向下的下一个，?搜索则是向上的下一个)<br>N 上一个匹配(同上)<br>:%s/old/new/g 搜索整个文件，将所有的old替换为new<br>:%s/old/new/gc 搜索整个文件，将所有的old替换为new，每次都要你确认是否替换</p>\n<h2 id=\"六、退出编辑器\"><a href=\"#六、退出编辑器\" class=\"headerlink\" title=\"六、退出编辑器\"></a>六、退出编辑器</h2><p>:w 将缓冲区写入文件，即保存修改<br>:wq 保存修改并退出<br>:x 保存修改并退出<br>:q 退出，如果对缓冲区进行过修改，则会提示<br>:q! 强制退出，放弃修改</p>\n<h2 id=\"七、多文件编辑\"><a href=\"#七、多文件编辑\" class=\"headerlink\" title=\"七、多文件编辑\"></a>七、多文件编辑</h2><p>vim file1.. 同时打开多个文件<br>:args 显示当前编辑文件<br>:next 切换到下个文件<br>:prev 切换到前个文件<br>:next！ 不保存当前编辑文件并切换到下个文件<br>:prev！ 不保存当前编辑文件并切换到上个文件<br>:wnext 保存当前编辑文件并切换到下个文件<br>:wprev 保存当前编辑文件并切换到上个文件<br>:first 定位首文件<br>:last 定位尾文件<br>ctrl+^ 快速在最近打开的两个文件间切换<br>:split[sp] 把当前文件水平分割<br>:split file 把当前窗口水平分割, file<br>:vsplit[vsp] file 把当前窗口垂直分割, file<br>:new file 同split file<br>:close 关闭当前窗口<br>:only 只显示当前窗口, 关闭所有其他的窗口<br>:all 打开所有的窗口<br>:vertical all 打开所有的窗口, 垂直打开<br>:qall 对所有窗口执行：q操作<br>:qall! 对所有窗口执行：q!操作<br>:wall 对所有窗口执行：w操作<br>:wqall 对所有窗口执行：wq操作<br>ctrl-w h 跳转到左边的窗口<br>ctrl-w j 跳转到下面的窗口<br>ctrl-w k 跳转到上面的窗口<br>ctrl-w l 跳转到右边的窗口<br>ctrl-w t 跳转到最顶上的窗口<br>ctrl-w b 跳转到最底下的窗口</p>\n<h2 id=\"八、多标签编辑\"><a href=\"#八、多标签编辑\" class=\"headerlink\" title=\"八、多标签编辑\"></a>八、多标签编辑</h2><p>:tabedit file 在新标签中打开文件file<br>:tab split file 在新标签中打开文件file<br>:tabp 切换到前一个标签<br>:tabn 切换到后一个标签<br>:tabc 关闭当前标签<br>:tabo 关闭其他标签<br>gt 到下一个tab<br>gT 到上一个tab<br>0gt 跳到第一个tab<br>5gt 跳到第五个tab</p>\n<h2 id=\"九、执行shell命令\"><a href=\"#九、执行shell命令\" class=\"headerlink\" title=\"九、执行shell命令\"></a>九、执行shell命令</h2><p>1、在命令模式下输入”:sh”，可以运行相当于在字符模式下，到输入结束想回到VIM编辑器中用exit，ctrl+D返回VIM编辑器<br>2、可以”!command”，运行结束后自动回到VIM编辑器中<br>3、用“Ctrl+Z“回到shell，用fg返回编辑<br>4、:!make -&gt; 直接在当前目录下运行make指令</p>\n<h2 id=\"十、VIM启动项\"><a href=\"#十、VIM启动项\" class=\"headerlink\" title=\"十、VIM启动项\"></a>十、VIM启动项</h2><p>-o[n] 以水平分屏的方式打开多个文件<br>-O[n] 以垂直分屏的方式打开多个文件</p>\n<h2 id=\"十一、自动排版\"><a href=\"#十一、自动排版\" class=\"headerlink\" title=\"十一、自动排版\"></a>十一、自动排版</h2><p>在粘贴了一些代码之后，vim变得比较乱，只要执行gg=G就能搞定</p>\n<h2 id=\"十二、如何在vim中编译程序\"><a href=\"#十二、如何在vim中编译程序\" class=\"headerlink\" title=\"十二、如何在vim中编译程序\"></a>十二、如何在vim中编译程序</h2><p>在vim中可以完成make,而且可以将编译的结果也显示在vim里，先执行 :copen 命令，将结果输出的窗口打开，然后执行 :make<br>编译后的结果就显示在了copen打开的小窗口里了，而且用鼠标双击错误信息，就会跳转到发生错误的行。</p>\n<h2 id=\"十三、buffer操作\"><a href=\"#十三、buffer操作\" class=\"headerlink\" title=\"十三、buffer操作\"></a>十三、buffer操作</h2><p>1、buffer状态<br>- （非活动的缓冲区）<br>a （当前被激活缓冲区）<br>h （隐藏的缓冲区）<br>% （当前的缓冲区）<br># （交换缓冲区）<br>= （只读缓冲区）<br>+ （已经更改的缓冲区）</p>\n<h2 id=\"十四、-VIM-操作目录\"><a href=\"#十四、-VIM-操作目录\" class=\"headerlink\" title=\"十四、 VIM 操作目录\"></a>十四、 VIM 操作目录</h2><p>1.打开目录<br>vim .<br>vim a-path/</p>\n<p>2.以下操作在操作目录时生效<br>p,P,t,u,U,x,v,o,r,s</p>\n<p>c 使当前打开的目录成为当前目录<br>d 创建目录<br>% 创建文件<br>D 删除文件/目录<br>- 转到上层目录<br>gb 转到上一个 bookmarked directory<br>i 改变目录文件列表方式<br>^l 刷新当前打开的目录</p>\n<p>mf - 标记文件<br>mu - unmark all marked files<br>mz - Compress/decompress marked files<br>gh 显示/不显示隐藏文件( dot-files)<br>^h 编辑隐藏文件列表<br>a 转换显示模式, all - hide - unhide<br>qf diplay infomation about file<br>qb list the bookmarked directories and directory traversal history<br>gi Display information on file</p>\n<p>mb<br>mc<br>md - 将标记的文件(mf标记文件)使用 diff 模式<br>me - 编辑标记的文件,只显示一个，其余放入 buffer 中<br>mh<br>mm - move marked files to marked-file target directory<br>mc - copy<br>mp<br>mr<br>mt</p>\n<p>vim 中复制,移动文件<br>1, mt - 移动到的目录<br>2, mf - 标记要移动的文件<br>3, mc - 移动/复制</p>\n<p>R 移动文件</p>\n<p>打开当前编辑文件的目录<br>:Explore<br>:Hexplore<br>:Nexplore<br>:Pexplore<br>:Sexplore<br>:Texplore<br>:Vexplore</p>"},{"title":"使用iTerm2快捷连接SSH","comments":1,"date":"2018-04-10T07:36:31.000Z","_content":"\n\n# https://blog.csdn.net/fangxiaoji/article/details/50710220\n\n# https://blog.csdn.net/ljp812184246/article/details/52585650\n\n## 注意事项\n\n* chmod a+x filename\n* 通过 ./filename 执行","source":"_posts/使用iTerm2快捷连接SSH.md","raw":"---\ntitle: 使用iTerm2快捷连接SSH\ncomments: true\ndate: 2018-04-10 15:36:31\ntags:\n---\n\n\n# https://blog.csdn.net/fangxiaoji/article/details/50710220\n\n# https://blog.csdn.net/ljp812184246/article/details/52585650\n\n## 注意事项\n\n* chmod a+x filename\n* 通过 ./filename 执行","slug":"使用iTerm2快捷连接SSH","published":1,"updated":"2018-09-05T18:17:29.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8i000wb6e85ff9vw5h","content":"<h1 id=\"https-blog-csdn-net-fangxiaoji-article-details-50710220\"><a href=\"#https-blog-csdn-net-fangxiaoji-article-details-50710220\" class=\"headerlink\" title=\"https://blog.csdn.net/fangxiaoji/article/details/50710220\"></a><a href=\"https://blog.csdn.net/fangxiaoji/article/details/50710220\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/fangxiaoji/article/details/50710220</a></h1><h1 id=\"https-blog-csdn-net-ljp812184246-article-details-52585650\"><a href=\"#https-blog-csdn-net-ljp812184246-article-details-52585650\" class=\"headerlink\" title=\"https://blog.csdn.net/ljp812184246/article/details/52585650\"></a><a href=\"https://blog.csdn.net/ljp812184246/article/details/52585650\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ljp812184246/article/details/52585650</a></h1><h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>chmod a+x filename</li>\n<li>通过 ./filename 执行</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"https-blog-csdn-net-fangxiaoji-article-details-50710220\"><a href=\"#https-blog-csdn-net-fangxiaoji-article-details-50710220\" class=\"headerlink\" title=\"https://blog.csdn.net/fangxiaoji/article/details/50710220\"></a><a href=\"https://blog.csdn.net/fangxiaoji/article/details/50710220\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/fangxiaoji/article/details/50710220</a></h1><h1 id=\"https-blog-csdn-net-ljp812184246-article-details-52585650\"><a href=\"#https-blog-csdn-net-ljp812184246-article-details-52585650\" class=\"headerlink\" title=\"https://blog.csdn.net/ljp812184246/article/details/52585650\"></a><a href=\"https://blog.csdn.net/ljp812184246/article/details/52585650\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/ljp812184246/article/details/52585650</a></h1><h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><ul>\n<li>chmod a+x filename</li>\n<li>通过 ./filename 执行</li>\n</ul>\n"},{"title":"关于跨域","comments":1,"date":"2017-05-24T10:17:28.000Z","_content":"\n>https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651552209&idx=1&sn=23eec5e98c4c9bed2417e78bfc57e320\n\n>http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html\n\n十、阅读材料\n　　1. Introduction to XMLHttpRequest Level 2： 新功能的综合介绍。\n　　2. New Tricks in XMLHttpRequest 2：一些用法的介绍。\n　　3. Using XMLHttpRequest：一些高级用法，主要针对Firefox浏览器。\n　　4. [HTTP Access Control：CORS综述。 ](https://dev.opera.com/articles/dom-access-control-using-cors/)\n　　5. DOM access control using cross-origin resource sharing：CORS的9种HTTP头信息\n　　6. Server-Side Access Control：服务器端CORS设置。\n　　7. Enable CORS：服务端CORS设置。\n\n\n\n\n\n### 报错\nXMLHttpRequest cannot load https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'https://mail.qq.com' is therefore not allowed access.\n\n\n## 测试\nhttp://www.qq.com/ 访问 http://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json 跑通 无报错\nhttp://www.qq.com/ 访问 https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json 跑通 报错 返回值不能用\nhttps 访问 https (二级域名跨域) 跑通报错\nhttps 访问 https (二级域名跨域) 跑通报错\n\n\n\n# 阅读材料-4 CORS综述\n\n## Introduction 介绍\nSame-origin policies are a central security concept of modern browsers. In a web context, they prevent a script hosted at one origin — meaning the same protocol, domain name, and port — from reading from or writing to the DOM of another.\n\n相同的原产地政策是现代浏览器的核心安全理念。在Web上下文中，它们防止从一个来源托管的脚本，意思是相同的协议、域名和端口。\n\n<!-- more -->\n\nThis restriction is sensible and useful most of the time. Without a same-origin policy, a script hosted on http://foo.example could hijack cookie data or sensitive document information from http://bar.example and redirect it to http://evilsite.example.\n\n这种限制是明智的和有用的大部分时间。没有同源策略，一个托管在http://foo.example脚本可以劫持cookie数据或从http://bar.example敏感文件信息并将其重定向到http://evilsite.example。\n\n\nSometimes, however, a same-origin policy can be burdensome. Making requests across subdomains, for example, is prohibited by a same-origin policy. You also can't use XMLHttpRequest to pull in JSON data from a third-party API. To make matters worse, workarounds such as JSONP or document.domain can leave us vulnerable to XSS attacks.\n\n然而，有时，相同的原产地政策可能是累赘。例如，在同一个原产地政策禁止跨子域的请求。你也不能使用XMLHttpRequest拉从一个第三方API的JSON数据。更糟糕的是，解决方法如json或document.domain可以让我们容易受到XSS攻击。\n\n\nWhat we need, then, is a mechanism for requesting data across origins, but with the ability to deny requests that don't come from the right source. This is the problem that Cross-Origin Resource Sharing (or CORS) solves.\n\n然后，我们需要的是一个机制，要求跨来源的数据，但有能力拒绝的请求，不来自正确的来源。这是跨域资源共享问题的解决（或CORS）。\n\n\nCross-Origin Resource Sharing is new in Opera 12. Support is also available in Chrome, Safari, Firefox, and the forthcoming Internet Explorer 10.\n\n跨起源资源共享歌剧12新。支持也可在Chrome，Safari，Firefox，以及即将到来的Internet Explorer 10。\n","source":"_posts/关于跨域.md","raw":"---\ntitle: 关于跨域\ncomments: true\ndate: 2017-05-24 18:17:28\ntags:\n---\n\n>https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651552209&idx=1&sn=23eec5e98c4c9bed2417e78bfc57e320\n\n>http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html\n\n十、阅读材料\n　　1. Introduction to XMLHttpRequest Level 2： 新功能的综合介绍。\n　　2. New Tricks in XMLHttpRequest 2：一些用法的介绍。\n　　3. Using XMLHttpRequest：一些高级用法，主要针对Firefox浏览器。\n　　4. [HTTP Access Control：CORS综述。 ](https://dev.opera.com/articles/dom-access-control-using-cors/)\n　　5. DOM access control using cross-origin resource sharing：CORS的9种HTTP头信息\n　　6. Server-Side Access Control：服务器端CORS设置。\n　　7. Enable CORS：服务端CORS设置。\n\n\n\n\n\n### 报错\nXMLHttpRequest cannot load https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'https://mail.qq.com' is therefore not allowed access.\n\n\n## 测试\nhttp://www.qq.com/ 访问 http://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json 跑通 无报错\nhttp://www.qq.com/ 访问 https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json 跑通 报错 返回值不能用\nhttps 访问 https (二级域名跨域) 跑通报错\nhttps 访问 https (二级域名跨域) 跑通报错\n\n\n\n# 阅读材料-4 CORS综述\n\n## Introduction 介绍\nSame-origin policies are a central security concept of modern browsers. In a web context, they prevent a script hosted at one origin — meaning the same protocol, domain name, and port — from reading from or writing to the DOM of another.\n\n相同的原产地政策是现代浏览器的核心安全理念。在Web上下文中，它们防止从一个来源托管的脚本，意思是相同的协议、域名和端口。\n\n<!-- more -->\n\nThis restriction is sensible and useful most of the time. Without a same-origin policy, a script hosted on http://foo.example could hijack cookie data or sensitive document information from http://bar.example and redirect it to http://evilsite.example.\n\n这种限制是明智的和有用的大部分时间。没有同源策略，一个托管在http://foo.example脚本可以劫持cookie数据或从http://bar.example敏感文件信息并将其重定向到http://evilsite.example。\n\n\nSometimes, however, a same-origin policy can be burdensome. Making requests across subdomains, for example, is prohibited by a same-origin policy. You also can't use XMLHttpRequest to pull in JSON data from a third-party API. To make matters worse, workarounds such as JSONP or document.domain can leave us vulnerable to XSS attacks.\n\n然而，有时，相同的原产地政策可能是累赘。例如，在同一个原产地政策禁止跨子域的请求。你也不能使用XMLHttpRequest拉从一个第三方API的JSON数据。更糟糕的是，解决方法如json或document.domain可以让我们容易受到XSS攻击。\n\n\nWhat we need, then, is a mechanism for requesting data across origins, but with the ability to deny requests that don't come from the right source. This is the problem that Cross-Origin Resource Sharing (or CORS) solves.\n\n然后，我们需要的是一个机制，要求跨来源的数据，但有能力拒绝的请求，不来自正确的来源。这是跨域资源共享问题的解决（或CORS）。\n\n\nCross-Origin Resource Sharing is new in Opera 12. Support is also available in Chrome, Safari, Firefox, and the forthcoming Internet Explorer 10.\n\n跨起源资源共享歌剧12新。支持也可在Chrome，Safari，Firefox，以及即将到来的Internet Explorer 10。\n","slug":"关于跨域","published":1,"updated":"2017-05-25T02:29:12.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8j000xb6e86glea2f0","content":"<blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651552209&amp;idx=1&amp;sn=23eec5e98c4c9bed2417e78bfc57e320\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651552209&amp;idx=1&amp;sn=23eec5e98c4c9bed2417e78bfc57e320</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html</a></p>\n</blockquote>\n<p>十、阅读材料<br>　　1. Introduction to XMLHttpRequest Level 2： 新功能的综合介绍。<br>　　2. New Tricks in XMLHttpRequest 2：一些用法的介绍。<br>　　3. Using XMLHttpRequest：一些高级用法，主要针对Firefox浏览器。<br>　　4. <a href=\"https://dev.opera.com/articles/dom-access-control-using-cors/\" target=\"_blank\" rel=\"noopener\">HTTP Access Control：CORS综述。 </a><br>　　5. DOM access control using cross-origin resource sharing：CORS的9种HTTP头信息<br>　　6. Server-Side Access Control：服务器端CORS设置。<br>　　7. Enable CORS：服务端CORS设置。</p>\n<h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><p>XMLHttpRequest cannot load <a href=\"https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json\" target=\"_blank\" rel=\"noopener\">https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘<a href=\"https://mail.qq.com&#39;\" target=\"_blank\" rel=\"noopener\">https://mail.qq.com&#39;</a> is therefore not allowed access.</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><a href=\"http://www.qq.com/\" target=\"_blank\" rel=\"noopener\">http://www.qq.com/</a> 访问 <a href=\"http://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json\" target=\"_blank\" rel=\"noopener\">http://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json</a> 跑通 无报错<br><a href=\"http://www.qq.com/\" target=\"_blank\" rel=\"noopener\">http://www.qq.com/</a> 访问 <a href=\"https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json\" target=\"_blank\" rel=\"noopener\">https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json</a> 跑通 报错 返回值不能用<br>https 访问 https (二级域名跨域) 跑通报错<br>https 访问 https (二级域名跨域) 跑通报错</p>\n<h1 id=\"阅读材料-4-CORS综述\"><a href=\"#阅读材料-4-CORS综述\" class=\"headerlink\" title=\"阅读材料-4 CORS综述\"></a>阅读材料-4 CORS综述</h1><h2 id=\"Introduction-介绍\"><a href=\"#Introduction-介绍\" class=\"headerlink\" title=\"Introduction 介绍\"></a>Introduction 介绍</h2><p>Same-origin policies are a central security concept of modern browsers. In a web context, they prevent a script hosted at one origin — meaning the same protocol, domain name, and port — from reading from or writing to the DOM of another.</p>\n<p>相同的原产地政策是现代浏览器的核心安全理念。在Web上下文中，它们防止从一个来源托管的脚本，意思是相同的协议、域名和端口。</p>\n<a id=\"more\"></a>\n<p>This restriction is sensible and useful most of the time. Without a same-origin policy, a script hosted on <a href=\"http://foo.example\" target=\"_blank\" rel=\"noopener\">http://foo.example</a> could hijack cookie data or sensitive document information from <a href=\"http://bar.example\" target=\"_blank\" rel=\"noopener\">http://bar.example</a> and redirect it to <a href=\"http://evilsite.example\" target=\"_blank\" rel=\"noopener\">http://evilsite.example</a>.</p>\n<p>这种限制是明智的和有用的大部分时间。没有同源策略，一个托管在<a href=\"http://foo.example脚本可以劫持cookie数据或从http://bar.example敏感文件信息并将其重定向到http://evilsite.example。\" target=\"_blank\" rel=\"noopener\">http://foo.example脚本可以劫持cookie数据或从http://bar.example敏感文件信息并将其重定向到http://evilsite.example。</a></p>\n<p>Sometimes, however, a same-origin policy can be burdensome. Making requests across subdomains, for example, is prohibited by a same-origin policy. You also can’t use XMLHttpRequest to pull in JSON data from a third-party API. To make matters worse, workarounds such as JSONP or document.domain can leave us vulnerable to XSS attacks.</p>\n<p>然而，有时，相同的原产地政策可能是累赘。例如，在同一个原产地政策禁止跨子域的请求。你也不能使用XMLHttpRequest拉从一个第三方API的JSON数据。更糟糕的是，解决方法如json或document.domain可以让我们容易受到XSS攻击。</p>\n<p>What we need, then, is a mechanism for requesting data across origins, but with the ability to deny requests that don’t come from the right source. This is the problem that Cross-Origin Resource Sharing (or CORS) solves.</p>\n<p>然后，我们需要的是一个机制，要求跨来源的数据，但有能力拒绝的请求，不来自正确的来源。这是跨域资源共享问题的解决（或CORS）。</p>\n<p>Cross-Origin Resource Sharing is new in Opera 12. Support is also available in Chrome, Safari, Firefox, and the forthcoming Internet Explorer 10.</p>\n<p>跨起源资源共享歌剧12新。支持也可在Chrome，Safari，Firefox，以及即将到来的Internet Explorer 10。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p><a href=\"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651552209&amp;idx=1&amp;sn=23eec5e98c4c9bed2417e78bfc57e320\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651552209&amp;idx=1&amp;sn=23eec5e98c4c9bed2417e78bfc57e320</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html</a></p>\n</blockquote>\n<p>十、阅读材料<br>　　1. Introduction to XMLHttpRequest Level 2： 新功能的综合介绍。<br>　　2. New Tricks in XMLHttpRequest 2：一些用法的介绍。<br>　　3. Using XMLHttpRequest：一些高级用法，主要针对Firefox浏览器。<br>　　4. <a href=\"https://dev.opera.com/articles/dom-access-control-using-cors/\" target=\"_blank\" rel=\"noopener\">HTTP Access Control：CORS综述。 </a><br>　　5. DOM access control using cross-origin resource sharing：CORS的9种HTTP头信息<br>　　6. Server-Side Access Control：服务器端CORS设置。<br>　　7. Enable CORS：服务端CORS设置。</p>\n<h3 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h3><p>XMLHttpRequest cannot load <a href=\"https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json\" target=\"_blank\" rel=\"noopener\">https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘<a href=\"https://mail.qq.com&#39;\" target=\"_blank\" rel=\"noopener\">https://mail.qq.com&#39;</a> is therefore not allowed access.</p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><a href=\"http://www.qq.com/\" target=\"_blank\" rel=\"noopener\">http://www.qq.com/</a> 访问 <a href=\"http://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json\" target=\"_blank\" rel=\"noopener\">http://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json</a> 跑通 无报错<br><a href=\"http://www.qq.com/\" target=\"_blank\" rel=\"noopener\">http://www.qq.com/</a> 访问 <a href=\"https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json\" target=\"_blank\" rel=\"noopener\">https://testapi.shouqiev.com/activity/ImageFromGLByJsonp.json</a> 跑通 报错 返回值不能用<br>https 访问 https (二级域名跨域) 跑通报错<br>https 访问 https (二级域名跨域) 跑通报错</p>\n<h1 id=\"阅读材料-4-CORS综述\"><a href=\"#阅读材料-4-CORS综述\" class=\"headerlink\" title=\"阅读材料-4 CORS综述\"></a>阅读材料-4 CORS综述</h1><h2 id=\"Introduction-介绍\"><a href=\"#Introduction-介绍\" class=\"headerlink\" title=\"Introduction 介绍\"></a>Introduction 介绍</h2><p>Same-origin policies are a central security concept of modern browsers. In a web context, they prevent a script hosted at one origin — meaning the same protocol, domain name, and port — from reading from or writing to the DOM of another.</p>\n<p>相同的原产地政策是现代浏览器的核心安全理念。在Web上下文中，它们防止从一个来源托管的脚本，意思是相同的协议、域名和端口。</p>","more":"<p>This restriction is sensible and useful most of the time. Without a same-origin policy, a script hosted on <a href=\"http://foo.example\" target=\"_blank\" rel=\"noopener\">http://foo.example</a> could hijack cookie data or sensitive document information from <a href=\"http://bar.example\" target=\"_blank\" rel=\"noopener\">http://bar.example</a> and redirect it to <a href=\"http://evilsite.example\" target=\"_blank\" rel=\"noopener\">http://evilsite.example</a>.</p>\n<p>这种限制是明智的和有用的大部分时间。没有同源策略，一个托管在<a href=\"http://foo.example脚本可以劫持cookie数据或从http://bar.example敏感文件信息并将其重定向到http://evilsite.example。\" target=\"_blank\" rel=\"noopener\">http://foo.example脚本可以劫持cookie数据或从http://bar.example敏感文件信息并将其重定向到http://evilsite.example。</a></p>\n<p>Sometimes, however, a same-origin policy can be burdensome. Making requests across subdomains, for example, is prohibited by a same-origin policy. You also can’t use XMLHttpRequest to pull in JSON data from a third-party API. To make matters worse, workarounds such as JSONP or document.domain can leave us vulnerable to XSS attacks.</p>\n<p>然而，有时，相同的原产地政策可能是累赘。例如，在同一个原产地政策禁止跨子域的请求。你也不能使用XMLHttpRequest拉从一个第三方API的JSON数据。更糟糕的是，解决方法如json或document.domain可以让我们容易受到XSS攻击。</p>\n<p>What we need, then, is a mechanism for requesting data across origins, but with the ability to deny requests that don’t come from the right source. This is the problem that Cross-Origin Resource Sharing (or CORS) solves.</p>\n<p>然后，我们需要的是一个机制，要求跨来源的数据，但有能力拒绝的请求，不来自正确的来源。这是跨域资源共享问题的解决（或CORS）。</p>\n<p>Cross-Origin Resource Sharing is new in Opera 12. Support is also available in Chrome, Safari, Firefox, and the forthcoming Internet Explorer 10.</p>\n<p>跨起源资源共享歌剧12新。支持也可在Chrome，Safari，Firefox，以及即将到来的Internet Explorer 10。</p>"},{"title":"webpack踩坑记","comments":1,"date":"2018-11-03T18:30:57.000Z","_content":"\n#### 问题描述\n\n项目中的某个依赖包引用了base58,base58引用了base-x\n\n    \"bs58\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz\",\n      \"integrity\": \"sha1-vhYedsNU9veIrkBx9j806MTwpCo=\",\n      \"requires\": {\n        \"base-x\": \"^3.0.2\"\n      }\n    },\n    \n    \"base-x\": {\n          \"version\": \"3.0.5\",\n          \"resolved\": \"https://registry.npmjs.org/base-x/-/base-x-3.0.5.tgz\",\n          \"integrity\": \"sha512-C3picSgzPSLE+jW3tcBzJoGwitOtazb5B+5YmAxZm2ybmTi9LNgAtDO/jjVEBZwHoXmDBZ9m/IELj3elJVRBcA==\",\n          \"requires\": {\n            \"safe-buffer\": \"^5.0.1\"\n          }\n        }\n突然有一天base-x升级到了3.0.5后，项目编译代码中base-x部分 编译出的为es6\n\n\n\n思路一：通过package.json把base-x固定在3.0.2\n\n思路二：把编译后的dist目录通过gulp等手段再次编译为es5\n思路三：通过polifile","source":"_posts/webpack踩坑记.md","raw":"---\ntitle: webpack踩坑记\ncomments: true\ndate: 2018-11-04 02:30:57\ntags:\n---\n\n#### 问题描述\n\n项目中的某个依赖包引用了base58,base58引用了base-x\n\n    \"bs58\": {\n      \"version\": \"4.0.1\",\n      \"resolved\": \"https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz\",\n      \"integrity\": \"sha1-vhYedsNU9veIrkBx9j806MTwpCo=\",\n      \"requires\": {\n        \"base-x\": \"^3.0.2\"\n      }\n    },\n    \n    \"base-x\": {\n          \"version\": \"3.0.5\",\n          \"resolved\": \"https://registry.npmjs.org/base-x/-/base-x-3.0.5.tgz\",\n          \"integrity\": \"sha512-C3picSgzPSLE+jW3tcBzJoGwitOtazb5B+5YmAxZm2ybmTi9LNgAtDO/jjVEBZwHoXmDBZ9m/IELj3elJVRBcA==\",\n          \"requires\": {\n            \"safe-buffer\": \"^5.0.1\"\n          }\n        }\n突然有一天base-x升级到了3.0.5后，项目编译代码中base-x部分 编译出的为es6\n\n\n\n思路一：通过package.json把base-x固定在3.0.2\n\n思路二：把编译后的dist目录通过gulp等手段再次编译为es5\n思路三：通过polifile","slug":"webpack踩坑记","published":1,"updated":"2018-11-20T02:38:31.216Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8j000yb6e867i5h7ag","content":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p>项目中的某个依赖包引用了base58,base58引用了base-x</p>\n<pre><code>&quot;bs58&quot;: {\n  &quot;version&quot;: &quot;4.0.1&quot;,\n  &quot;resolved&quot;: &quot;https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz&quot;,\n  &quot;integrity&quot;: &quot;sha1-vhYedsNU9veIrkBx9j806MTwpCo=&quot;,\n  &quot;requires&quot;: {\n    &quot;base-x&quot;: &quot;^3.0.2&quot;\n  }\n},\n\n&quot;base-x&quot;: {\n      &quot;version&quot;: &quot;3.0.5&quot;,\n      &quot;resolved&quot;: &quot;https://registry.npmjs.org/base-x/-/base-x-3.0.5.tgz&quot;,\n      &quot;integrity&quot;: &quot;sha512-C3picSgzPSLE+jW3tcBzJoGwitOtazb5B+5YmAxZm2ybmTi9LNgAtDO/jjVEBZwHoXmDBZ9m/IELj3elJVRBcA==&quot;,\n      &quot;requires&quot;: {\n        &quot;safe-buffer&quot;: &quot;^5.0.1&quot;\n      }\n    }\n</code></pre><p>突然有一天base-x升级到了3.0.5后，项目编译代码中base-x部分 编译出的为es6</p>\n<p>思路一：通过package.json把base-x固定在3.0.2</p>\n<p>思路二：把编译后的dist目录通过gulp等手段再次编译为es5<br>思路三：通过polifile</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h4><p>项目中的某个依赖包引用了base58,base58引用了base-x</p>\n<pre><code>&quot;bs58&quot;: {\n  &quot;version&quot;: &quot;4.0.1&quot;,\n  &quot;resolved&quot;: &quot;https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz&quot;,\n  &quot;integrity&quot;: &quot;sha1-vhYedsNU9veIrkBx9j806MTwpCo=&quot;,\n  &quot;requires&quot;: {\n    &quot;base-x&quot;: &quot;^3.0.2&quot;\n  }\n},\n\n&quot;base-x&quot;: {\n      &quot;version&quot;: &quot;3.0.5&quot;,\n      &quot;resolved&quot;: &quot;https://registry.npmjs.org/base-x/-/base-x-3.0.5.tgz&quot;,\n      &quot;integrity&quot;: &quot;sha512-C3picSgzPSLE+jW3tcBzJoGwitOtazb5B+5YmAxZm2ybmTi9LNgAtDO/jjVEBZwHoXmDBZ9m/IELj3elJVRBcA==&quot;,\n      &quot;requires&quot;: {\n        &quot;safe-buffer&quot;: &quot;^5.0.1&quot;\n      }\n    }\n</code></pre><p>突然有一天base-x升级到了3.0.5后，项目编译代码中base-x部分 编译出的为es6</p>\n<p>思路一：通过package.json把base-x固定在3.0.2</p>\n<p>思路二：把编译后的dist目录通过gulp等手段再次编译为es5<br>思路三：通过polifile</p>\n"},{"title":"多SSH key的管理","comments":1,"date":"2017-05-18T09:48:21.000Z","_content":"\n| https://www.zybuluo.com/yangfch3/note/172120\n\n\n## ssh-keygen命令\n\n### ssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。\n\n-b：指定密钥长度； \n-e：读取openssh的私钥或者公钥文件； \n-C：添加注释； \n-f：指定用来保存密钥的文件名； \n-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥； \n-l：显示公钥文件的指纹数据； \n-N：提供一个新密语； \n-P：提供（旧）密语； \n-q：静默模式； \n-t：指定要创建的密钥类型。\n","source":"_posts/多SSH-key的管理.md","raw":"---\ntitle: 多SSH key的管理\ncomments: true\ndate: 2017-05-18 17:48:21\ntags:\n---\n\n| https://www.zybuluo.com/yangfch3/note/172120\n\n\n## ssh-keygen命令\n\n### ssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。\n\n-b：指定密钥长度； \n-e：读取openssh的私钥或者公钥文件； \n-C：添加注释； \n-f：指定用来保存密钥的文件名； \n-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥； \n-l：显示公钥文件的指纹数据； \n-N：提供一个新密语； \n-P：提供（旧）密语； \n-q：静默模式； \n-t：指定要创建的密钥类型。\n","slug":"多SSH-key的管理","published":1,"updated":"2017-05-18T10:25:23.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8k000zb6e8a8b7e69r","content":"<p>| <a href=\"https://www.zybuluo.com/yangfch3/note/172120\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/yangfch3/note/172120</a></p>\n<h2 id=\"ssh-keygen命令\"><a href=\"#ssh-keygen命令\" class=\"headerlink\" title=\"ssh-keygen命令\"></a>ssh-keygen命令</h2><h3 id=\"ssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。\"><a href=\"#ssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。\" class=\"headerlink\" title=\"ssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。\"></a>ssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。</h3><p>-b：指定密钥长度；<br>-e：读取openssh的私钥或者公钥文件；<br>-C：添加注释；<br>-f：指定用来保存密钥的文件名；<br>-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥；<br>-l：显示公钥文件的指纹数据；<br>-N：提供一个新密语；<br>-P：提供（旧）密语；<br>-q：静默模式；<br>-t：指定要创建的密钥类型。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>| <a href=\"https://www.zybuluo.com/yangfch3/note/172120\" target=\"_blank\" rel=\"noopener\">https://www.zybuluo.com/yangfch3/note/172120</a></p>\n<h2 id=\"ssh-keygen命令\"><a href=\"#ssh-keygen命令\" class=\"headerlink\" title=\"ssh-keygen命令\"></a>ssh-keygen命令</h2><h3 id=\"ssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。\"><a href=\"#ssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。\" class=\"headerlink\" title=\"ssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。\"></a>ssh-keygen命令用于为“ssh”生成、管理和转换认证密钥，它支持RSA和DSA两种认证密钥。</h3><p>-b：指定密钥长度；<br>-e：读取openssh的私钥或者公钥文件；<br>-C：添加注释；<br>-f：指定用来保存密钥的文件名；<br>-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥；<br>-l：显示公钥文件的指纹数据；<br>-N：提供一个新密语；<br>-P：提供（旧）密语；<br>-q：静默模式；<br>-t：指定要创建的密钥类型。</p>\n"},{"title":"函数式编程","comments":1,"date":"2018-08-22T15:38:58.000Z","_content":"\n- #### 函数式编程思维\n\n- #### 函数式编程常用核心概念\n\n- #### 当下函数式编程最热的库\n\n- #### 函数式编程的实际应用场景\n\n\n\n## 函数式编程思维\n\n***是一门复杂的数学思想***\n\n1. 函数是”第一等公民”\n2. 只用”表达式\"，不用\"语句\"\n3. 没有”副作用\"\n4. 不修改状态\n5. 引用透明（函数运行只靠参数）\n\n<!-- more -->\n\n## 函数式编程常用核心概念\n\n•纯函数\n\n•函数的柯里化\n\n•函数组合\n\n•Point Free\n\n•声明式与命令式代码\n\n•核心概念\n\n#### 1.纯函数\n\n对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态的函数，叫做纯函数。\n\n```javascript\nvar xs = [1,2,3,4,5];// Array.slice是纯函数，因为它没有副作用，对于固定的输入，输出总是固定的\nxs.slice(0,3);\nxs.slice(0,3);\nxs.splice(0,3);// Array.splice会对原array造成影响，所以不纯\nxs.splice(0,3);\n```\n\n#### 2.函数的柯里化\n\n***传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。***\n\n```javascript\nvar min = 18; \nvar checkage = age => age > min;\n```\n\n这个函数并不纯，checkage 不仅取决于 age还有外部依赖的变量 min。 纯的 checkage 把关键数字 18 硬编码在函数内部，扩展性比较差，柯里化优雅的函数式解决。\n\n```javascript\nvar checkage = min => (age => age > min);\nvar checkage18 = checkage(18); // 先将18作为参数，去调用此函数，返回一个函数age => age > 18;\ncheckage18(20);// 第二步，上面返回的函数去处理剩下的参数，即 20 => 20 > 18; return true;\n```\n\n```javascript\n// 柯里化之前\nfunction add(x, y) {\n    return x + y;\n}\nadd(1, 2) // 3\n// 柯里化之后\nfunction addX(y) {\n    return function (x) {\n        return x + y;\n    };\n}\naddX(2)(1) // 3\n```\n\n事实上柯里化是一种“预加载”函数的方法，通过传递较少的参数，得到一个已经记住了这些参数的新函数，某种意义上讲，这是一种对参数的“缓存”，是一种非常高效的编写函数的方法。\n\n#### 3.函数组合\n\n为了解决函数嵌套过深，洋葱代码：addX(2)(1)、h(g(f(x)))，我们需要用到“函数组合”，我们一起来用柯里化来改他，让多个函数像拼积木一样。\n\n```javascript\nconst compose = (f, g) => (x => f(g(x)));\nvar first = arr => arr[0];\nvar reverse = arr => arr.reverse();\nvar last = compose(first, reverse);\nlast([1, 2, 3, 4, 5]); // 5\n```\n\n函数组合交换律，类似于乘法交换律：\n\n![](函数式编程/1.png)\n\n\n\n#### 4.Point Free\n\n***把一些对象自带的方法转化成纯函数,不要命名转瞬即逝的中间变量。***\n\n```javascript\nconst f = str => str.toUpperCase().split(' ');\n```\n\n这个函数中，我们使用了 str 作为我们的中间变量，但这个中间变量除了让代码变得长了一点以外是毫无意义的。\n\n```javascript\nvar toUpperCase = word => word.toUpperCase();\nvar split = x => (str => str.split(x));\nvar f = compose(split(' '), toUpperCase);\nf(\"abcd efgh\");\n```\n\n把一些对象自带的方法转化成纯函数，然后通过函数组合去调用，这种风格能够帮助我们减少不必要的命名，让代码保持简洁和通用。是不是很方便！\n\n#### 5.声明式与命令式代码\n\n在我们日常业务开发中，写的代码绝大多数都为命令式代码；\n我们通过编写一条又一条指令去让计算机执行一些动作，这其中一般都会涉及到很多繁杂的细节。\n而声明式就要优雅很多了，我们通过写表达式的方式来声明我们想干什么，而不是通过一步一步的指示。\n\n```javascript\n//命令式\nlet CEOs = [];\nfor (var i = 0; i < companies.length; i++) {\n    CEOs.push(companies[i].CEO)\n}\n//声明式\nlet CEOs = companies.map(c => c.CEO);\n```\n\n函数式编程的一个明显的好处就是这种声明式的代码，对于无副作用的纯函数，我们完全可以不考虑函数内部是如何实现的，专注于编写业务代码。优化代码时，目光只需要集中在这些稳定坚固的函数内部即可。相反，不纯的函数式的代码会产生副作用或者依赖外部系统环境，使用它们的时候总是要考虑这些不干净的副作用。在复杂的系统中，这对于我们的心智来说是极大的负担。\n\n\n\n#### 6.核心概念\n\n##### 高阶函数\n\n​\t***把函数当参数，把传入的函数做一个封装，然后返回这个封装函数,达到更高程度的抽象。***\n\n```javascript\n//命令式\nvar add = function (a, b) {\n    return a + b;\n};\nfunction math(func, array) {\n    return func(array[0], array[1]);\n}\nmath(add, [1, 2]); // 3\n```\n\n##### 递归与尾递归\n\n指函数内部的最后一个动作是函数调用。 该调用的返回值， 直接返回给函数。 函数调用自身， 称为递归。\n```javascript\nfunction quickSort(arr){//！！递归快排！！！\n  if(arr.length<=1){return arr;}  //如果数组<=1,则直接返回\n  var pivotIndex=Math.floor(arr.length/2);\n  var pivot=arr.splice(pivotIndex,1)[0];  //找基准，并把基准从原数组删除\n  \n  var left=[];  //定义左右数组\n  var right=[];\n\n  //比基准小的放在left，比基准大的放在right\n  for(var i=0;i<arr.length;i++){\n    if(arr[i]<=pivot){\n      left.push(arr[i]);\n    }\n    else{\n      right.push(arr[i]);\n    }\n  }\n  //递归\n  return quickSort(left).concat([pivot],quickSort(right));\n}     \n```\n\n\n如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。当递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分时，这个递归调用就是尾递归。尾递归函数的特点是在回归过程中不用做任何操作，这个特性很重要，因为大多数现代的编译器会利用这种特点自动生成优化的代码。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/函数式编程.md","raw":"---\ntitle: 函数式编程\ncomments: true\ndate: 2018-08-22 23:38:58\ntags:\n---\n\n- #### 函数式编程思维\n\n- #### 函数式编程常用核心概念\n\n- #### 当下函数式编程最热的库\n\n- #### 函数式编程的实际应用场景\n\n\n\n## 函数式编程思维\n\n***是一门复杂的数学思想***\n\n1. 函数是”第一等公民”\n2. 只用”表达式\"，不用\"语句\"\n3. 没有”副作用\"\n4. 不修改状态\n5. 引用透明（函数运行只靠参数）\n\n<!-- more -->\n\n## 函数式编程常用核心概念\n\n•纯函数\n\n•函数的柯里化\n\n•函数组合\n\n•Point Free\n\n•声明式与命令式代码\n\n•核心概念\n\n#### 1.纯函数\n\n对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态的函数，叫做纯函数。\n\n```javascript\nvar xs = [1,2,3,4,5];// Array.slice是纯函数，因为它没有副作用，对于固定的输入，输出总是固定的\nxs.slice(0,3);\nxs.slice(0,3);\nxs.splice(0,3);// Array.splice会对原array造成影响，所以不纯\nxs.splice(0,3);\n```\n\n#### 2.函数的柯里化\n\n***传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。***\n\n```javascript\nvar min = 18; \nvar checkage = age => age > min;\n```\n\n这个函数并不纯，checkage 不仅取决于 age还有外部依赖的变量 min。 纯的 checkage 把关键数字 18 硬编码在函数内部，扩展性比较差，柯里化优雅的函数式解决。\n\n```javascript\nvar checkage = min => (age => age > min);\nvar checkage18 = checkage(18); // 先将18作为参数，去调用此函数，返回一个函数age => age > 18;\ncheckage18(20);// 第二步，上面返回的函数去处理剩下的参数，即 20 => 20 > 18; return true;\n```\n\n```javascript\n// 柯里化之前\nfunction add(x, y) {\n    return x + y;\n}\nadd(1, 2) // 3\n// 柯里化之后\nfunction addX(y) {\n    return function (x) {\n        return x + y;\n    };\n}\naddX(2)(1) // 3\n```\n\n事实上柯里化是一种“预加载”函数的方法，通过传递较少的参数，得到一个已经记住了这些参数的新函数，某种意义上讲，这是一种对参数的“缓存”，是一种非常高效的编写函数的方法。\n\n#### 3.函数组合\n\n为了解决函数嵌套过深，洋葱代码：addX(2)(1)、h(g(f(x)))，我们需要用到“函数组合”，我们一起来用柯里化来改他，让多个函数像拼积木一样。\n\n```javascript\nconst compose = (f, g) => (x => f(g(x)));\nvar first = arr => arr[0];\nvar reverse = arr => arr.reverse();\nvar last = compose(first, reverse);\nlast([1, 2, 3, 4, 5]); // 5\n```\n\n函数组合交换律，类似于乘法交换律：\n\n![](函数式编程/1.png)\n\n\n\n#### 4.Point Free\n\n***把一些对象自带的方法转化成纯函数,不要命名转瞬即逝的中间变量。***\n\n```javascript\nconst f = str => str.toUpperCase().split(' ');\n```\n\n这个函数中，我们使用了 str 作为我们的中间变量，但这个中间变量除了让代码变得长了一点以外是毫无意义的。\n\n```javascript\nvar toUpperCase = word => word.toUpperCase();\nvar split = x => (str => str.split(x));\nvar f = compose(split(' '), toUpperCase);\nf(\"abcd efgh\");\n```\n\n把一些对象自带的方法转化成纯函数，然后通过函数组合去调用，这种风格能够帮助我们减少不必要的命名，让代码保持简洁和通用。是不是很方便！\n\n#### 5.声明式与命令式代码\n\n在我们日常业务开发中，写的代码绝大多数都为命令式代码；\n我们通过编写一条又一条指令去让计算机执行一些动作，这其中一般都会涉及到很多繁杂的细节。\n而声明式就要优雅很多了，我们通过写表达式的方式来声明我们想干什么，而不是通过一步一步的指示。\n\n```javascript\n//命令式\nlet CEOs = [];\nfor (var i = 0; i < companies.length; i++) {\n    CEOs.push(companies[i].CEO)\n}\n//声明式\nlet CEOs = companies.map(c => c.CEO);\n```\n\n函数式编程的一个明显的好处就是这种声明式的代码，对于无副作用的纯函数，我们完全可以不考虑函数内部是如何实现的，专注于编写业务代码。优化代码时，目光只需要集中在这些稳定坚固的函数内部即可。相反，不纯的函数式的代码会产生副作用或者依赖外部系统环境，使用它们的时候总是要考虑这些不干净的副作用。在复杂的系统中，这对于我们的心智来说是极大的负担。\n\n\n\n#### 6.核心概念\n\n##### 高阶函数\n\n​\t***把函数当参数，把传入的函数做一个封装，然后返回这个封装函数,达到更高程度的抽象。***\n\n```javascript\n//命令式\nvar add = function (a, b) {\n    return a + b;\n};\nfunction math(func, array) {\n    return func(array[0], array[1]);\n}\nmath(add, [1, 2]); // 3\n```\n\n##### 递归与尾递归\n\n指函数内部的最后一个动作是函数调用。 该调用的返回值， 直接返回给函数。 函数调用自身， 称为递归。\n```javascript\nfunction quickSort(arr){//！！递归快排！！！\n  if(arr.length<=1){return arr;}  //如果数组<=1,则直接返回\n  var pivotIndex=Math.floor(arr.length/2);\n  var pivot=arr.splice(pivotIndex,1)[0];  //找基准，并把基准从原数组删除\n  \n  var left=[];  //定义左右数组\n  var right=[];\n\n  //比基准小的放在left，比基准大的放在right\n  for(var i=0;i<arr.length;i++){\n    if(arr[i]<=pivot){\n      left.push(arr[i]);\n    }\n    else{\n      right.push(arr[i]);\n    }\n  }\n  //递归\n  return quickSort(left).concat([pivot],quickSort(right));\n}     \n```\n\n\n如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。当递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分时，这个递归调用就是尾递归。尾递归函数的特点是在回归过程中不用做任何操作，这个特性很重要，因为大多数现代的编译器会利用这种特点自动生成优化的代码。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"函数式编程","published":1,"updated":"2018-09-05T18:17:29.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8k0010b6e8axabaq92","content":"<ul>\n<li><h4 id=\"函数式编程思维\"><a href=\"#函数式编程思维\" class=\"headerlink\" title=\"函数式编程思维\"></a>函数式编程思维</h4></li>\n<li><h4 id=\"函数式编程常用核心概念\"><a href=\"#函数式编程常用核心概念\" class=\"headerlink\" title=\"函数式编程常用核心概念\"></a>函数式编程常用核心概念</h4></li>\n<li><h4 id=\"当下函数式编程最热的库\"><a href=\"#当下函数式编程最热的库\" class=\"headerlink\" title=\"当下函数式编程最热的库\"></a>当下函数式编程最热的库</h4></li>\n<li><h4 id=\"函数式编程的实际应用场景\"><a href=\"#函数式编程的实际应用场景\" class=\"headerlink\" title=\"函数式编程的实际应用场景\"></a>函数式编程的实际应用场景</h4></li>\n</ul>\n<h2 id=\"函数式编程思维-1\"><a href=\"#函数式编程思维-1\" class=\"headerlink\" title=\"函数式编程思维\"></a>函数式编程思维</h2><p><strong><em>是一门复杂的数学思想</em></strong></p>\n<ol>\n<li>函数是”第一等公民”</li>\n<li>只用”表达式”，不用”语句”</li>\n<li>没有”副作用”</li>\n<li>不修改状态</li>\n<li>引用透明（函数运行只靠参数）</li>\n</ol>\n<a id=\"more\"></a>\n<h2 id=\"函数式编程常用核心概念-1\"><a href=\"#函数式编程常用核心概念-1\" class=\"headerlink\" title=\"函数式编程常用核心概念\"></a>函数式编程常用核心概念</h2><p>•纯函数</p>\n<p>•函数的柯里化</p>\n<p>•函数组合</p>\n<p>•Point Free</p>\n<p>•声明式与命令式代码</p>\n<p>•核心概念</p>\n<h4 id=\"1-纯函数\"><a href=\"#1-纯函数\" class=\"headerlink\" title=\"1.纯函数\"></a>1.纯函数</h4><p>对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态的函数，叫做纯函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xs = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];<span class=\"comment\">// Array.slice是纯函数，因为它没有副作用，对于固定的输入，输出总是固定的</span></span><br><span class=\"line\">xs.slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">xs.slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">xs.splice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);<span class=\"comment\">// Array.splice会对原array造成影响，所以不纯</span></span><br><span class=\"line\">xs.splice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-函数的柯里化\"><a href=\"#2-函数的柯里化\" class=\"headerlink\" title=\"2.函数的柯里化\"></a>2.函数的柯里化</h4><p><strong><em>传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> min = <span class=\"number\">18</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> checkage = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> age &gt; min;</span><br></pre></td></tr></table></figure>\n<p>这个函数并不纯，checkage 不仅取决于 age还有外部依赖的变量 min。 纯的 checkage 把关键数字 18 硬编码在函数内部，扩展性比较差，柯里化优雅的函数式解决。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> checkage = <span class=\"function\"><span class=\"params\">min</span> =&gt;</span> (<span class=\"function\"><span class=\"params\">age</span> =&gt;</span> age &gt; min);</span><br><span class=\"line\"><span class=\"keyword\">var</span> checkage18 = checkage(<span class=\"number\">18</span>); <span class=\"comment\">// 先将18作为参数，去调用此函数，返回一个函数age =&gt; age &gt; 18;</span></span><br><span class=\"line\">checkage18(<span class=\"number\">20</span>);<span class=\"comment\">// 第二步，上面返回的函数去处理剩下的参数，即 20 =&gt; 20 &gt; 18; return true;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 柯里化之前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 柯里化之后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addX</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">addX(<span class=\"number\">2</span>)(<span class=\"number\">1</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>事实上柯里化是一种“预加载”函数的方法，通过传递较少的参数，得到一个已经记住了这些参数的新函数，某种意义上讲，这是一种对参数的“缓存”，是一种非常高效的编写函数的方法。</p>\n<h4 id=\"3-函数组合\"><a href=\"#3-函数组合\" class=\"headerlink\" title=\"3.函数组合\"></a>3.函数组合</h4><p>为了解决函数嵌套过深，洋葱代码：addX(2)(1)、h(g(f(x)))，我们需要用到“函数组合”，我们一起来用柯里化来改他，让多个函数像拼积木一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">f, g</span>) =&gt;</span> (<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> f(g(x)));</span><br><span class=\"line\"><span class=\"keyword\">var</span> first = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.reverse();</span><br><span class=\"line\"><span class=\"keyword\">var</span> last = compose(first, reverse);</span><br><span class=\"line\">last([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<p>函数组合交换律，类似于乘法交换律：</p>\n<p><img src=\"/2018/08/22/函数式编程/1.png\" alt=\"\"></p>\n<h4 id=\"4-Point-Free\"><a href=\"#4-Point-Free\" class=\"headerlink\" title=\"4.Point Free\"></a>4.Point Free</h4><p><strong><em>把一些对象自带的方法转化成纯函数,不要命名转瞬即逝的中间变量。</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"function\"><span class=\"params\">str</span> =&gt;</span> str.toUpperCase().split(<span class=\"string\">' '</span>);</span><br></pre></td></tr></table></figure>\n<p>这个函数中，我们使用了 str 作为我们的中间变量，但这个中间变量除了让代码变得长了一点以外是毫无意义的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> toUpperCase = <span class=\"function\"><span class=\"params\">word</span> =&gt;</span> word.toUpperCase();</span><br><span class=\"line\"><span class=\"keyword\">var</span> split = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> (<span class=\"function\"><span class=\"params\">str</span> =&gt;</span> str.split(x));</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = compose(split(<span class=\"string\">' '</span>), toUpperCase);</span><br><span class=\"line\">f(<span class=\"string\">\"abcd efgh\"</span>);</span><br></pre></td></tr></table></figure>\n<p>把一些对象自带的方法转化成纯函数，然后通过函数组合去调用，这种风格能够帮助我们减少不必要的命名，让代码保持简洁和通用。是不是很方便！</p>\n<h4 id=\"5-声明式与命令式代码\"><a href=\"#5-声明式与命令式代码\" class=\"headerlink\" title=\"5.声明式与命令式代码\"></a>5.声明式与命令式代码</h4><p>在我们日常业务开发中，写的代码绝大多数都为命令式代码；<br>我们通过编写一条又一条指令去让计算机执行一些动作，这其中一般都会涉及到很多繁杂的细节。<br>而声明式就要优雅很多了，我们通过写表达式的方式来声明我们想干什么，而不是通过一步一步的指示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> CEOs = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; companies.length; i++) &#123;</span><br><span class=\"line\">    CEOs.push(companies[i].CEO)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//声明式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> CEOs = companies.map(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.CEO);</span><br></pre></td></tr></table></figure>\n<p>函数式编程的一个明显的好处就是这种声明式的代码，对于无副作用的纯函数，我们完全可以不考虑函数内部是如何实现的，专注于编写业务代码。优化代码时，目光只需要集中在这些稳定坚固的函数内部即可。相反，不纯的函数式的代码会产生副作用或者依赖外部系统环境，使用它们的时候总是要考虑这些不干净的副作用。在复杂的系统中，这对于我们的心智来说是极大的负担。</p>\n<h4 id=\"6-核心概念\"><a href=\"#6-核心概念\" class=\"headerlink\" title=\"6.核心概念\"></a>6.核心概念</h4><h5 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h5><p>​    <strong><em>把函数当参数，把传入的函数做一个封装，然后返回这个封装函数,达到更高程度的抽象。</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">math</span>(<span class=\"params\">func, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func(array[<span class=\"number\">0</span>], array[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">math(add, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"递归与尾递归\"><a href=\"#递归与尾递归\" class=\"headerlink\" title=\"递归与尾递归\"></a>递归与尾递归</h5><p>指函数内部的最后一个动作是函数调用。 该调用的返回值， 直接返回给函数。 函数调用自身， 称为递归。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>)</span>&#123;<span class=\"comment\">//！！递归快排！！！</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arr.length&lt;=<span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> arr;&#125;  <span class=\"comment\">//如果数组&lt;=1,则直接返回</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pivotIndex=<span class=\"built_in\">Math</span>.floor(arr.length/<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pivot=arr.splice(pivotIndex,<span class=\"number\">1</span>)[<span class=\"number\">0</span>];  <span class=\"comment\">//找基准，并把基准从原数组删除</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> left=[];  <span class=\"comment\">//定义左右数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> right=[];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//比基准小的放在left，比基准大的放在right</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i]&lt;=pivot)&#123;</span><br><span class=\"line\">      left.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      right.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//递归</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(left).concat([pivot],quickSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。当递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分时，这个递归调用就是尾递归。尾递归函数的特点是在回归过程中不用做任何操作，这个特性很重要，因为大多数现代的编译器会利用这种特点自动生成优化的代码。</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li><h4 id=\"函数式编程思维\"><a href=\"#函数式编程思维\" class=\"headerlink\" title=\"函数式编程思维\"></a>函数式编程思维</h4></li>\n<li><h4 id=\"函数式编程常用核心概念\"><a href=\"#函数式编程常用核心概念\" class=\"headerlink\" title=\"函数式编程常用核心概念\"></a>函数式编程常用核心概念</h4></li>\n<li><h4 id=\"当下函数式编程最热的库\"><a href=\"#当下函数式编程最热的库\" class=\"headerlink\" title=\"当下函数式编程最热的库\"></a>当下函数式编程最热的库</h4></li>\n<li><h4 id=\"函数式编程的实际应用场景\"><a href=\"#函数式编程的实际应用场景\" class=\"headerlink\" title=\"函数式编程的实际应用场景\"></a>函数式编程的实际应用场景</h4></li>\n</ul>\n<h2 id=\"函数式编程思维-1\"><a href=\"#函数式编程思维-1\" class=\"headerlink\" title=\"函数式编程思维\"></a>函数式编程思维</h2><p><strong><em>是一门复杂的数学思想</em></strong></p>\n<ol>\n<li>函数是”第一等公民”</li>\n<li>只用”表达式”，不用”语句”</li>\n<li>没有”副作用”</li>\n<li>不修改状态</li>\n<li>引用透明（函数运行只靠参数）</li>\n</ol>","more":"<h2 id=\"函数式编程常用核心概念-1\"><a href=\"#函数式编程常用核心概念-1\" class=\"headerlink\" title=\"函数式编程常用核心概念\"></a>函数式编程常用核心概念</h2><p>•纯函数</p>\n<p>•函数的柯里化</p>\n<p>•函数组合</p>\n<p>•Point Free</p>\n<p>•声明式与命令式代码</p>\n<p>•核心概念</p>\n<h4 id=\"1-纯函数\"><a href=\"#1-纯函数\" class=\"headerlink\" title=\"1.纯函数\"></a>1.纯函数</h4><p>对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态的函数，叫做纯函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xs = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];<span class=\"comment\">// Array.slice是纯函数，因为它没有副作用，对于固定的输入，输出总是固定的</span></span><br><span class=\"line\">xs.slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">xs.slice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">xs.splice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);<span class=\"comment\">// Array.splice会对原array造成影响，所以不纯</span></span><br><span class=\"line\">xs.splice(<span class=\"number\">0</span>,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-函数的柯里化\"><a href=\"#2-函数的柯里化\" class=\"headerlink\" title=\"2.函数的柯里化\"></a>2.函数的柯里化</h4><p><strong><em>传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> min = <span class=\"number\">18</span>; </span><br><span class=\"line\"><span class=\"keyword\">var</span> checkage = <span class=\"function\"><span class=\"params\">age</span> =&gt;</span> age &gt; min;</span><br></pre></td></tr></table></figure>\n<p>这个函数并不纯，checkage 不仅取决于 age还有外部依赖的变量 min。 纯的 checkage 把关键数字 18 硬编码在函数内部，扩展性比较差，柯里化优雅的函数式解决。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> checkage = <span class=\"function\"><span class=\"params\">min</span> =&gt;</span> (<span class=\"function\"><span class=\"params\">age</span> =&gt;</span> age &gt; min);</span><br><span class=\"line\"><span class=\"keyword\">var</span> checkage18 = checkage(<span class=\"number\">18</span>); <span class=\"comment\">// 先将18作为参数，去调用此函数，返回一个函数age =&gt; age &gt; 18;</span></span><br><span class=\"line\">checkage18(<span class=\"number\">20</span>);<span class=\"comment\">// 第二步，上面返回的函数去处理剩下的参数，即 20 =&gt; 20 &gt; 18; return true;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 柯里化之前</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">add(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 柯里化之后</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addX</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">addX(<span class=\"number\">2</span>)(<span class=\"number\">1</span>) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>事实上柯里化是一种“预加载”函数的方法，通过传递较少的参数，得到一个已经记住了这些参数的新函数，某种意义上讲，这是一种对参数的“缓存”，是一种非常高效的编写函数的方法。</p>\n<h4 id=\"3-函数组合\"><a href=\"#3-函数组合\" class=\"headerlink\" title=\"3.函数组合\"></a>3.函数组合</h4><p>为了解决函数嵌套过深，洋葱代码：addX(2)(1)、h(g(f(x)))，我们需要用到“函数组合”，我们一起来用柯里化来改他，让多个函数像拼积木一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> compose = <span class=\"function\">(<span class=\"params\">f, g</span>) =&gt;</span> (<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> f(g(x)));</span><br><span class=\"line\"><span class=\"keyword\">var</span> first = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> reverse = <span class=\"function\"><span class=\"params\">arr</span> =&gt;</span> arr.reverse();</span><br><span class=\"line\"><span class=\"keyword\">var</span> last = compose(first, reverse);</span><br><span class=\"line\">last([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<p>函数组合交换律，类似于乘法交换律：</p>\n<p><img src=\"/2018/08/22/函数式编程/1.png\" alt=\"\"></p>\n<h4 id=\"4-Point-Free\"><a href=\"#4-Point-Free\" class=\"headerlink\" title=\"4.Point Free\"></a>4.Point Free</h4><p><strong><em>把一些对象自带的方法转化成纯函数,不要命名转瞬即逝的中间变量。</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"function\"><span class=\"params\">str</span> =&gt;</span> str.toUpperCase().split(<span class=\"string\">' '</span>);</span><br></pre></td></tr></table></figure>\n<p>这个函数中，我们使用了 str 作为我们的中间变量，但这个中间变量除了让代码变得长了一点以外是毫无意义的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> toUpperCase = <span class=\"function\"><span class=\"params\">word</span> =&gt;</span> word.toUpperCase();</span><br><span class=\"line\"><span class=\"keyword\">var</span> split = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> (<span class=\"function\"><span class=\"params\">str</span> =&gt;</span> str.split(x));</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = compose(split(<span class=\"string\">' '</span>), toUpperCase);</span><br><span class=\"line\">f(<span class=\"string\">\"abcd efgh\"</span>);</span><br></pre></td></tr></table></figure>\n<p>把一些对象自带的方法转化成纯函数，然后通过函数组合去调用，这种风格能够帮助我们减少不必要的命名，让代码保持简洁和通用。是不是很方便！</p>\n<h4 id=\"5-声明式与命令式代码\"><a href=\"#5-声明式与命令式代码\" class=\"headerlink\" title=\"5.声明式与命令式代码\"></a>5.声明式与命令式代码</h4><p>在我们日常业务开发中，写的代码绝大多数都为命令式代码；<br>我们通过编写一条又一条指令去让计算机执行一些动作，这其中一般都会涉及到很多繁杂的细节。<br>而声明式就要优雅很多了，我们通过写表达式的方式来声明我们想干什么，而不是通过一步一步的指示。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> CEOs = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; companies.length; i++) &#123;</span><br><span class=\"line\">    CEOs.push(companies[i].CEO)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//声明式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> CEOs = companies.map(<span class=\"function\"><span class=\"params\">c</span> =&gt;</span> c.CEO);</span><br></pre></td></tr></table></figure>\n<p>函数式编程的一个明显的好处就是这种声明式的代码，对于无副作用的纯函数，我们完全可以不考虑函数内部是如何实现的，专注于编写业务代码。优化代码时，目光只需要集中在这些稳定坚固的函数内部即可。相反，不纯的函数式的代码会产生副作用或者依赖外部系统环境，使用它们的时候总是要考虑这些不干净的副作用。在复杂的系统中，这对于我们的心智来说是极大的负担。</p>\n<h4 id=\"6-核心概念\"><a href=\"#6-核心概念\" class=\"headerlink\" title=\"6.核心概念\"></a>6.核心概念</h4><h5 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h5><p>​    <strong><em>把函数当参数，把传入的函数做一个封装，然后返回这个封装函数,达到更高程度的抽象。</em></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//命令式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">math</span>(<span class=\"params\">func, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> func(array[<span class=\"number\">0</span>], array[<span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">math(add, [<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"递归与尾递归\"><a href=\"#递归与尾递归\" class=\"headerlink\" title=\"递归与尾递归\"></a>递归与尾递归</h5><p>指函数内部的最后一个动作是函数调用。 该调用的返回值， 直接返回给函数。 函数调用自身， 称为递归。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>)</span>&#123;<span class=\"comment\">//！！递归快排！！！</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(arr.length&lt;=<span class=\"number\">1</span>)&#123;<span class=\"keyword\">return</span> arr;&#125;  <span class=\"comment\">//如果数组&lt;=1,则直接返回</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> pivotIndex=<span class=\"built_in\">Math</span>.floor(arr.length/<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pivot=arr.splice(pivotIndex,<span class=\"number\">1</span>)[<span class=\"number\">0</span>];  <span class=\"comment\">//找基准，并把基准从原数组删除</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">var</span> left=[];  <span class=\"comment\">//定义左右数组</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> right=[];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//比基准小的放在left，比基准大的放在right</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i]&lt;=pivot)&#123;</span><br><span class=\"line\">      left.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      right.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//递归</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> quickSort(left).concat([pivot],quickSort(right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。当递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分时，这个递归调用就是尾递归。尾递归函数的特点是在回归过程中不用做任何操作，这个特性很重要，因为大多数现代的编译器会利用这种特点自动生成优化的代码。</p>"},{"title":"解决UC浏览器、微信浏览器试用display:flex的兼容问题","comments":1,"date":"2017-01-06T08:02:57.000Z","_content":"\n\n>http://blog.csdn.net/fanhu6816/article/details/52047018\n","source":"_posts/解决UC浏览器、微信浏览器试用display-flex的兼容问题.md","raw":"---\ntitle: '解决UC浏览器、微信浏览器试用display:flex的兼容问题'\ncomments: true\ndate: 2017-01-06 16:02:57\ntags:\n---\n\n\n>http://blog.csdn.net/fanhu6816/article/details/52047018\n","slug":"解决UC浏览器、微信浏览器试用display-flex的兼容问题","published":1,"updated":"2017-01-06T08:03:09.000Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8l0011b6e8cgqfrrzw","content":"<blockquote>\n<p><a href=\"http://blog.csdn.net/fanhu6816/article/details/52047018\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/fanhu6816/article/details/52047018</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"http://blog.csdn.net/fanhu6816/article/details/52047018\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/fanhu6816/article/details/52047018</a></p>\n</blockquote>\n"},{"title":"性能优化","comments":1,"date":"2018-10-05T12:11:46.000Z","_content":"","source":"_posts/性能优化.md","raw":"---\ntitle: 性能优化\ncomments: true\ndate: 2018-10-05 20:11:46\ntags:\n---\n","slug":"性能优化","published":1,"updated":"2018-10-05T12:11:46.271Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8l0012b6e8wufl3tku","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"面试题","comments":1,"date":"2017-07-18T09:39:37.000Z","_content":"\n# 美团 2017年07月20日\n### css3（动画、flex)\n### 标签上下绝对剧中的几种方法\n### css盒模型 box-sizing\n### get post区别\n\n<!-- more -->\n1、公认意义上、get用来获取信息，post用来增加或者修改信息\nget请求数据 把参数放在http的协议头里面用问号拼接，后台接收到的是字符串\npost请求，会把参数放在http请求的包里，后台接收到的是form表单\n不同的浏览器对get请求的URL的长度有限制、post没有\npost更安全，因为get请求的参数可能会被浏览器缓存\n\n### 标题超过宽度用css省略文字\n### js两种继承方式\n### 原型链\n    实例的__proto__指向构造函数的prototype,构造函数的prototype的__proto__指向上一级构造函数的prototype,一直到Object.prototype.__ptoto__==null就到头了，形成一条原型链\n\n闭包\n    解决变量作用域的方案\n\nonscroll 节流\njsonp相对于ajax的缺点\n算法：快速排序\n\n js异步执行顺序  css预编译  angular 数据绑定方式和原理，angular脏查询的原理\n\n\n# CSS\n## 绝对剧中\n## transform\n## animation\n## CSS3新特性\n### 新增的css3的选择器\n\ntransform\ntransition\nanimation:ani ease 1s;\n<!-- -keyframe- -->\n\nE:nth-last-child(n) \nE:nth-of-type(n) \nE:nth-last-of-type(n) \nE:last-child \nE:first-of-type \nE:only-child \nE:only-of-type \nE:empty \nE:checked \nE:enabled \nE:disabled \nE::selection \nE:not(s)\nE::not(.s)\nbody: nth-child(even), nth-child(odd)/*：此处他们分别代表了表格（tbody）下面的偶数行和奇数行（tr）*/等等......\n## \n\n一面：\n\n浏览器为什么不实现文件操作\n从键盘输入URL到网页呈现发生了什么（web服务器、DNS、驱动、协议、CDN、代理、渲染引擎、DOMTree+CSSRule、JS引擎）\n事件模型\nCSS3新特性、CSS绝对居中\nTCP/IP一定要三次握手吗\n对除get、post其他请求类型的了解\n前端缓存\n跨域\nxss、csrf攻击及防范\n基本数据类型\nPromise原理、实现异步的方法\nwebpack类似的构建工具\n为什么前端模块化、工程化\n快速排序\n","source":"_posts/面试题.md","raw":"---\ntitle: 面试题\ncomments: true\ndate: 2017-07-18 17:39:37\ntags: 随笔\n---\n\n# 美团 2017年07月20日\n### css3（动画、flex)\n### 标签上下绝对剧中的几种方法\n### css盒模型 box-sizing\n### get post区别\n\n<!-- more -->\n1、公认意义上、get用来获取信息，post用来增加或者修改信息\nget请求数据 把参数放在http的协议头里面用问号拼接，后台接收到的是字符串\npost请求，会把参数放在http请求的包里，后台接收到的是form表单\n不同的浏览器对get请求的URL的长度有限制、post没有\npost更安全，因为get请求的参数可能会被浏览器缓存\n\n### 标题超过宽度用css省略文字\n### js两种继承方式\n### 原型链\n    实例的__proto__指向构造函数的prototype,构造函数的prototype的__proto__指向上一级构造函数的prototype,一直到Object.prototype.__ptoto__==null就到头了，形成一条原型链\n\n闭包\n    解决变量作用域的方案\n\nonscroll 节流\njsonp相对于ajax的缺点\n算法：快速排序\n\n js异步执行顺序  css预编译  angular 数据绑定方式和原理，angular脏查询的原理\n\n\n# CSS\n## 绝对剧中\n## transform\n## animation\n## CSS3新特性\n### 新增的css3的选择器\n\ntransform\ntransition\nanimation:ani ease 1s;\n<!-- -keyframe- -->\n\nE:nth-last-child(n) \nE:nth-of-type(n) \nE:nth-last-of-type(n) \nE:last-child \nE:first-of-type \nE:only-child \nE:only-of-type \nE:empty \nE:checked \nE:enabled \nE:disabled \nE::selection \nE:not(s)\nE::not(.s)\nbody: nth-child(even), nth-child(odd)/*：此处他们分别代表了表格（tbody）下面的偶数行和奇数行（tr）*/等等......\n## \n\n一面：\n\n浏览器为什么不实现文件操作\n从键盘输入URL到网页呈现发生了什么（web服务器、DNS、驱动、协议、CDN、代理、渲染引擎、DOMTree+CSSRule、JS引擎）\n事件模型\nCSS3新特性、CSS绝对居中\nTCP/IP一定要三次握手吗\n对除get、post其他请求类型的了解\n前端缓存\n跨域\nxss、csrf攻击及防范\n基本数据类型\nPromise原理、实现异步的方法\nwebpack类似的构建工具\n为什么前端模块化、工程化\n快速排序\n","slug":"面试题","published":1,"updated":"2019-08-31T09:34:04.461Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8m0013b6e8dvek9t6u","content":"<h1 id=\"美团-2017年07月20日\"><a href=\"#美团-2017年07月20日\" class=\"headerlink\" title=\"美团 2017年07月20日\"></a>美团 2017年07月20日</h1><h3 id=\"css3（动画、flex\"><a href=\"#css3（动画、flex\" class=\"headerlink\" title=\"css3（动画、flex)\"></a>css3（动画、flex)</h3><h3 id=\"标签上下绝对剧中的几种方法\"><a href=\"#标签上下绝对剧中的几种方法\" class=\"headerlink\" title=\"标签上下绝对剧中的几种方法\"></a>标签上下绝对剧中的几种方法</h3><h3 id=\"css盒模型-box-sizing\"><a href=\"#css盒模型-box-sizing\" class=\"headerlink\" title=\"css盒模型 box-sizing\"></a>css盒模型 box-sizing</h3><h3 id=\"get-post区别\"><a href=\"#get-post区别\" class=\"headerlink\" title=\"get post区别\"></a>get post区别</h3><a id=\"more\"></a>\n<p>1、公认意义上、get用来获取信息，post用来增加或者修改信息<br>get请求数据 把参数放在http的协议头里面用问号拼接，后台接收到的是字符串<br>post请求，会把参数放在http请求的包里，后台接收到的是form表单<br>不同的浏览器对get请求的URL的长度有限制、post没有<br>post更安全，因为get请求的参数可能会被浏览器缓存</p>\n<h3 id=\"标题超过宽度用css省略文字\"><a href=\"#标题超过宽度用css省略文字\" class=\"headerlink\" title=\"标题超过宽度用css省略文字\"></a>标题超过宽度用css省略文字</h3><h3 id=\"js两种继承方式\"><a href=\"#js两种继承方式\" class=\"headerlink\" title=\"js两种继承方式\"></a>js两种继承方式</h3><h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><pre><code>实例的__proto__指向构造函数的prototype,构造函数的prototype的__proto__指向上一级构造函数的prototype,一直到Object.prototype.__ptoto__==null就到头了，形成一条原型链\n</code></pre><p>闭包<br>    解决变量作用域的方案</p>\n<p>onscroll 节流<br>jsonp相对于ajax的缺点<br>算法：快速排序</p>\n<p> js异步执行顺序  css预编译  angular 数据绑定方式和原理，angular脏查询的原理</p>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><h2 id=\"绝对剧中\"><a href=\"#绝对剧中\" class=\"headerlink\" title=\"绝对剧中\"></a>绝对剧中</h2><h2 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h2><h2 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h2><h2 id=\"CSS3新特性\"><a href=\"#CSS3新特性\" class=\"headerlink\" title=\"CSS3新特性\"></a>CSS3新特性</h2><h3 id=\"新增的css3的选择器\"><a href=\"#新增的css3的选择器\" class=\"headerlink\" title=\"新增的css3的选择器\"></a>新增的css3的选择器</h3><p>transform<br>transition<br>animation:ani ease 1s;<br><!-- -keyframe- --></p>\n<p>E:nth-last-child(n)<br>E:nth-of-type(n)<br>E:nth-last-of-type(n)<br>E:last-child<br>E:first-of-type<br>E:only-child<br>E:only-of-type<br>E:empty<br>E:checked<br>E:enabled<br>E:disabled<br>E::selection<br>E:not(s)<br>E::not(.s)<br>body: nth-child(even), nth-child(odd)/<em>：此处他们分别代表了表格（tbody）下面的偶数行和奇数行（tr）</em>/等等……</p>\n<p>## </p>\n<p>一面：</p>\n<p>浏览器为什么不实现文件操作<br>从键盘输入URL到网页呈现发生了什么（web服务器、DNS、驱动、协议、CDN、代理、渲染引擎、DOMTree+CSSRule、JS引擎）<br>事件模型<br>CSS3新特性、CSS绝对居中<br>TCP/IP一定要三次握手吗<br>对除get、post其他请求类型的了解<br>前端缓存<br>跨域<br>xss、csrf攻击及防范<br>基本数据类型<br>Promise原理、实现异步的方法<br>webpack类似的构建工具<br>为什么前端模块化、工程化<br>快速排序</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"美团-2017年07月20日\"><a href=\"#美团-2017年07月20日\" class=\"headerlink\" title=\"美团 2017年07月20日\"></a>美团 2017年07月20日</h1><h3 id=\"css3（动画、flex\"><a href=\"#css3（动画、flex\" class=\"headerlink\" title=\"css3（动画、flex)\"></a>css3（动画、flex)</h3><h3 id=\"标签上下绝对剧中的几种方法\"><a href=\"#标签上下绝对剧中的几种方法\" class=\"headerlink\" title=\"标签上下绝对剧中的几种方法\"></a>标签上下绝对剧中的几种方法</h3><h3 id=\"css盒模型-box-sizing\"><a href=\"#css盒模型-box-sizing\" class=\"headerlink\" title=\"css盒模型 box-sizing\"></a>css盒模型 box-sizing</h3><h3 id=\"get-post区别\"><a href=\"#get-post区别\" class=\"headerlink\" title=\"get post区别\"></a>get post区别</h3>","more":"<p>1、公认意义上、get用来获取信息，post用来增加或者修改信息<br>get请求数据 把参数放在http的协议头里面用问号拼接，后台接收到的是字符串<br>post请求，会把参数放在http请求的包里，后台接收到的是form表单<br>不同的浏览器对get请求的URL的长度有限制、post没有<br>post更安全，因为get请求的参数可能会被浏览器缓存</p>\n<h3 id=\"标题超过宽度用css省略文字\"><a href=\"#标题超过宽度用css省略文字\" class=\"headerlink\" title=\"标题超过宽度用css省略文字\"></a>标题超过宽度用css省略文字</h3><h3 id=\"js两种继承方式\"><a href=\"#js两种继承方式\" class=\"headerlink\" title=\"js两种继承方式\"></a>js两种继承方式</h3><h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><pre><code>实例的__proto__指向构造函数的prototype,构造函数的prototype的__proto__指向上一级构造函数的prototype,一直到Object.prototype.__ptoto__==null就到头了，形成一条原型链\n</code></pre><p>闭包<br>    解决变量作用域的方案</p>\n<p>onscroll 节流<br>jsonp相对于ajax的缺点<br>算法：快速排序</p>\n<p> js异步执行顺序  css预编译  angular 数据绑定方式和原理，angular脏查询的原理</p>\n<h1 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h1><h2 id=\"绝对剧中\"><a href=\"#绝对剧中\" class=\"headerlink\" title=\"绝对剧中\"></a>绝对剧中</h2><h2 id=\"transform\"><a href=\"#transform\" class=\"headerlink\" title=\"transform\"></a>transform</h2><h2 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h2><h2 id=\"CSS3新特性\"><a href=\"#CSS3新特性\" class=\"headerlink\" title=\"CSS3新特性\"></a>CSS3新特性</h2><h3 id=\"新增的css3的选择器\"><a href=\"#新增的css3的选择器\" class=\"headerlink\" title=\"新增的css3的选择器\"></a>新增的css3的选择器</h3><p>transform<br>transition<br>animation:ani ease 1s;<br><!-- -keyframe- --></p>\n<p>E:nth-last-child(n)<br>E:nth-of-type(n)<br>E:nth-last-of-type(n)<br>E:last-child<br>E:first-of-type<br>E:only-child<br>E:only-of-type<br>E:empty<br>E:checked<br>E:enabled<br>E:disabled<br>E::selection<br>E:not(s)<br>E::not(.s)<br>body: nth-child(even), nth-child(odd)/<em>：此处他们分别代表了表格（tbody）下面的偶数行和奇数行（tr）</em>/等等……</p>\n<p>## </p>\n<p>一面：</p>\n<p>浏览器为什么不实现文件操作<br>从键盘输入URL到网页呈现发生了什么（web服务器、DNS、驱动、协议、CDN、代理、渲染引擎、DOMTree+CSSRule、JS引擎）<br>事件模型<br>CSS3新特性、CSS绝对居中<br>TCP/IP一定要三次握手吗<br>对除get、post其他请求类型的了解<br>前端缓存<br>跨域<br>xss、csrf攻击及防范<br>基本数据类型<br>Promise原理、实现异步的方法<br>webpack类似的构建工具<br>为什么前端模块化、工程化<br>快速排序</p>"},{"title":"javascript执行堆栈","comments":1,"date":"2020-01-15T11:55:06.000Z","_content":"\n\n\n# Js堆栈\n\n## j s内存机制\n\n栈内存：储存基础数据类型和引用数据的指针\n堆内存：储存引用数据类型\nJS的引用数据类型大小不固定\n","source":"_posts/javascript执行堆栈.md","raw":"---\ntitle: javascript执行堆栈\ncomments: true\ndate: 2020-01-15 19:55:06\ntags:\n---\n\n\n\n# Js堆栈\n\n## j s内存机制\n\n栈内存：储存基础数据类型和引用数据的指针\n堆内存：储存引用数据类型\nJS的引用数据类型大小不固定\n","slug":"javascript执行堆栈","published":1,"updated":"2020-01-21T06:25:36.504Z","layout":"post","photos":[],"link":"","_id":"cks4nsi8t0016b6e8fq4u3c70","content":"<h1 id=\"Js堆栈\"><a href=\"#Js堆栈\" class=\"headerlink\" title=\"Js堆栈\"></a>Js堆栈</h1><h2 id=\"j-s内存机制\"><a href=\"#j-s内存机制\" class=\"headerlink\" title=\"j s内存机制\"></a>j s内存机制</h2><p>栈内存：储存基础数据类型和引用数据的指针<br>堆内存：储存引用数据类型<br>JS的引用数据类型大小不固定</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Js堆栈\"><a href=\"#Js堆栈\" class=\"headerlink\" title=\"Js堆栈\"></a>Js堆栈</h1><h2 id=\"j-s内存机制\"><a href=\"#j-s内存机制\" class=\"headerlink\" title=\"j s内存机制\"></a>j s内存机制</h2><p>栈内存：储存基础数据类型和引用数据的指针<br>堆内存：储存引用数据类型<br>JS的引用数据类型大小不固定</p>\n"}],"PostAsset":[{"_id":"source/_posts/函数式编程/1.png","slug":"1.png","post":"cks4nsi8k0010b6e8axabaq92","modified":1,"renderable":0},{"_id":"source/_posts/record-problem/Mobile-debug.png","post":"cks4nsi8f000qb6e8jbj9n5ki","slug":"Mobile-debug.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cks4nsi7x0005b6e8gwwrkl08","tag_id":"cks4nsi7z0007b6e8oz88bsxh","_id":"cks4nsi86000cb6e8p4qlwr2d"},{"post_id":"cks4nsi810008b6e82geug0b7","tag_id":"cks4nsi7z0007b6e8oz88bsxh","_id":"cks4nsi89000fb6e8rxhj50ru"},{"post_id":"cks4nsi8m0013b6e8dvek9t6u","tag_id":"cks4nsi8m0014b6e8ouxd3cvj","_id":"cks4nsi8n0015b6e82w9vbcsw"}],"Tag":[{"name":"面试","_id":"cks4nsi7z0007b6e8oz88bsxh"},{"name":"随笔","_id":"cks4nsi8m0014b6e8ouxd3cvj"}]}}